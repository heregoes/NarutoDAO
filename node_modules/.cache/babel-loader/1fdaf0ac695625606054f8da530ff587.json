{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnyante/Desktop/Buildspace-DAO-Starter/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\"; // import thirdweb\n\nimport { useWeb3 } from \"@3rdweb/hooks\"; // We instantiate the sdk on Rinkeby.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDropModule = sdk.getBundleDropModule(\"0x9D02F9AFee94d5CE7d6eF3922fAd2d35482C986B\");\n\nconst App = () => {\n  _s();\n\n  // Use the connectWallet hook thirdweb gives us.\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋 Address:\", address); // State variable for us to know if user has our NFT.\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting.\n\n  const [isClaiming, setIsClaiming] = useState(false); // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n\n  const signer = provider ? provider.getSigner() : undefined; // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n  useEffect(async () => {\n    // If they don't have an connected wallet, exit!\n    if (!address) {\n      return;\n    } // Check if the user has the NFT by using bundleDropModule.balanceOf\n\n\n    const balance = await bundleDropModule.balanceOf(address, \"0\");\n\n    try {\n      // If balance is greater than 0, they have our NFT!\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    } catch (error) {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    }\n  }, [address]);\n\n  const mintNft = async () => {\n    setIsClaiming(true);\n\n    try {\n      // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n      await bundleDropModule.claim(\"0\", 1); // Set claim state.\n\n      setHasClaimedNFT(true); // Show user their fancy new NFT!\n\n      console.log(`🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`);\n    } catch (error) {\n      console.error(\"failed to claim\", error);\n    } finally {\n      // Stop loading state.\n      setIsClaiming(false);\n    }\n  };\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to NarutoDAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this);\n  } // This is the case where we have the user's address\n  // which means they've connected their wallet to our site!\n  //   return (\n  //     <div className=\"landing\">\n  //       <h1>👀 wallet connected, now what!</h1>\n  //     </div>);\n  // Render mint nft screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6ADAO Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => mintNft(),\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"5z1o/SmDqsqD9hxbpq/aLqTxMbw=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gabrielnyante/Desktop/Buildspace-DAO-Starter/src/App.jsx"],"names":["useEffect","useMemo","useState","ThirdwebSDK","useWeb3","sdk","bundleDropModule","getBundleDropModule","App","connectWallet","address","error","provider","console","log","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","signer","getSigner","undefined","setProviderOrSigner","balance","balanceOf","gt","mintNft","claim"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// import thirdweb\nimport { useWeb3 } from \"@3rdweb/hooks\";\n\n// We instantiate the sdk on Rinkeby.\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n    \"0x9D02F9AFee94d5CE7d6eF3922fAd2d35482C986B\",\n  );\n\nconst App = () => {\n  // Use the connectWallet hook thirdweb gives us.\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋 Address:\", address)\n\n    // State variable for us to know if user has our NFT.\n    const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\n    // isClaiming lets us easily keep a loading state while the NFT is minting.\n  const [isClaiming, setIsClaiming] = useState(false);\n\n    // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n    // Another useEffect!\n    useEffect(() => {\n        // We pass the signer to the sdk, which enables us to interact with\n        // our deployed contract!\n        sdk.setProviderOrSigner(signer);\n      }, [signer]);\n    \n\n    useEffect(async () => {\n      // If they don't have an connected wallet, exit!\n      if (!address) {\n        return;\n      }\n  \n      // Check if the user has the NFT by using bundleDropModule.balanceOf\n      const balance = await bundleDropModule.balanceOf(address, \"0\");\n     \n      try {\n        // If balance is greater than 0, they have our NFT!\n        if(balance.gt(0)) {\n            setHasClaimedNFT(true);\n            console.log(\"🌟 this user has a membership NFT!\");\n        } else {\n            setHasClaimedNFT(false);\n            console.log(\"😭 this user doesn't have a membership NFT.\")\n        }\n      } catch (error) {\n          setHasClaimedNFT(false);\n          console.error(\"failed to nft balance\", error);\n      }\n    }, [address]);\n\n    const mintNft = async () => {\n        setIsClaiming(true);\n        try {\n          // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n          await bundleDropModule.claim(\"0\",1);\n          // Set claim state.\n          setHasClaimedNFT(true);\n          // Show user their fancy new NFT!\n          console.log(`🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`);\n        } catch (error) {\n          console.error(\"failed to claim\", error);\n        } finally {\n          // Stop loading state.\n          setIsClaiming(false);\n        }\n      }\n\n    if (!address) {\n        return (\n          <div className=\"landing\">\n            <h1>Welcome to NarutoDAO</h1>\n            <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n              Connect your wallet\n            </button>\n          </div>\n        );\n      }\n\n\n  \n  // This is the case where we have the user's address\n  // which means they've connected their wallet to our site!\n//   return (\n//     <div className=\"landing\">\n//       <h1>👀 wallet connected, now what!</h1>\n//     </div>);\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}