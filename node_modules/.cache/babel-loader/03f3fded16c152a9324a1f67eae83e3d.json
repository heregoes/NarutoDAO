{"ast":null,"code":"import fetch$1 from 'node-fetch';\nimport { arrayify, hexlify, hexZeroPad } from '@ethersproject/bytes';\nimport { Contract } from '@ethersproject/contracts';\nimport { ERC20__factory, SignatureMint1155__factory, ERC721__factory, Coin__factory, ProtocolControl__factory, Royalty__factory, NFTCollection__factory, Splits__factory, SignatureMint721__factory, Market__factory, Pack__factory, LazyMintERC721__factory, LazyMintERC1155__factory, DataStore__factory, VotingGovernor__factory, IERC20__factory, Marketplace__factory, LazyNFT__factory, ERC1155__factory, ERC165__factory, NFT__factory, Registry__factory, Forwarder__factory } from '@3rdweb/contracts';\nimport { AddressZero } from '@ethersproject/constants';\nimport { formatUnits, parseUnits } from '@ethersproject/units';\nimport { Signer, ethers, BigNumber, Contract as Contract$1 } from 'ethers';\nimport { $enum } from 'ts-enum-util';\nimport { BigNumber as BigNumber$1 } from '@ethersproject/bignumber';\nimport { toUtf8Bytes, isAddress, hexlify as hexlify$1 } from 'ethers/lib/utils';\nimport { v4 } from 'uuid';\nimport { Provider } from '@ethersproject/providers';\nimport { EventEmitter2 } from 'eventemitter2';\nimport { JsonProperty, PropertyConvertingMode, JsonObject, JsonConvert } from 'json2typescript';\nimport MerkleTree, { MerkleTree as MerkleTree$1 } from 'merkletreejs';\nimport { __decorate } from 'tslib';\nimport { isAddress as isAddress$1 } from '@ethersproject/address';\nimport { SHA256 } from 'crypto-js';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar runtime_1 = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var runtime = function (exports) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n    function define(obj, key, value) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n      return obj[key];\n    }\n\n    try {\n      // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n      define({}, \"\");\n    } catch (err) {\n      define = function (obj, key, value) {\n        return obj[key] = value;\n      };\n    }\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n\n\n    var IteratorPrototype = {};\n    define(IteratorPrototype, iteratorSymbol, function () {\n      return this;\n    });\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = GeneratorFunctionPrototype;\n    define(Gp, \"constructor\", GeneratorFunctionPrototype);\n    define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        define(prototype, method, function (arg) {\n          return this._invoke(method, arg);\n        });\n      });\n    }\n\n    exports.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    exports.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    exports.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator, PromiseImpl) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return PromiseImpl.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return PromiseImpl.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n      return this;\n    });\n    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n      if (PromiseImpl === void 0) PromiseImpl = Promise;\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          // Note: [\"return\"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator[\"return\"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    define(Gp, iteratorSymbol, function () {\n      return this;\n    });\n    define(Gp, \"toString\", function () {\n      return \"[object Generator]\";\n    });\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    exports.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    exports.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined$1,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function (skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined$1;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n      stop: function () {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function (exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function (type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function (record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function (finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function (tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function (iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    }; // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n\n    return exports;\n  }( // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  module.exports);\n\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, in modern engines\n    // we can explicitly access globalThis. In older engines we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    if (typeof globalThis === \"object\") {\n      globalThis.regeneratorRuntime = runtime;\n    } else {\n      Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n    }\n  }\n});\n/**\r\n * Error that may get thrown if IPFS returns nothing for a given uri.\r\n * @public\r\n */\n\nvar NotFoundError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(NotFoundError, _Error);\n  /** @internal */\n\n\n  function NotFoundError(identifier) {\n    return _Error.call(this, identifier ? \"Object with id \" + identifier + \" NOT FOUND\" : \"NOT_FOUND\") || this;\n  }\n\n  return NotFoundError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Error that may get thrown if an invalid address was passed\r\n * @public\r\n */\n\n\nvar InvalidAddressError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InvalidAddressError, _Error2);\n  /** @internal */\n\n\n  function InvalidAddressError(address) {\n    return _Error2.call(this, address ? \"'\" + address + \"' is an invalid address\" : \"Invalid address passed\") || this;\n  }\n\n  return InvalidAddressError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar MissingRoleError = /*#__PURE__*/function (_Error3) {\n  _inheritsLoose(MissingRoleError, _Error3);\n  /** @internal */\n\n  /** @internal */\n\n\n  function MissingRoleError(address, role) {\n    return _Error3.call(this, \"MISSING ROLE: \" + address + \" does not have the '\" + role + \"' role\") || this;\n  }\n\n  return MissingRoleError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar AssetNotFoundError = /*#__PURE__*/function (_Error4) {\n  _inheritsLoose(AssetNotFoundError, _Error4);\n  /** @internal */\n\n  /** @internal */\n\n\n  function AssetNotFoundError(message) {\n    if (message === void 0) {\n      message = \"The asset you're trying to use could not be found.\";\n    }\n\n    return _Error4.call(this, \"message: \" + message) || this;\n  }\n\n  return AssetNotFoundError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar UploadError = /*#__PURE__*/function (_Error5) {\n  _inheritsLoose(UploadError, _Error5);\n  /** @internal */\n\n\n  function UploadError(message) {\n    return _Error5.call(this, \"UPLOAD_FAILED: \" + message) || this;\n  }\n\n  return UploadError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar FileNameMissingError = /*#__PURE__*/function (_Error6) {\n  _inheritsLoose(FileNameMissingError, _Error6);\n  /** @internal */\n\n\n  function FileNameMissingError() {\n    return _Error6.call(this, \"File name is required when object is not a `File` type object.\") || this;\n  }\n\n  return FileNameMissingError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DuplicateFileNameError = /*#__PURE__*/function (_Error7) {\n  _inheritsLoose(DuplicateFileNameError, _Error7);\n  /** @internal */\n\n\n  function DuplicateFileNameError(fileName) {\n    return _Error7.call(this, \"DUPLICATE_FILE_NAME_ERROR: File name \" + fileName + \" was passed for more than one file.\") || this;\n  }\n\n  return DuplicateFileNameError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar NotEnoughTokensError = /*#__PURE__*/function (_Error8) {\n  _inheritsLoose(NotEnoughTokensError, _Error8);\n  /** @internal */\n\n\n  function NotEnoughTokensError(contractAddress, quantity, available) {\n    return _Error8.call(this, \"BALANCE ERROR: you do not have enough balance on contract \" + contractAddress + \" to use \" + quantity + \" tokens. You have \" + available + \" tokens available.\") || this;\n  }\n\n  return NotEnoughTokensError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar MissingOwnerRoleError = /*#__PURE__*/function (_Error9) {\n  _inheritsLoose(MissingOwnerRoleError, _Error9);\n  /** @internal */\n\n\n  function MissingOwnerRoleError() {\n    return _Error9.call(this, \"LIST ERROR: you should be the owner of the token to list it.\") || this;\n  }\n\n  return MissingOwnerRoleError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar QuantityAboveLimitError = /*#__PURE__*/function (_Error10) {\n  _inheritsLoose(QuantityAboveLimitError, _Error10);\n  /** @internal */\n\n\n  function QuantityAboveLimitError(quantity) {\n    return _Error10.call(this, \"BUY ERROR: You cannot buy more than \" + quantity + \" tokens\") || this;\n  }\n\n  return QuantityAboveLimitError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Thrown when data fails to fetch from storage.\r\n */\n\n\nvar FetchError = /*#__PURE__*/function (_Error11) {\n  _inheritsLoose(FetchError, _Error11);\n  /** @internal */\n\n\n  function FetchError(message, innerError) {\n    var _this;\n\n    _this = _Error11.call(this, \"FETCH_FAILED: \" + message) || this;\n    _this.innerError = void 0;\n    _this.innerError = innerError;\n    return _this;\n  }\n\n  return FetchError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Thrown when attempting to create a snapshot with duplicate leafs\r\n */\n\n\nvar DuplicateLeafsError = /*#__PURE__*/function (_Error12) {\n  _inheritsLoose(DuplicateLeafsError, _Error12);\n\n  function DuplicateLeafsError(message) {\n    return _Error12.call(this, \"DUPLICATE_LEAFS\" + (message ? \" : \" + message : \"\")) || this;\n  }\n\n  return DuplicateLeafsError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Thrown when attempting to update/cancel an auction that already started\r\n */\n\n\nvar AuctionAlreadyStartedError = /*#__PURE__*/function (_Error13) {\n  _inheritsLoose(AuctionAlreadyStartedError, _Error13);\n\n  function AuctionAlreadyStartedError(id) {\n    return _Error13.call(this, \"Auction already started with existing bid\" + (id ? \", id: \" + id : \"\")) || this;\n  }\n\n  return AuctionAlreadyStartedError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar FunctionDeprecatedError = /*#__PURE__*/function (_Error14) {\n  _inheritsLoose(FunctionDeprecatedError, _Error14);\n  /** @internal */\n\n\n  function FunctionDeprecatedError(message) {\n    return _Error14.call(this, \"FUNCTION DEPRECATED. \" + (message ? \"Use \" + message + \" instead\" : \"\")) || this;\n  }\n\n  return FunctionDeprecatedError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\r\n */\n\n\nvar ListingNotFoundError = /*#__PURE__*/function (_Error15) {\n  _inheritsLoose(ListingNotFoundError, _Error15);\n\n  function ListingNotFoundError(marketplaceContractAddress, listingId) {\n    return _Error15.call(this, \"Could not find listing.\" + (marketplaceContractAddress ? \" marketplace address: \" + marketplaceContractAddress : \"\") + (listingId ? \" listing id: \" + listingId : \"\")) || this;\n  }\n\n  return ListingNotFoundError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Thrown when trying to retrieve a listing of the wrong type\r\n */\n\n\nvar WrongListingTypeError = /*#__PURE__*/function (_Error16) {\n  _inheritsLoose(WrongListingTypeError, _Error16);\n\n  function WrongListingTypeError(marketplaceContractAddress, listingId, actualType, expectedType) {\n    return _Error16.call(this, \"Incorrect listing type. Are you sure you're using the right method?.\" + (marketplaceContractAddress ? \" marketplace address: \" + marketplaceContractAddress : \"\") + (listingId ? \" listing id: \" + listingId : \"\") + (expectedType ? \" expected type: \" + expectedType : \"\") + (actualType ? \" actual type: \" + actualType : \"\")) || this;\n  }\n\n  return WrongListingTypeError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Thrown when attempting to transfer an asset that has restricted transferability\r\n */\n\n\nvar RestrictedTransferError = /*#__PURE__*/function (_Error17) {\n  _inheritsLoose(RestrictedTransferError, _Error17);\n\n  function RestrictedTransferError(assetAddress) {\n    return _Error17.call(this, \"Failed to transfer asset, transfer is restricted.\" + (assetAddress ? \" Address : \" + assetAddress : \"\")) || this;\n  }\n\n  return RestrictedTransferError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Thrown when attempting to execute an admin-role function.\r\n */\n\n\nvar AdminRoleMissingError = /*#__PURE__*/function (_Error18) {\n  _inheritsLoose(AdminRoleMissingError, _Error18);\n\n  function AdminRoleMissingError(address, contractAddress, message) {\n    if (message === void 0) {\n      message = \"Failed to execute transaction\";\n    }\n\n    return _Error18.call(this, message + \", admin role is missing\" + (address ? \" on address: \" + address : \"\") + (contractAddress ? \" on contract: \" + contractAddress : \"\")) || this;\n  }\n\n  return AdminRoleMissingError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Thrown when attempting to close an auction that has not ended\r\n */\n\n\nvar AuctionHasNotEndedError = /*#__PURE__*/function (_Error19) {\n  _inheritsLoose(AuctionHasNotEndedError, _Error19);\n\n  function AuctionHasNotEndedError(id, endTime) {\n    return _Error19.call(this, \"Auction has not ended yet\" + (id ? \", id: \" + id : \"\") + (endTime ? \", end time: \" + endTime.toString() : \"\")) || this;\n  }\n\n  return AuctionHasNotEndedError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = /*#__PURE__*/require(\"form-data\");\n}\n\nif (!globalThis.File) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.File = /*#__PURE__*/require(\"@web-std/file\").File;\n}\n/**\r\n *\r\n * @param ipfsUrl - the ipfs:// uri\r\n * @param gatewayUrl - the gateway url\r\n * @returns the fully formed IPFS url\r\n * @internal\r\n */\n\n\nfunction replaceIpfsWithGateway(ipfsUrl, gatewayUrl) {\n  if (!ipfsUrl || typeof ipfsUrl !== \"string\") {\n    return \"\";\n  }\n\n  if (!gatewayUrl.endsWith(\"/\")) {\n    gatewayUrl = gatewayUrl + \"/\";\n  }\n\n  return ipfsUrl.replace(\"ipfs://\", gatewayUrl);\n}\n\nfunction recursiveResolveGatewayUrl(json, storage) {\n  if (typeof json === \"object\") {\n    var keylist = Object.keys(json);\n    keylist.forEach(function (key) {\n      if (typeof json[key] === \"object\") {\n        json[key] = recursiveResolveGatewayUrl(json[key], storage);\n      } else if (typeof json[key] === \"string\") {\n        json[key] = storage.resolveFullUrl(json[key]);\n      }\n    });\n  }\n\n  return json;\n}\n/**\r\n * A helper function to upload arbitrary data to IPFS and return the resulting IPFS uri.\r\n * @param data - stringified JSON || File\r\n * @param contractAddress - (Optional) the contract address to associate the data with\r\n * @param signerAddress - (Optional) the wallet address of the actor that is uploading the file\r\n * @returns The `ipfs://<hash>` uri of the uploaded file\r\n * @public\r\n */\n\n\nfunction uploadToIPFS(_x, _x2, _x3) {\n  return _uploadToIPFS.apply(this, arguments);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _uploadToIPFS() {\n  _uploadToIPFS = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(data, contractAddress, signerAddress) {\n    var headers, formData, res, body;\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = {\n              \"X-App-Name\": \"CONSOLE-TS-SDK-\" + contractAddress,\n              \"X-Public-Address\": signerAddress || \"\"\n            };\n            formData = new FormData();\n            formData.append(\"file\", data);\n            _context.next = 5;\n            return fetch(\"https://upload.nftlabs.co/upload\", {\n              method: \"POST\",\n              body: formData,\n              headers: headers\n            });\n\n          case 5:\n            res = _context.sent;\n            _context.prev = 6;\n            _context.next = 9;\n            return res.json();\n\n          case 9:\n            body = _context.sent;\n            return _context.abrupt(\"return\", body.IpfsUri);\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](6);\n            throw new UploadError(\"Failed to upload to IPFS: \" + _context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 13]]);\n  }));\n  return _uploadToIPFS.apply(this, arguments);\n}\n\nfunction uploadMetadata(_x4, _x5, _x6) {\n  return _uploadMetadata.apply(this, arguments);\n}\n\nfunction _uploadMetadata() {\n  _uploadMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(metadata, contractAddress, signerAddress) {\n    var _fileHandler, _fileHandler2;\n\n    return runtime_1.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _fileHandler2 = function _fileHandler4() {\n              _fileHandler2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(object) {\n                var keys, key, val, shouldUpload;\n                return runtime_1.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        keys = Object.keys(object);\n                        _context2.t0 = runtime_1.keys(keys);\n\n                      case 2:\n                        if ((_context2.t1 = _context2.t0()).done) {\n                          _context2.next = 18;\n                          break;\n                        }\n\n                        key = _context2.t1.value;\n                        val = object[keys[key]];\n                        shouldUpload = val instanceof File || val instanceof Buffer;\n\n                        if (!shouldUpload) {\n                          _context2.next = 10;\n                          break;\n                        }\n\n                        _context2.next = 9;\n                        return uploadToIPFS(object[keys[key]], contractAddress, signerAddress);\n\n                      case 9:\n                        object[keys[key]] = _context2.sent;\n\n                      case 10:\n                        if (!(shouldUpload && typeof object[keys[key]] !== \"string\")) {\n                          _context2.next = 12;\n                          break;\n                        }\n\n                        throw new Error(\"Upload to IPFS failed\");\n\n                      case 12:\n                        if (!(typeof val === \"object\")) {\n                          _context2.next = 16;\n                          break;\n                        }\n\n                        _context2.next = 15;\n                        return _fileHandler(object[keys[key]]);\n\n                      case 15:\n                        object[keys[key]] = _context2.sent;\n\n                      case 16:\n                        _context2.next = 2;\n                        break;\n\n                      case 18:\n                        return _context2.abrupt(\"return\", object);\n\n                      case 19:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n              return _fileHandler2.apply(this, arguments);\n            };\n\n            _fileHandler = function _fileHandler3(_x7) {\n              return _fileHandler2.apply(this, arguments);\n            };\n\n            if (!(typeof metadata === \"string\")) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", metadata);\n\n          case 4:\n            _context3.next = 6;\n            return _fileHandler(metadata);\n\n          case 6:\n            metadata = _context3.sent;\n            _context3.next = 9;\n            return uploadToIPFS(JSON.stringify(metadata), contractAddress, signerAddress);\n\n          case 9:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _uploadMetadata.apply(this, arguments);\n}\n/**\r\n * @internal\r\n */\n\n\nvar InterfaceId_IERC721 = /*#__PURE__*/arrayify(\"0x80ac58cd\");\n/**\r\n * @internal\r\n */\n\nvar InterfaceId_IERC1155 = /*#__PURE__*/arrayify(\"0xd9b67a26\");\nvar contractUriABI = [{\n  inputs: [],\n  name: \"contractURI\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n/**\r\n * @internal\r\n */\n\nfunction getContractMetadata(_x, _x2, _x3, _x4) {\n  return _getContractMetadata.apply(this, arguments);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getContractMetadata() {\n  _getContractMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(provider, address, storage, resolveGateway) {\n    var contract, uri, meta, json, entity;\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (resolveGateway === void 0) {\n              resolveGateway = false;\n            }\n\n            contract = new Contract(address, contractUriABI, provider);\n            _context.next = 4;\n            return contract.contractURI();\n\n          case 4:\n            uri = _context.sent;\n            _context.next = 7;\n            return storage.get(uri);\n\n          case 7:\n            meta = _context.sent;\n            _context.prev = 8;\n            json = JSON.parse(meta);\n\n            if (resolveGateway) {\n              json = recursiveResolveGatewayUrl(json, storage);\n            }\n\n            entity = _extends({}, json);\n            return _context.abrupt(\"return\", entity);\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](8);\n            throw new Error(\"Failed to parse metadata for contract \" + address + \" with uri \" + uri);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 15]]);\n  }));\n  return _getContractMetadata.apply(this, arguments);\n}\n\nfunction isContract(_x5, _x6) {\n  return _isContract.apply(this, arguments);\n}\n\nfunction _isContract() {\n  _isContract = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(provider, address) {\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return provider.getCode(address);\n\n          case 2:\n            _context2.t0 = _context2.sent;\n            return _context2.abrupt(\"return\", _context2.t0 !== \"0x\");\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _isContract.apply(this, arguments);\n}\n\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"Mainnet\"] = 1] = \"Mainnet\";\n  ChainId[ChainId[\"Ropsten\"] = 3] = \"Ropsten\";\n  ChainId[ChainId[\"Rinkeby\"] = 4] = \"Rinkeby\";\n  ChainId[ChainId[\"Goerli\"] = 5] = \"Goerli\";\n  ChainId[ChainId[\"Kovan\"] = 42] = \"Kovan\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"xDai\"] = 100] = \"xDai\";\n  ChainId[ChainId[\"Polygon\"] = 137] = \"Polygon\";\n  ChainId[ChainId[\"Moonriver\"] = 1285] = \"Moonriver\";\n  ChainId[ChainId[\"Mumbai\"] = 80001] = \"Mumbai\";\n  ChainId[ChainId[\"Harmony\"] = 1666600000] = \"Harmony\";\n  ChainId[ChainId[\"Localhost\"] = 1337] = \"Localhost\";\n  ChainId[ChainId[\"Hardhat\"] = 31337] = \"Hardhat\";\n  ChainId[ChainId[\"Fantom\"] = 250] = \"Fantom\";\n  ChainId[ChainId[\"FantomTestnet\"] = 4002] = \"FantomTestnet\";\n  ChainId[ChainId[\"Avalanche\"] = 43114] = \"Avalanche\";\n  ChainId[ChainId[\"AvalancheFujiTestnet\"] = 43113] = \"AvalancheFujiTestnet\";\n})(ChainId || (ChainId = {}));\n\nvar SUPPORTED_CHAIN_IDS = [ChainId.Mainnet, ChainId.Rinkeby, ChainId.Polygon, ChainId.Mumbai, ChainId.Fantom, ChainId.FantomTestnet, ChainId.Avalanche, ChainId.AvalancheFujiTestnet];\n\nvar _NATIVE_TOKENS;\n/**\r\n * @internal\r\n */\n\n\nvar NATIVE_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\nvar NATIVE_TOKENS = (_NATIVE_TOKENS = {}, _NATIVE_TOKENS[ChainId.Mainnet] = {\n  name: \"Ether\",\n  symbol: \"ETH\",\n  decimals: 18,\n  wrapped: {\n    address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    name: \"Wrapped Ether\",\n    symbol: \"WETH\"\n  }\n}, _NATIVE_TOKENS[ChainId.Rinkeby] = {\n  name: \"Ether\",\n  symbol: \"ETH\",\n  decimals: 18,\n  wrapped: {\n    address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n    name: \"Wrapped Ether\",\n    symbol: \"WETH\"\n  }\n}, _NATIVE_TOKENS[ChainId.Polygon] = {\n  name: \"Matic\",\n  symbol: \"MATIC\",\n  decimals: 18,\n  wrapped: {\n    address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n    name: \"Wrapped Matic\",\n    symbol: \"WMATIC\"\n  }\n}, _NATIVE_TOKENS[ChainId.Mumbai] = {\n  name: \"Matic\",\n  symbol: \"MATIC\",\n  decimals: 18,\n  wrapped: {\n    address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n    name: \"Wrapped Matic\",\n    symbol: \"WMATIC\"\n  }\n}, _NATIVE_TOKENS[ChainId.Avalanche] = {\n  name: \"Avalanche\",\n  symbol: \"AVAX\",\n  decimals: 18,\n  wrapped: {\n    address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n    name: \"Wrapped AVAX\",\n    symbol: \"WAVAX\"\n  }\n}, _NATIVE_TOKENS[ChainId.AvalancheFujiTestnet] = {\n  name: \"Avalanche\",\n  symbol: \"AVAX\",\n  decimals: 18,\n  wrapped: {\n    address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n    name: \"Wrapped AVAX\",\n    symbol: \"WAVAX\"\n  }\n}, _NATIVE_TOKENS[ChainId.Fantom] = {\n  name: \"Fantom\",\n  symbol: \"FTM\",\n  decimals: 18,\n  wrapped: {\n    address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n    name: \"Wrapped Fantom\",\n    symbol: \"WFTM\"\n  }\n}, _NATIVE_TOKENS[ChainId.FantomTestnet] = {\n  name: \"Fantom\",\n  symbol: \"FTM\",\n  decimals: 18,\n  wrapped: {\n    address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n    name: \"Wrapped Fantom\",\n    symbol: \"WFTM\"\n  }\n}, _NATIVE_TOKENS[ChainId.Hardhat] = {\n  name: \"Ether\",\n  symbol: \"ETH\",\n  decimals: 18,\n  wrapped: {\n    address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n    name: \"Wrapped Ether\",\n    symbol: \"WETH\"\n  }\n}, _NATIVE_TOKENS);\n/**\r\n * @internal\r\n */\n\nfunction getCurrencyMetadata(_x, _x2) {\n  return _getCurrencyMetadata.apply(this, arguments);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getCurrencyMetadata() {\n  _getCurrencyMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(providerOrSigner, asset) {\n    var provider, network, nativeToken, erc20, _yield$Promise$all, name, symbol, decimals;\n\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!isNativeToken(asset)) {\n              _context.next = 10;\n              break;\n            }\n\n            if (Signer.isSigner(providerOrSigner)) {\n              provider = providerOrSigner.provider;\n            } else {\n              provider = providerOrSigner;\n            }\n\n            _context.next = 5;\n            return provider.getNetwork();\n\n          case 5:\n            network = _context.sent;\n            nativeToken = getNativeTokenByChainId(network.chainId);\n            return _context.abrupt(\"return\", {\n              name: nativeToken.name,\n              symbol: nativeToken.symbol,\n              decimals: nativeToken.decimals\n            });\n\n          case 10:\n            erc20 = ERC20__factory.connect(asset, providerOrSigner);\n            _context.next = 13;\n            return Promise.all([erc20.name(), erc20.symbol(), erc20.decimals()]);\n\n          case 13:\n            _yield$Promise$all = _context.sent;\n            name = _yield$Promise$all[0];\n            symbol = _yield$Promise$all[1];\n            decimals = _yield$Promise$all[2];\n            return _context.abrupt(\"return\", {\n              name: name,\n              symbol: symbol,\n              decimals: decimals\n            });\n\n          case 18:\n            _context.next = 22;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 22:\n            return _context.abrupt(\"return\", {\n              name: \"\",\n              symbol: \"\",\n              decimals: 0\n            });\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 20]]);\n  }));\n  return _getCurrencyMetadata.apply(this, arguments);\n}\n\nfunction getCurrencyValue(_x3, _x4, _x5) {\n  return _getCurrencyValue.apply(this, arguments);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getCurrencyValue() {\n  _getCurrencyValue = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(providerOrSigner, asset, price) {\n    var metadata;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getCurrencyMetadata(providerOrSigner, asset);\n\n          case 2:\n            metadata = _context2.sent;\n            return _context2.abrupt(\"return\", _extends({}, metadata, {\n              value: price.toString(),\n              displayValue: formatUnits(price, metadata.decimals)\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getCurrencyValue.apply(this, arguments);\n}\n\nfunction isNativeToken(tokenAddress) {\n  return tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS || tokenAddress.toLowerCase() === AddressZero;\n}\n/**\r\n * @internal\r\n */\n\n\nfunction getCurrencyBalance(_x6, _x7, _x8) {\n  return _getCurrencyBalance.apply(this, arguments);\n}\n\nfunction _getCurrencyBalance() {\n  _getCurrencyBalance = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(providerOrSigner, tokenAddress, walletAddress) {\n    var provider, balance, erc20;\n    return runtime_1.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            provider = getProvider(providerOrSigner);\n\n            if (!isNativeToken(tokenAddress)) {\n              _context3.next = 7;\n              break;\n            }\n\n            _context3.next = 4;\n            return provider.getBalance(walletAddress);\n\n          case 4:\n            balance = _context3.sent;\n            _context3.next = 18;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            erc20 = ERC20__factory.connect(tokenAddress, provider);\n            _context3.next = 11;\n            return erc20.balanceOf(walletAddress);\n\n          case 11:\n            balance = _context3.sent;\n            _context3.next = 18;\n            break;\n\n          case 14:\n            _context3.prev = 14;\n            _context3.t0 = _context3[\"catch\"](7);\n            console.error(_context3.t0);\n            throw new Error(\"invalid ERC20 token address\");\n\n          case 18:\n            return _context3.abrupt(\"return\", getCurrencyValue(providerOrSigner, tokenAddress, balance));\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[7, 14]]);\n  }));\n  return _getCurrencyBalance.apply(this, arguments);\n}\n\nfunction getProvider(providerOrSigner) {\n  if (Signer.isSigner(providerOrSigner)) {\n    return providerOrSigner.provider;\n  } else {\n    return providerOrSigner;\n  }\n}\n\nfunction getNativeTokenByChainId(chainId) {\n  return NATIVE_TOKENS[chainId];\n}\n\nvar _ChainlinkVrf;\n/**\r\n *\r\n * @internal\r\n */\n\n\nvar ChainlinkVrf = (_ChainlinkVrf = {}, _ChainlinkVrf[ChainId.Polygon] = {\n  vrfCoordinator: \"0x3d2341ADb2D31f1c5530cDC622016af293177AE0\",\n  linkTokenAddress: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n  keyHash: \"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da\",\n  fees: /*#__PURE__*/ethers.utils.parseEther(\"0.0001\")\n}, _ChainlinkVrf[ChainId.Mumbai] = {\n  vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n  linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n  keyHash: \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n  fees: /*#__PURE__*/ethers.utils.parseEther(\"0.0001\")\n}, _ChainlinkVrf[ChainId.Rinkeby] = {\n  vrfCoordinator: \"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\",\n  linkTokenAddress: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n  keyHash: \"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\",\n  fees: /*#__PURE__*/ethers.utils.parseEther(\"0.1\")\n}, _ChainlinkVrf[ChainId.Mainnet] = {\n  vrfCoordinator: \"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\",\n  linkTokenAddress: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n  keyHash: \"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\",\n  fees: /*#__PURE__*/ethers.utils.parseEther(\"2\")\n}, _ChainlinkVrf[ChainId.Hardhat] = {\n  vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n  linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n  keyHash: \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n  fees: /*#__PURE__*/ethers.utils.parseEther(\"0.0001\")\n}, _ChainlinkVrf);\n/**\r\n * The type of Modules that are available.\r\n * @public\r\n */\n\nvar ModuleType;\n\n(function (ModuleType) {\n  ModuleType[ModuleType[\"CURRENCY\"] = 0] = \"CURRENCY\";\n  ModuleType[ModuleType[\"TOKEN\"] = 0] = \"TOKEN\";\n  ModuleType[ModuleType[\"COLLECTION\"] = 1] = \"COLLECTION\";\n  ModuleType[ModuleType[\"BUNDLE\"] = 1] = \"BUNDLE\";\n  ModuleType[ModuleType[\"NFT\"] = 2] = \"NFT\";\n  ModuleType[ModuleType[\"DYNAMIC_NFT\"] = 3] = \"DYNAMIC_NFT\";\n  ModuleType[ModuleType[\"ACCESS_NFT\"] = 4] = \"ACCESS_NFT\";\n  ModuleType[ModuleType[\"PACK\"] = 5] = \"PACK\";\n  ModuleType[ModuleType[\"MARKET\"] = 6] = \"MARKET\";\n  ModuleType[ModuleType[\"DROP\"] = 7] = \"DROP\";\n  ModuleType[ModuleType[\"DATASTORE\"] = 8] = \"DATASTORE\";\n  ModuleType[ModuleType[\"SPLITS\"] = 9] = \"SPLITS\";\n  ModuleType[ModuleType[\"VOTE\"] = 10] = \"VOTE\";\n  ModuleType[ModuleType[\"BUNDLE_DROP\"] = 11] = \"BUNDLE_DROP\";\n  ModuleType[ModuleType[\"MARKETPLACE\"] = 12] = \"MARKETPLACE\";\n  ModuleType[ModuleType[\"BUNDLE_SIGNATURE\"] = 13] = \"BUNDLE_SIGNATURE\";\n})(ModuleType || (ModuleType = {}));\n/**\r\n *\r\n * @param moduleName - a supported module name\r\n * @returns The {@link ModuleType} or undefined\r\n * @public\r\n */\n\n\nfunction convertNameToModuleType(moduleName) {\n  return $enum(ModuleType).getValueOrDefault(moduleName == null ? void 0 : moduleName.toUpperCase(), undefined);\n}\n/**\r\n *\r\n * @param moduleType - A {@link ModuleType}\r\n * @returns The name of the given {@link ModuleType} or undefined\r\n * @public\r\n */\n\n\nfunction convertModuleTypeToName(moduleType) {\n  return $enum(ModuleType).getKeyOrDefault(moduleType, undefined);\n}\n\nvar tokenUriABI = [{\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"tokenURI\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  name: \"uri\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n/**\r\n/* @internal\r\n */\n\nfunction getMetadataWithoutContract(_x, _x2, _x3, _x4) {\n  return _getMetadataWithoutContract.apply(this, arguments);\n}\n/**\r\n/* @internal\r\n */\n\n\nfunction _getMetadataWithoutContract() {\n  _getMetadataWithoutContract = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(provider, contractAddress, tokenId, storage) {\n    var contract;\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contract = new Contract(contractAddress, tokenUriABI, provider);\n            return _context.abrupt(\"return\", getTokenMetadata(contract, tokenId, storage));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getMetadataWithoutContract.apply(this, arguments);\n}\n\nfunction getTokenMetadata(_x5, _x6, _x7) {\n  return _getTokenMetadata.apply(this, arguments);\n}\n\nfunction _getTokenMetadata() {\n  _getTokenMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(contract, tokenId, storage) {\n    var uri, meta, json, entity;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getTokenUri(contract, tokenId);\n\n          case 2:\n            uri = _context2.sent;\n\n            if (uri) {\n              _context2.next = 5;\n              break;\n            }\n\n            throw new NotFoundError();\n\n          case 5:\n            _context2.prev = 5;\n            _context2.next = 8;\n            return storage.get(uri);\n\n          case 8:\n            meta = _context2.sent;\n            json = recursiveResolveGatewayUrl(JSON.parse(meta), storage);\n            entity = _extends({}, json, {\n              id: tokenId,\n              uri: uri\n            });\n            return _context2.abrupt(\"return\", entity);\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](5);\n            console.error(\"failed to fetch nft\", _context2.t0);\n            return _context2.abrupt(\"return\", {\n              id: tokenId,\n              uri: uri\n            });\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[5, 14]]);\n  }));\n  return _getTokenMetadata.apply(this, arguments);\n}\n\nfunction getTokenMetadataUsingStorage(_x8, _x9, _x10, _x11) {\n  return _getTokenMetadataUsingStorage.apply(this, arguments);\n}\n/**\r\n/* @internal\r\n */\n\n\nfunction _getTokenMetadataUsingStorage() {\n  _getTokenMetadataUsingStorage = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(contractAddress, provider, tokenId, storage) {\n    var contract, uri, json, entity;\n    return runtime_1.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            contract = new Contract(contractAddress, tokenUriABI, provider);\n            _context3.next = 3;\n            return getTokenUri(contract, tokenId);\n\n          case 3:\n            uri = _context3.sent;\n\n            if (uri) {\n              _context3.next = 6;\n              break;\n            }\n\n            throw new NotFoundError();\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = JSON;\n            _context3.next = 10;\n            return storage.get(uri);\n\n          case 10:\n            _context3.t1 = _context3.sent;\n            json = _context3.t0.parse.call(_context3.t0, _context3.t1);\n            entity = _extends({}, json, {\n              id: tokenId\n            });\n            return _context3.abrupt(\"return\", entity);\n\n          case 16:\n            _context3.prev = 16;\n            _context3.t2 = _context3[\"catch\"](6);\n            console.error(\"failed to fetch nft\", _context3.t2);\n            return _context3.abrupt(\"return\", {\n              id: tokenId,\n              uri: uri\n            });\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[6, 16]]);\n  }));\n  return _getTokenMetadataUsingStorage.apply(this, arguments);\n}\n\nfunction getTokenUri(_x12, _x13) {\n  return _getTokenUri.apply(this, arguments);\n}\n\nfunction _getTokenUri() {\n  _getTokenUri = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(contract, tokenId) {\n    var uri;\n    return runtime_1.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            uri = \"\";\n            _context4.prev = 1;\n            _context4.next = 4;\n            return contract.tokenURI(tokenId);\n\n          case 4:\n            uri = _context4.sent;\n            _context4.next = 9;\n            break;\n\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](1);\n\n          case 9:\n            if (uri) {\n              _context4.next = 18;\n              break;\n            }\n\n            _context4.prev = 10;\n            _context4.next = 13;\n            return contract.uri(tokenId);\n\n          case 13:\n            uri = _context4.sent;\n            _context4.next = 18;\n            break;\n\n          case 16:\n            _context4.prev = 16;\n            _context4.t1 = _context4[\"catch\"](10);\n\n          case 18:\n            if (uri) {\n              _context4.next = 27;\n              break;\n            }\n\n            _context4.prev = 19;\n            _context4.next = 22;\n            return contract.uri(tokenId);\n\n          case 22:\n            uri = _context4.sent;\n            _context4.next = 27;\n            break;\n\n          case 25:\n            _context4.prev = 25;\n            _context4.t2 = _context4[\"catch\"](19);\n\n          case 27:\n            return _context4.abrupt(\"return\", uri);\n\n          case 28:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[1, 7], [10, 16], [19, 25]]);\n  }));\n  return _getTokenUri.apply(this, arguments);\n}\n/**\r\n *\r\n * @internal\r\n */\n\n\nvar RolesMap = {\n  admin: \"admin\",\n  minter: \"minter\",\n  pauser: \"pauser\",\n  transfer: \"transfer\",\n  editor: \"editor\",\n  lister: \"lister\",\n  asset: \"asset\"\n};\n/**\r\n *\r\n * @internal\r\n */\n\nvar _role = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  editor: \"EDITOR_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\"\n};\n/**\r\n * @internal\r\n */\n\nfunction getRoleHash(role) {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n\n  return ethers.utils.id(_role[role]);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction getGasStationUrl(chainId) {\n  if (!chainId) {\n    return null;\n  }\n\n  if (chainId === ChainId.Polygon) {\n    return \"https://gasstation-mainnet.matic.network\";\n  }\n\n  return null;\n}\n/**\r\n *\r\n * @returns the gas price\r\n * @internal\r\n */\n\n\nfunction getGasPriceForChain(_x, _x2, _x3) {\n  return _getGasPriceForChain.apply(this, arguments);\n}\n\nfunction _getGasPriceForChain() {\n  _getGasPriceForChain = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(chainId, speed, maxGasPrice) {\n    var gasStationUrl, data, gas;\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            gasStationUrl = getGasStationUrl(chainId);\n\n            if (gasStationUrl) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 3:\n            _context.prev = 3;\n            _context.next = 6;\n            return fetch(gasStationUrl);\n\n          case 6:\n            _context.next = 8;\n            return _context.sent.json();\n\n          case 8:\n            data = _context.sent;\n            gas = data[speed];\n\n            if (chainId === ChainId.Polygon || chainId === ChainId.Mumbai) {\n              // the minimum gas on chain is 30, +1 for priority. prevent gas station report false price and cause tx to fail.\n              gas = Math.max(gas, 31);\n            }\n\n            if (!(gas > 0)) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Math.min(gas, maxGasPrice));\n\n          case 13:\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](3);\n            console.error(\"failed to fetch gas\", _context.t0);\n\n          case 18:\n            return _context.abrupt(\"return\", null);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 15]]);\n  }));\n  return _getGasPriceForChain.apply(this, arguments);\n}\n/**\r\n * @internal\r\n * @param condition - any truthy condition to assert\r\n * @param message  - optional message to use if the condition is falsy\r\n */\n\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n/**\r\n * eip712 sign typed data with different wallet handling including ledger live\r\n * @internal\r\n */\n\n\nfunction signTypedData(_x, _x2, _x3, _x4) {\n  return _signTypedData.apply(this, arguments);\n}\n\nfunction _signTypedData() {\n  _signTypedData = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(signer, domain, types, message) {\n    var _provider$provider;\n\n    var provider, payload, signature, _err$message;\n\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = signer == null ? void 0 : signer.provider;\n\n            if (provider) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error(\"missing provider\");\n\n          case 3:\n            payload = ethers.utils._TypedDataEncoder.getPayload(domain, types, message);\n            signature = \"\"; // an indirect way for accessing walletconnect's underlying provider\n\n            if (!(provider != null && (_provider$provider = provider.provider) != null && _provider$provider.isWalletConnect)) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.t0 = provider;\n            _context.next = 9;\n            return signer.getAddress();\n\n          case 9:\n            _context.t1 = _context.sent.toLowerCase();\n            _context.t2 = JSON.stringify(payload);\n            _context.t3 = [_context.t1, _context.t2];\n            _context.next = 14;\n            return _context.t0.send.call(_context.t0, \"eth_signTypedData\", _context.t3);\n\n          case 14:\n            signature = _context.sent;\n            _context.next = 38;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.next = 20;\n            return signer._signTypedData(domain, types, message);\n\n          case 20:\n            signature = _context.sent;\n            _context.next = 38;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t4 = _context[\"catch\"](17);\n\n            if (!(_context.t4 != null && (_err$message = _context.t4.message) != null && _err$message.includes(\"Method eth_signTypedData_v4 not supported\"))) {\n              _context.next = 37;\n              break;\n            }\n\n            _context.t5 = provider;\n            _context.next = 29;\n            return signer.getAddress();\n\n          case 29:\n            _context.t6 = _context.sent.toLowerCase();\n            _context.t7 = JSON.stringify(payload);\n            _context.t8 = [_context.t6, _context.t7];\n            _context.next = 34;\n            return _context.t5.send.call(_context.t5, \"eth_signTypedData\", _context.t8);\n\n          case 34:\n            signature = _context.sent;\n            _context.next = 38;\n            break;\n\n          case 37:\n            throw _context.t4;\n\n          case 38:\n            return _context.abrupt(\"return\", {\n              payload: payload,\n              signature: ethers.utils.joinSignature(ethers.utils.splitSignature(signature))\n            });\n\n          case 39:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[17, 23]]);\n  }));\n  return _signTypedData.apply(this, arguments);\n}\n\nvar EventType;\n\n(function (EventType) {\n  /**\r\n   * The event is triggered when the transaction is submitted and completed.\r\n   * The transaction is submitted when it is sent to the relayer or the blockchain.\r\n   * The transaction is completed when it is confirmed by the blockchain.\r\n   *\r\n   * status: \"submitted\" | \"completed\"\r\n   * transactionHash: string of the transaction hash\r\n   */\n  EventType[\"Transaction\"] = \"transaction\";\n  /**\r\n   * The event is triggered when wallet sign message is requested and completed.\r\n   *\r\n   * status: \"submitted\" | \"completed\"\r\n   * message: message to sign\r\n   * signature: signature of the message (only available when status is \"completed\")\r\n   */\n\n  EventType[\"Signature\"] = \"signature\";\n})(EventType || (EventType = {}));\n/**\r\n * The root Module class. All other Modules extend this.\r\n * @remarks This should never be instantiated directly.\r\n * @public\r\n */\n\n\nvar Module = /*#__PURE__*/function () {\n  /**\r\n   * @internal\r\n   */\n  function Module(providerOrSigner, address, options, sdk) {\n    this.address = void 0;\n    this.ipfsGatewayUrl = void 0;\n    this.options = void 0;\n    this.sdk = void 0;\n    this._providerOrSigner = null;\n    this._signer = null;\n    this.contract = void 0;\n    this.readOnlyContract = void 0;\n    this.address = address;\n    this.options = options;\n    this.ipfsGatewayUrl = options.ipfsGatewayUrl;\n    this.setProviderOrSigner(providerOrSigner);\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl ? this.contract.connect(ethers.getDefaultProvider(this.options.readOnlyRpcUrl)) : this.contract;\n    this.sdk = sdk;\n  }\n  /**\r\n   * @public\r\n   * @returns whether the given contract exists on-chain\r\n   */\n\n\n  var _proto = Module.prototype;\n\n  _proto.exists = /*#__PURE__*/function () {\n    var _exists = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n      var provider;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getProvider();\n\n            case 2:\n              provider = _context.sent;\n              !provider ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"exists() -- No Provider\") : invariant(false) : void 0;\n              return _context.abrupt(\"return\", isContract(provider, this.address));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function exists() {\n      return _exists.apply(this, arguments);\n    }\n\n    return exists;\n  }()\n  /**\r\n   * @public\r\n   * Get the metadata of the contract.\r\n   *\r\n   * @param resolveUrls - Whether to resolve the urls in the metadata to a gateway.\r\n   */\n  ;\n\n  _proto.getMetadata = /*#__PURE__*/function () {\n    var _getMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(resolveUrls) {\n      var contract, type;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (resolveUrls === void 0) {\n                resolveUrls = true;\n              }\n\n              _context2.next = 3;\n              return this.exists();\n\n            case 3:\n              if (_context2.sent) {\n                _context2.next = 7;\n                break;\n              }\n\n              process.env.NODE_ENV !== \"production\" ? invariant(false, \"contract does not exist\") : invariant(false);\n              _context2.next = 8;\n              break;\n\n            case 7:\n            case 8:\n              contract = this.connectContract();\n              type = this.getModuleType();\n              _context2.t0 = getContractMetadata;\n              _context2.next = 13;\n              return this.getProvider();\n\n            case 13:\n              _context2.t1 = _context2.sent;\n              _context2.t2 = contract.address;\n              _context2.t3 = this.sdk.getStorage();\n              _context2.t4 = resolveUrls;\n              _context2.next = 19;\n              return (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3, _context2.t4);\n\n            case 19:\n              _context2.t5 = _context2.sent;\n              _context2.t6 = contract.address;\n              _context2.t7 = type;\n              return _context2.abrupt(\"return\", {\n                metadata: _context2.t5,\n                address: _context2.t6,\n                type: _context2.t7\n              });\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getMetadata(_x) {\n      return _getMetadata.apply(this, arguments);\n    }\n\n    return getMetadata;\n  }()\n  /**\r\n   * @public\r\n   * Set new metadata on the contract and return it if successful.\r\n   * @param metadata - The metadata to set.\r\n   */\n  ;\n\n  _proto.setMetadata = /*#__PURE__*/function () {\n    var _setMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.exists();\n\n            case 2:\n              if (_context3.sent) {\n                _context3.next = 6;\n                break;\n              }\n\n              process.env.NODE_ENV !== \"production\" ? invariant(false, \"contract does not exist\") : invariant(false);\n              _context3.next = 7;\n              break;\n\n            case 6:\n            case 7:\n              _context3.next = 9;\n              return uploadMetadata(metadata);\n\n            case 9:\n              uri = _context3.sent;\n              _context3.next = 12;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 12:\n              return _context3.abrupt(\"return\", this.getMetadata());\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function setMetadata(_x2) {\n      return _setMetadata.apply(this, arguments);\n    }\n\n    return setMetadata;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.setProviderOrSigner = function setProviderOrSigner(providerOrSigner) {\n    this.providerOrSigner = providerOrSigner;\n\n    if (Signer.isSigner(providerOrSigner)) {\n      this.signer = providerOrSigner;\n    }\n\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl ? this.contract.connect(ethers.getDefaultProvider(this.options.readOnlyRpcUrl)) : this.contract;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.clearSigner = function clearSigner() {\n    this.signer = null;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getProviderOrSigner = function getProviderOrSigner() {\n    return this.signer || this.providerOrSigner;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getSigner = function getSigner() {\n    if (Signer.isSigner(this.signer)) {\n      return this.signer;\n    }\n\n    return null;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.hasValidSigner = function hasValidSigner() {\n    return Signer.isSigner(this.signer);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getSignerAddress = /*#__PURE__*/function () {\n    var _getSignerAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {\n      var signer;\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              signer = this.getSigner();\n              !signer ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Cannot get signer address without valid signer\") : invariant(false) : void 0;\n              _context4.next = 4;\n              return signer.getAddress();\n\n            case 4:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getSignerAddress() {\n      return _getSignerAddress.apply(this, arguments);\n    }\n\n    return getSignerAddress;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getProvider = /*#__PURE__*/function () {\n    var _getProvider = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this.readOnlyContract.provider);\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getProvider() {\n      return _getProvider.apply(this, arguments);\n    }\n\n    return getProvider;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getChainID = /*#__PURE__*/function () {\n    var _getChainID = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {\n      var provider, _yield$provider$getNe, chainId;\n\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.getProvider();\n\n            case 2:\n              provider = _context6.sent;\n              !provider ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"getChainID() -- No Provider\") : invariant(false) : void 0;\n              _context6.next = 6;\n              return provider.getNetwork();\n\n            case 6:\n              _yield$provider$getNe = _context6.sent;\n              chainId = _yield$provider$getNe.chainId;\n              return _context6.abrupt(\"return\", chainId);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function getChainID() {\n      return _getChainID.apply(this, arguments);\n    }\n\n    return getChainID;\n  }()\n  /**\r\n   * @virtual\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    throw new Error(\"connectContract has to be implemented\");\n  }\n  /**\r\n   * @virtual\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    throw new Error(\"getModuleType has to be implemented\");\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getCallOverrides = /*#__PURE__*/function () {\n    var _getCallOverrides = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {\n      var chainId, speed, maxGasPrice, gasPriceChain;\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.getChainID();\n\n            case 2:\n              chainId = _context7.sent;\n              speed = this.options.gasSpeed;\n              maxGasPrice = this.options.maxGasPriceInGwei;\n              _context7.next = 7;\n              return getGasPriceForChain(chainId, speed, maxGasPrice);\n\n            case 7:\n              gasPriceChain = _context7.sent;\n\n              if (gasPriceChain) {\n                _context7.next = 10;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", {});\n\n            case 10:\n              return _context7.abrupt(\"return\", {\n                gasPrice: ethers.utils.parseUnits(gasPriceChain.toString(), \"gwei\")\n              });\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getCallOverrides() {\n      return _getCallOverrides.apply(this, arguments);\n    }\n\n    return getCallOverrides;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.emitTransactionEvent = function emitTransactionEvent(status, transactionHash) {\n    this.sdk.event.emit(EventType.Transaction, {\n      status: status,\n      transactionHash: transactionHash\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.sendTransaction = /*#__PURE__*/function () {\n    var _sendTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(fn, args, callOverrides) {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", this.sendContractTransaction(this.contract, fn, args, callOverrides));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function sendTransaction(_x3, _x4, _x5) {\n      return _sendTransaction.apply(this, arguments);\n    }\n\n    return sendTransaction;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.sendContractTransaction = /*#__PURE__*/function () {\n    var _sendContractTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(contract, fn, args, callOverrides) {\n      var provider, txHash, receipt, tx, _receipt;\n\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (callOverrides) {\n                _context9.next = 4;\n                break;\n              }\n\n              _context9.next = 3;\n              return this.getCallOverrides();\n\n            case 3:\n              callOverrides = _context9.sent;\n\n            case 4:\n              if (!(this.options.transactionRelayerUrl || this.options.gasless.biconomy.apiKey)) {\n                _context9.next = 19;\n                break;\n              }\n\n              _context9.next = 7;\n              return this.getProvider();\n\n            case 7:\n              provider = _context9.sent;\n              _context9.next = 10;\n              return this.sendGaslessTransaction(contract, fn, args, callOverrides);\n\n            case 10:\n              txHash = _context9.sent;\n              this.emitTransactionEvent(\"submitted\", txHash);\n              _context9.next = 14;\n              return provider.waitForTransaction(txHash);\n\n            case 14:\n              receipt = _context9.sent;\n              this.emitTransactionEvent(\"completed\", txHash);\n              return _context9.abrupt(\"return\", receipt);\n\n            case 19:\n              _context9.next = 21;\n              return this.sendTransactionByFunction(contract, fn, args, callOverrides);\n\n            case 21:\n              tx = _context9.sent;\n              this.emitTransactionEvent(\"submitted\", tx.hash);\n              _receipt = tx.wait();\n              this.emitTransactionEvent(\"completed\", tx.hash);\n              return _context9.abrupt(\"return\", _receipt);\n\n            case 26:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function sendContractTransaction(_x6, _x7, _x8, _x9) {\n      return _sendContractTransaction.apply(this, arguments);\n    }\n\n    return sendContractTransaction;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.sendTransactionByFunction = /*#__PURE__*/function () {\n    var _sendTransactionByFunction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(contract, fn, args, callOverrides) {\n      var func;\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              func = contract.functions[fn];\n\n              if (func) {\n                _context10.next = 3;\n                break;\n              }\n\n              throw new Error(\"invalid function\");\n\n            case 3:\n              _context10.next = 5;\n              return func.apply(void 0, args.concat([callOverrides]));\n\n            case 5:\n              return _context10.abrupt(\"return\", _context10.sent);\n\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function sendTransactionByFunction(_x10, _x11, _x12, _x13) {\n      return _sendTransactionByFunction.apply(this, arguments);\n    }\n\n    return sendTransactionByFunction;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.sendGaslessTransaction = /*#__PURE__*/function () {\n    var _sendGaslessTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(contract, fn, args, callOverrides) {\n      var _contract$estimateGas;\n\n      var signer, provider, chainId, from, to, value, data, gasEstimate, gas, tx, txHash;\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              signer = this.getSigner();\n              !signer ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Cannot execute gasless transaction without valid signer\") : invariant(false) : void 0;\n              _context11.next = 4;\n              return this.getProvider();\n\n            case 4:\n              provider = _context11.sent;\n              !provider ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"no provider to execute transaction\") : invariant(false) : void 0;\n              _context11.next = 8;\n              return this.getChainID();\n\n            case 8:\n              chainId = _context11.sent;\n              _context11.next = 11;\n              return this.getSignerAddress();\n\n            case 11:\n              from = _context11.sent;\n              to = this.address;\n              value = (callOverrides == null ? void 0 : callOverrides.value) || 0;\n\n              if (!BigNumber.from(value).gt(0)) {\n                _context11.next = 16;\n                break;\n              }\n\n              throw new Error(\"Cannot send native token value with gasless transaction\");\n\n            case 16:\n              data = contract[\"interface\"].encodeFunctionData(fn, args);\n              _context11.next = 19;\n              return (_contract$estimateGas = contract.estimateGas)[fn].apply(_contract$estimateGas, args);\n\n            case 19:\n              gasEstimate = _context11.sent;\n              gas = gasEstimate.mul(2); // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n              // it'd estimate ~21740 on polygon.\n              // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n\n              if (gasEstimate.lt(25000)) {\n                gas = BigNumber.from(500000);\n              }\n\n              tx = {\n                from: from,\n                to: to,\n                data: data,\n                chainId: chainId,\n                gasLimit: gas,\n                functionName: fn,\n                functionArgs: args,\n                callOverrides: callOverrides\n              };\n              _context11.next = 25;\n              return this.options.gaslessSendFunction(contract, tx);\n\n            case 25:\n              txHash = _context11.sent;\n              return _context11.abrupt(\"return\", txHash);\n\n            case 27:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function sendGaslessTransaction(_x14, _x15, _x16, _x17) {\n      return _sendGaslessTransaction.apply(this, arguments);\n    }\n\n    return sendGaslessTransaction;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.signTypedDataEmitEvent = /*#__PURE__*/function () {\n    var _signTypedDataEmitEvent = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(signer, domain, types, message) {\n      var signature, _yield$signTypedData, sig;\n\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              signature = \"\";\n              this.sdk.event.emit(EventType.Signature, {\n                status: \"submitted\",\n                message: message,\n                signature: signature\n              });\n              _context12.next = 4;\n              return signTypedData(signer, domain, types, message);\n\n            case 4:\n              _yield$signTypedData = _context12.sent;\n              sig = _yield$signTypedData.signature;\n              signature = sig;\n              this.sdk.event.emit(EventType.Signature, {\n                status: \"completed\",\n                message: message,\n                signature: signature\n              });\n              return _context12.abrupt(\"return\", signature);\n\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function signTypedDataEmitEvent(_x18, _x19, _x20, _x21) {\n      return _signTypedDataEmitEvent.apply(this, arguments);\n    }\n\n    return signTypedDataEmitEvent;\n  }();\n\n  _proto.parseEventLogs = function parseEventLogs(eventName, logs) {\n    if (!logs) {\n      return null;\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(logs), _step; !(_step = _iterator()).done;) {\n      var log = _step.value;\n\n      try {\n        var event = this.contract[\"interface\"].decodeEventLog(eventName, log.data, log.topics);\n        return event; // eslint-disable-next-line no-empty\n      } catch (e) {}\n    }\n\n    return null;\n  };\n\n  _proto.parseLogs = function parseLogs(eventName, logs, contract) {\n    if (contract === void 0) {\n      contract = this.contract;\n    }\n\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n\n    var topic = contract[\"interface\"].getEventTopic(eventName);\n    var parsedLogs = logs.filter(function (x) {\n      return x.topics.indexOf(topic) >= 0;\n    });\n    return parsedLogs.map(function (l) {\n      return contract[\"interface\"].parseLog(l);\n    });\n  };\n\n  _createClass(Module, [{\n    key: \"providerOrSigner\",\n    get:\n    /**\r\n     * @readonly\r\n     */\n\n    /**\r\n     * @internal\r\n     * @readonly\r\n     */\n\n    /**\r\n     * @internal\r\n     * @readonly\r\n     */\n\n    /**\r\n     * @internal\r\n     */\n\n    /**\r\n     * @internal\r\n     */\n    function get() {\n      return this.signer || this._providerOrSigner || this.getProviderOrSigner();\n    },\n    set: function set(value) {\n      this._providerOrSigner = value;\n    }\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"signer\",\n    get:\n    /**\r\n     * @internal\r\n     */\n    function get() {\n      return this._signer;\n    },\n    set: function set(value) {\n      this._signer = value;\n    }\n    /**\r\n     * Contract connects to the SDK signer or provider\r\n     * @internal\r\n     */\n\n  }]);\n\n  return Module;\n}();\n/**\r\n * Extends the {@link Module} class to add {@link Role} functionality.\r\n *\r\n * @public\r\n */\n\n\nvar ModuleWithRoles = /*#__PURE__*/function (_Module) {\n  _inheritsLoose(ModuleWithRoles, _Module);\n\n  var _proto2 = ModuleWithRoles.prototype;\n  /**\r\n   * @virtual\r\n   * @internal\r\n   */\n\n  _proto2.getModuleRoles = function getModuleRoles() {\n    throw new Error(\"getModuleRoles has to be implemented by a subclass\");\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n  /** @internal */\n\n\n  function ModuleWithRoles(providerOrSigner, address, options, sdk) {\n    return _Module.call(this, providerOrSigner, address, options, sdk) || this;\n  }\n  /**\r\n   * Call this to get a list of addresses that are members of a specific role.\r\n   *\r\n   * @param role - The {@link IRoles | role} to to get a memberlist for.\r\n   * @returns The list of addresses that are members of the specific role.\r\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\r\n   * @see {@link ModuleWithRoles.getAllRoleMembers | getAllRoleMembers} to get get a list of addresses for all supported roles on the module.\r\n   * @example Say you want to get the list of addresses that are members of the {@link IRoles.minter | minter} role.\r\n   * ```typescript\r\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\r\n   * ```\r\n   *\r\n   * @public\r\n   */\n\n\n  _proto2.getRoleMembers = /*#__PURE__*/function () {\n    var _getRoleMembers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(role) {\n      var contract, roleHash, count;\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              !this.roles.includes(role) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"this module does not support the \\\"\" + role + \"\\\" role\") : invariant(false) : void 0;\n              contract = this.contract;\n              roleHash = getRoleHash(role);\n              _context13.next = 5;\n              return contract.getRoleMemberCount(roleHash);\n\n            case 5:\n              count = _context13.sent.toNumber();\n              _context13.next = 8;\n              return Promise.all(Array.from(Array(count).keys()).map(function (i) {\n                return contract.getRoleMember(roleHash, i);\n              }));\n\n            case 8:\n              return _context13.abrupt(\"return\", _context13.sent);\n\n            case 9:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getRoleMembers(_x22) {\n      return _getRoleMembers.apply(this, arguments);\n    }\n\n    return getRoleMembers;\n  }()\n  /**\r\n   * Call this to get get a list of addresses for all supported roles on the module.\r\n   *\r\n   * @see {@link ModuleWithRoles.getRoleMembers | getRoleMembers} to get a list of addresses that are members of a specific role.\r\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\r\n   * @throws If the module does not support roles this will throw an {@link InvariantError}.\r\n   *\r\n   * @public\r\n   */\n  ;\n\n  _proto2.getAllRoleMembers = /*#__PURE__*/function () {\n    var _getAllRoleMembers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {\n      var roles, _iterator2, _step2, role;\n\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              !this.roles.length ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"this module has no support for roles\") : invariant(false) : void 0;\n              roles = {};\n              _iterator2 = _createForOfIteratorHelperLoose(this.roles);\n\n            case 3:\n              if ((_step2 = _iterator2()).done) {\n                _context14.next = 10;\n                break;\n              }\n\n              role = _step2.value;\n              _context14.next = 7;\n              return this.getRoleMembers(role);\n\n            case 7:\n              roles[role] = _context14.sent;\n\n            case 8:\n              _context14.next = 3;\n              break;\n\n            case 10:\n              return _context14.abrupt(\"return\", roles);\n\n            case 11:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function getAllRoleMembers() {\n      return _getAllRoleMembers.apply(this, arguments);\n    }\n\n    return getAllRoleMembers;\n  }()\n  /**\r\n   * Call this to OVERWRITE the list of addresses that are members of specific roles.\r\n   *\r\n   * Every role in the list will be overwritten with the new list of addresses provided with them.\r\n   * If you want to add or remove addresses for a single address use {@link ModuleWithRoles.grantRole | grantRole} and {@link ModuleWithRoles.grantRole | revokeRole} respectively instead.\r\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\r\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\r\n   * @example Say you want to overwrite the list of addresses that are members of the {@link IRoles.minter | minter} role.\r\n   * ```typescript\r\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\r\n   * await module.setAllRoleMembers({\r\n   *  minter: []\r\n   * });\r\n   * console.log(await module.getRoleMemberList(\"minter\")); // No matter what members had the role before, the new list will be set to []\r\n   * ```\r\n   * @public\r\n   *\r\n   * */\n  ;\n\n  _proto2.setAllRoleMembers = /*#__PURE__*/function () {\n    var _setAllRoleMembers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(rolesWithAddresses) {\n      var _this = this;\n\n      var roles, currentRoles, encoded;\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              roles = Object.keys(rolesWithAddresses);\n              !roles.length ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"you must provide at least one role to set\") : invariant(false) : void 0;\n              !roles.every(function (role) {\n                return _this.roles.includes(role);\n              }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"this module does not support the given role\") : invariant(false) : void 0;\n              _context17.next = 5;\n              return this.getAllRoleMembers();\n\n            case 5:\n              currentRoles = _context17.sent;\n              encoded = []; // add / rmove admin role at the end so we don't revoke admin then grant\n\n              roles.sort(function (role) {\n                return role === \"admin\" ? 1 : -1;\n              }).forEach( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(role) {\n                  var addresses, currentAddresses, toAdd, toRemove;\n                  return runtime_1.wrap(function _callee16$(_context16) {\n                    while (1) {\n                      switch (_context16.prev = _context16.next) {\n                        case 0:\n                          addresses = rolesWithAddresses[role] || [];\n                          currentAddresses = currentRoles[role] || [];\n                          toAdd = addresses.filter(function (address) {\n                            return !currentAddresses.includes(address);\n                          });\n                          toRemove = currentAddresses.filter(function (address) {\n                            return !addresses.includes(address);\n                          });\n\n                          if (toAdd.length) {\n                            toAdd.forEach(function (address) {\n                              encoded.push(_this.contract[\"interface\"].encodeFunctionData(\"grantRole\", [getRoleHash(role), address]));\n                            });\n                          }\n\n                          if (toRemove.length) {\n                            toRemove.forEach( /*#__PURE__*/function () {\n                              var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(address) {\n                                var revokeFunctionName;\n                                return runtime_1.wrap(function _callee15$(_context15) {\n                                  while (1) {\n                                    switch (_context15.prev = _context15.next) {\n                                      case 0:\n                                        _context15.next = 2;\n                                        return _this.getRevokeRoleFunctionName(address);\n\n                                      case 2:\n                                        revokeFunctionName = _context15.sent;\n                                        encoded.push(_this.contract[\"interface\"].encodeFunctionData(revokeFunctionName, [getRoleHash(role), address]));\n\n                                      case 4:\n                                      case \"end\":\n                                        return _context15.stop();\n                                    }\n                                  }\n                                }, _callee15);\n                              }));\n\n                              return function (_x25) {\n                                return _ref2.apply(this, arguments);\n                              };\n                            }());\n                          }\n\n                        case 6:\n                        case \"end\":\n                          return _context16.stop();\n                      }\n                    }\n                  }, _callee16);\n                }));\n\n                return function (_x24) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n              _context17.next = 10;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 10:\n              return _context17.abrupt(\"return\", _context17.sent);\n\n            case 11:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function setAllRoleMembers(_x23) {\n      return _setAllRoleMembers.apply(this, arguments);\n    }\n\n    return setAllRoleMembers;\n  }()\n  /**\r\n   *\r\n   * Call this to revoke all roles given to a specific address.\r\n   * @param address - The address to revoke all roles for.\r\n   * @returns A list of roles that were revoked.\r\n   *\r\n   * @public\r\n   *\r\n   */\n  ;\n\n  _proto2.revokeAllRolesFromAddress = /*#__PURE__*/function () {\n    var _revokeAllRolesFromAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(address) {\n      var _this2 = this;\n\n      var currentRoles, encoded, rolesRemoved;\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.getAllRoleMembers();\n\n            case 2:\n              currentRoles = _context19.sent;\n              encoded = [];\n              rolesRemoved = []; // revoke / renounce admin role at the end\n\n              Object.keys(currentRoles).sort(function (role) {\n                return role === \"admin\" ? 1 : -1;\n              }).forEach( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(role) {\n                  var _currentRoles$role;\n\n                  var revokeFunctionName;\n                  return runtime_1.wrap(function _callee18$(_context18) {\n                    while (1) {\n                      switch (_context18.prev = _context18.next) {\n                        case 0:\n                          if (!((_currentRoles$role = currentRoles[role]) != null && _currentRoles$role.includes(address))) {\n                            _context18.next = 6;\n                            break;\n                          }\n\n                          _context18.next = 3;\n                          return _this2.getRevokeRoleFunctionName(address);\n\n                        case 3:\n                          revokeFunctionName = _context18.sent;\n                          encoded.push(_this2.contract[\"interface\"].encodeFunctionData(revokeFunctionName, [getRoleHash(role), address]));\n                          rolesRemoved.push(role);\n\n                        case 6:\n                        case \"end\":\n                          return _context18.stop();\n                      }\n                    }\n                  }, _callee18);\n                }));\n\n                return function (_x27) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n              _context19.next = 8;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 8:\n              return _context19.abrupt(\"return\", rolesRemoved);\n\n            case 9:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function revokeAllRolesFromAddress(_x26) {\n      return _revokeAllRolesFromAddress.apply(this, arguments);\n    }\n\n    return revokeAllRolesFromAddress;\n  }()\n  /**\r\n   * Call this to grant a role to a specific address.\r\n   *\r\n   * @remarks\r\n   *\r\n   * Make sure you are sure you want to grant the role to the address.\r\n   *\r\n   * @param role - The {@link IRoles | role} to grant to the address\r\n   * @param address - The address to grant the role to\r\n   * @returns The transaction receipt\r\n   * @throws If you are trying to grant does not exist on the module this will throw an {@link InvariantError}.\r\n   *\r\n   * @public\r\n   */\n  ;\n\n  _proto2.grantRole = /*#__PURE__*/function () {\n    var _grantRole = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(role, address) {\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              !this.roles.includes(role) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"this module does not support the \\\"\" + role + \"\\\" role\") : invariant(false) : void 0;\n              _context20.next = 3;\n              return this.sendTransaction(\"grantRole\", [getRoleHash(role), address]);\n\n            case 3:\n              return _context20.abrupt(\"return\", _context20.sent);\n\n            case 4:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function grantRole(_x28, _x29) {\n      return _grantRole.apply(this, arguments);\n    }\n\n    return grantRole;\n  }()\n  /**\r\n   * Call this to revoke a role from a specific address.\r\n   *\r\n   * @remarks\r\n   *\r\n   * -- Caution --\r\n   *\r\n   * This will let you remove yourself from the role, too.\r\n   * If you remove yourself from the {@link IRoles.admin | admin} role, you will no longer be able to administer the module.\r\n   * There is no way to recover from this.\r\n   *\r\n   * @param role - The {@link IRoles | role} to revoke\r\n   * @param address - The address to revoke the role from\r\n   * @returns The transaction receipt\r\n   * @throws If you are trying to revoke does not exist on the module this will throw an {@link InvariantError}.\r\n   *\r\n   * @public\r\n   */\n  ;\n\n  _proto2.revokeRole = /*#__PURE__*/function () {\n    var _revokeRole = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(role, address) {\n      var revokeFunctionName;\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              !this.roles.includes(role) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"this module does not support the \\\"\" + role + \"\\\" role\") : invariant(false) : void 0;\n              _context21.next = 3;\n              return this.getRevokeRoleFunctionName(address);\n\n            case 3:\n              revokeFunctionName = _context21.sent;\n              _context21.next = 6;\n              return this.sendTransaction(revokeFunctionName, [getRoleHash(role), address]);\n\n            case 6:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 7:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function revokeRole(_x30, _x31) {\n      return _revokeRole.apply(this, arguments);\n    }\n\n    return revokeRole;\n  }();\n\n  _proto2.getRevokeRoleFunctionName = /*#__PURE__*/function () {\n    var _getRevokeRoleFunctionName = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(address) {\n      var signerAddress;\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.getSignerAddress();\n\n            case 2:\n              signerAddress = _context22.sent;\n\n              if (!(signerAddress.toLowerCase() === address.toLowerCase())) {\n                _context22.next = 5;\n                break;\n              }\n\n              return _context22.abrupt(\"return\", \"renounceRole\");\n\n            case 5:\n              return _context22.abrupt(\"return\", \"revokeRole\");\n\n            case 6:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function getRevokeRoleFunctionName(_x32) {\n      return _getRevokeRoleFunctionName.apply(this, arguments);\n    }\n\n    return getRevokeRoleFunctionName;\n  }()\n  /**\r\n   * Prepares any set of metadata for uploading by recursively converting all Buffer|Blob|File objects\r\n   * into a hash of the object after its been uploaded to distributed storage (e.g. IPFS). After uploading\r\n   * any File|Buffer|Blob, the metadata is serialized to a string.\r\n   *\r\n   * @param metadata - The list of metadata to prepare for upload.\r\n   * @returns - The serialized metadata object.\r\n   */\n  ;\n\n  _proto2.prepareMetadata = /*#__PURE__*/function () {\n    var _prepareMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(metadata) {\n      var _this3 = this;\n\n      var _fileHandler;\n\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              if (!(typeof metadata === \"string\")) {\n                _context24.next = 2;\n                break;\n              }\n\n              return _context24.abrupt(\"return\", metadata);\n\n            case 2:\n              _fileHandler = /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(object) {\n                  var keys, key, val, shouldUpload;\n                  return runtime_1.wrap(function _callee23$(_context23) {\n                    while (1) {\n                      switch (_context23.prev = _context23.next) {\n                        case 0:\n                          keys = Object.keys(object);\n                          _context23.t0 = runtime_1.keys(keys);\n\n                        case 2:\n                          if ((_context23.t1 = _context23.t0()).done) {\n                            _context23.next = 18;\n                            break;\n                          }\n\n                          key = _context23.t1.value;\n                          val = object[keys[key]];\n                          shouldUpload = val instanceof File || val instanceof Buffer;\n\n                          if (!shouldUpload) {\n                            _context23.next = 10;\n                            break;\n                          }\n\n                          _context23.next = 9;\n                          return _this3.sdk.getStorage().upload(object[keys[key]]);\n\n                        case 9:\n                          object[keys[key]] = _context23.sent;\n\n                        case 10:\n                          if (!(shouldUpload && typeof object[keys[key]] !== \"string\")) {\n                            _context23.next = 12;\n                            break;\n                          }\n\n                          throw new Error(\"Upload to IPFS failed\");\n\n                        case 12:\n                          if (!(typeof val === \"object\")) {\n                            _context23.next = 16;\n                            break;\n                          }\n\n                          _context23.next = 15;\n                          return _fileHandler(object[keys[key]]);\n\n                        case 15:\n                          object[keys[key]] = _context23.sent;\n\n                        case 16:\n                          _context23.next = 2;\n                          break;\n\n                        case 18:\n                          return _context23.abrupt(\"return\", object);\n\n                        case 19:\n                        case \"end\":\n                          return _context23.stop();\n                      }\n                    }\n                  }, _callee23);\n                }));\n\n                return function _fileHandler(_x34) {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              _context24.next = 5;\n              return _fileHandler(metadata);\n\n            case 5:\n              metadata = _context24.sent;\n              return _context24.abrupt(\"return\", JSON.stringify(metadata));\n\n            case 7:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24);\n    }));\n\n    function prepareMetadata(_x33) {\n      return _prepareMetadata.apply(this, arguments);\n    }\n\n    return prepareMetadata;\n  }()\n  /**\r\n   * Prepares a list of metadata for uploading.\r\n   *\r\n   * @param metadata - List of metadata to prepare for upload.\r\n   * @returns - List of metadata prepared for upload.\r\n   */\n  ;\n\n  _proto2.prepareBatchMetadata = /*#__PURE__*/function () {\n    var _prepareBatchMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(metadata) {\n      var _this4 = this;\n\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return Promise.all(metadata.map( /*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(m) {\n                  return runtime_1.wrap(function _callee25$(_context25) {\n                    while (1) {\n                      switch (_context25.prev = _context25.next) {\n                        case 0:\n                          _context25.next = 2;\n                          return _this4.prepareMetadata(m);\n\n                        case 2:\n                          return _context25.abrupt(\"return\", _context25.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context25.stop();\n                      }\n                    }\n                  }, _callee25);\n                }));\n\n                return function (_x36) {\n                  return _ref5.apply(this, arguments);\n                };\n              }()));\n\n            case 2:\n              return _context26.abrupt(\"return\", _context26.sent);\n\n            case 3:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26);\n    }));\n\n    function prepareBatchMetadata(_x35) {\n      return _prepareBatchMetadata.apply(this, arguments);\n    }\n\n    return prepareBatchMetadata;\n  }()\n  /**\r\n   * Throws an error if an address is missing the roles specified.\r\n   *\r\n   * @param roles - The roles to check\r\n   * @param address - The address to check\r\n   */\n  ;\n\n  _proto2.onlyRoles = /*#__PURE__*/function () {\n    var _onlyRoles = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(roles, address) {\n      var _this5 = this;\n\n      return runtime_1.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return Promise.all(roles.map( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(role) {\n                  var members;\n                  return runtime_1.wrap(function _callee27$(_context27) {\n                    while (1) {\n                      switch (_context27.prev = _context27.next) {\n                        case 0:\n                          _context27.next = 2;\n                          return _this5.getRoleMembers(role);\n\n                        case 2:\n                          members = _context27.sent;\n\n                          if (members.map(function (a) {\n                            return a.toLowerCase();\n                          }).includes(address.toLowerCase())) {\n                            _context27.next = 5;\n                            break;\n                          }\n\n                          throw new MissingRoleError(address, role);\n\n                        case 5:\n                        case \"end\":\n                          return _context27.stop();\n                      }\n                    }\n                  }, _callee27);\n                }));\n\n                return function (_x39) {\n                  return _ref6.apply(this, arguments);\n                };\n              }()));\n\n            case 2:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28);\n    }));\n\n    function onlyRoles(_x37, _x38) {\n      return _onlyRoles.apply(this, arguments);\n    }\n\n    return onlyRoles;\n  }();\n\n  _createClass(ModuleWithRoles, [{\n    key: \"roles\",\n    get: function get() {\n      return this.getModuleRoles();\n    }\n  }]);\n\n  return ModuleWithRoles;\n}(Module);\n\nvar MintRequest = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"tokenId\",\n  type: \"uint256\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\n/**\r\n * Create a collection of NFTs that lets you optionally mint multiple copies of each NFT.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getBundleModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar SignatureMint1155Module = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(SignatureMint1155Module, _ModuleWithRoles);\n\n  function SignatureMint1155Module() {\n    return _ModuleWithRoles.apply(this, arguments) || this;\n  }\n\n  var _proto = SignatureMint1155Module.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return SignatureMint1155Module.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return SignatureMint1155__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return SignatureMint1155Module.moduleType;\n  }\n  /**\r\n   *\r\n   * Get a single bundle item by tokenId.\r\n   * @param tokenId - the unique token id of the nft\r\n   * @returns A promise that resolves to a `BundleMetadata`.\r\n   */\n  ;\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId, address) {\n      var _yield$Promise$all, metadata, supply, ownedByAddress;\n\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = Promise;\n              _context.t1 = getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage());\n              _context.t2 = this.readOnlyContract.totalSupply(tokenId)[\"catch\"](function () {\n                return BigNumber$1.from(\"0\");\n              });\n\n              if (!address) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return this.balanceOf(address, tokenId);\n\n            case 6:\n              _context.t3 = _context.sent.toNumber();\n              _context.next = 10;\n              break;\n\n            case 9:\n              _context.t3 = 0;\n\n            case 10:\n              _context.t4 = _context.t3;\n              _context.t5 = [_context.t1, _context.t2, _context.t4];\n              _context.next = 14;\n              return _context.t0.all.call(_context.t0, _context.t5);\n\n            case 14:\n              _yield$Promise$all = _context.sent;\n              metadata = _yield$Promise$all[0];\n              supply = _yield$Promise$all[1];\n              ownedByAddress = _yield$Promise$all[2];\n              return _context.abrupt(\"return\", {\n                supply: supply,\n                metadata: metadata,\n                quantityOwnedByAddress: BigNumber$1.from(ownedByAddress)\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function get(_x, _x2) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * Get NFT Data\r\n   *\r\n   * @remarks Get data associated with NFTs in this module.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // You can get every NFT in the module\r\n   * const nfts = await module.getAll();\r\n   * console.log(nfts);\r\n   *\r\n   * // Or you can get optionally get the NFTs owned by a specific wallet\r\n   * const address = \"{{wallet_address}}\"; // The address you want to get the NFTs for;\r\n   * const ownedNfts = await module.getAll(address);\r\n   * console.log(ownedNfts);\r\n   * ```\r\n   *\r\n   * @returns The NFT metadata for all NFTs in the module.\r\n   */\n  ;\n\n  _proto.getAll = /*#__PURE__*/function () {\n    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(address) {\n      var _this = this;\n\n      var maxId;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 2:\n              maxId = _context2.sent.toNumber();\n              _context2.next = 5;\n              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {\n                return _this.get(i.toString(), address);\n              }));\n\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getAll(_x3) {\n      return _getAll.apply(this, arguments);\n    }\n\n    return getAll;\n  }()\n  /**\r\n   * Get NFT Balance\r\n   *\r\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check NFT balance\r\n   * const address = \"{{wallet_address}}\";\r\n   * // The token ID of the NFT you want to check the wallets balance of\r\n   * const tokenId = \"0\"\r\n   *\r\n   * const balance = await module.balanceOf(address, tokenId);\r\n   * console.log(balance);\r\n   * ```\r\n   */\n  ;\n\n  _proto.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(address, tokenId) {\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.readOnlyContract.balanceOf(address, tokenId);\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function balanceOf(_x4, _x5) {\n      return _balanceOf.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }();\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(tokenId) {\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = this.readOnlyContract;\n              _context4.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context4.t1 = _context4.sent;\n              _context4.t2 = tokenId;\n              _context4.next = 7;\n              return _context4.t0.balanceOf.call(_context4.t0, _context4.t1, _context4.t2);\n\n            case 7:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function balance(_x6) {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }();\n\n  _proto.isApproved = /*#__PURE__*/function () {\n    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address, operator, assetContract, assetId) {\n      var contract, approved, isTokenApproved;\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (assetContract) {\n                _context5.next = 4;\n                break;\n              }\n\n              _context5.next = 3;\n              return this.readOnlyContract.isApprovedForAll(address, operator);\n\n            case 3:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 4:\n              if (assetId) {\n                _context5.next = 6;\n                break;\n              }\n\n              throw new Error(\"tokenId is required\");\n\n            case 6:\n              contract = ERC721__factory.connect(assetContract, this.providerOrSigner);\n              _context5.t0 = contract;\n              _context5.next = 10;\n              return this.getSignerAddress();\n\n            case 10:\n              _context5.t1 = _context5.sent;\n              _context5.t2 = this.address;\n              _context5.next = 14;\n              return _context5.t0.isApprovedForAll.call(_context5.t0, _context5.t1, _context5.t2);\n\n            case 14:\n              approved = _context5.sent;\n              _context5.next = 17;\n              return contract.getApproved(assetId);\n\n            case 17:\n              _context5.t3 = _context5.sent.toLowerCase();\n              _context5.t4 = this.address.toLowerCase();\n              isTokenApproved = _context5.t3 === _context5.t4;\n              return _context5.abrupt(\"return\", approved || isTokenApproved);\n\n            case 21:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function isApproved(_x7, _x8, _x9, _x10) {\n      return _isApproved.apply(this, arguments);\n    }\n\n    return isApproved;\n  }() // write functions\n  ;\n\n  _proto.setApproval = /*#__PURE__*/function () {\n    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(operator, approved) {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (approved === void 0) {\n                approved = true;\n              }\n\n              _context6.next = 3;\n              return this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function setApproval(_x11, _x12) {\n      return _setApproval.apply(this, arguments);\n    }\n\n    return setApproval;\n  }()\n  /**\r\n   * Transfer NFT\r\n   *\r\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the NFT to\r\n   * const toAddress = \"0x...\";\r\n   *\r\n   * // The token ID of the NFT you want to send\r\n   * const tokenId = \"0\";\r\n   *\r\n   * // The number of NFTs you want to send\r\n   * const amount = 1;\r\n   *\r\n   * await module.transfer(toAddress, tokenId, amount);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transfer = /*#__PURE__*/function () {\n    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(to, tokenId, amount) {\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.t0 = this;\n              _context7.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context7.t1 = _context7.sent;\n              _context7.t2 = to;\n              _context7.t3 = {\n                tokenId: tokenId,\n                amount: amount\n              };\n              _context7.t4 = [0];\n              _context7.next = 9;\n              return _context7.t0.transferFrom.call(_context7.t0, _context7.t1, _context7.t2, _context7.t3, _context7.t4);\n\n            case 9:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 10:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function transfer(_x13, _x14, _x15) {\n      return _transfer.apply(this, arguments);\n    }\n\n    return transfer;\n  }();\n\n  _proto.createAndMint = /*#__PURE__*/function () {\n    var _createAndMint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(args) {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.t0 = this;\n              _context8.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context8.t1 = _context8.sent;\n              _context8.t2 = args;\n              _context8.next = 7;\n              return _context8.t0.createAndMintTo.call(_context8.t0, _context8.t1, _context8.t2);\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function createAndMint(_x16) {\n      return _createAndMint.apply(this, arguments);\n    }\n\n    return createAndMint;\n  }();\n\n  _proto.createAndMintTo = /*#__PURE__*/function () {\n    var _createAndMintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(to, args) {\n      var uri;\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.sdk.getStorage().uploadMetadata(args.metadata);\n\n            case 2:\n              uri = _context9.sent;\n              _context9.next = 5;\n              return this.sendTransaction(\"mintTo\", [to, ethers.constants.MaxUint256, uri, args.supply]);\n\n            case 5:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function createAndMintTo(_x17, _x18) {\n      return _createAndMintTo.apply(this, arguments);\n    }\n\n    return createAndMintTo;\n  }();\n\n  _proto.createAndMintBatch = /*#__PURE__*/function () {\n    var _createAndMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(args) {\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.t0 = this;\n              _context10.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context10.t1 = _context10.sent;\n              _context10.t2 = args;\n              _context10.next = 7;\n              return _context10.t0.createAndMintBatchTo.call(_context10.t0, _context10.t1, _context10.t2);\n\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function createAndMintBatch(_x19) {\n      return _createAndMintBatch.apply(this, arguments);\n    }\n\n    return createAndMintBatch;\n  }();\n\n  _proto.createAndMintBatchTo = /*#__PURE__*/function () {\n    var _createAndMintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(to, args) {\n      var _this2 = this;\n\n      var metadatas, amounts, _yield$this$sdk$getSt, uris, encoded;\n\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              metadatas = args.map(function (a) {\n                return a.metadata;\n              });\n              amounts = args.map(function (a) {\n                return a.supply;\n              });\n              _context11.next = 4;\n              return this.sdk.getStorage().uploadMetadataBatch(metadatas);\n\n            case 4:\n              _yield$this$sdk$getSt = _context11.sent;\n              uris = _yield$this$sdk$getSt.metadataUris;\n              encoded = uris.map(function (uri, index) {\n                return _this2.readOnlyContract[\"interface\"].encodeFunctionData(\"mintTo\", [to, ethers.constants.MaxUint256, uri, amounts[index]]);\n              });\n              _context11.next = 9;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 9:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function createAndMintBatchTo(_x20, _x21) {\n      return _createAndMintBatchTo.apply(this, arguments);\n    }\n\n    return createAndMintBatchTo;\n  }();\n\n  _proto.mintAdditionalCopiesTo = /*#__PURE__*/function () {\n    var _mintAdditionalCopiesTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(to, args) {\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.sendTransaction(\"mintTo\", [to, args.tokenId, \"\", args.amount]);\n\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function mintAdditionalCopiesTo(_x22, _x23) {\n      return _mintAdditionalCopiesTo.apply(this, arguments);\n    }\n\n    return mintAdditionalCopiesTo;\n  }();\n\n  _proto.mintAdditionalCopiesBatchTo = /*#__PURE__*/function () {\n    var _mintAdditionalCopiesBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(to, args) {\n      var _this3 = this;\n\n      var ids, amounts, encoded;\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              ids = args.map(function (a) {\n                return a.tokenId;\n              });\n              amounts = args.map(function (a) {\n                return a.amount;\n              });\n              encoded = ids.map(function (id, index) {\n                return _this3.readOnlyContract[\"interface\"].encodeFunctionData(\"mintTo\", [to, id, \"\", amounts[index]]);\n              });\n              _context13.next = 5;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 5:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function mintAdditionalCopiesBatchTo(_x24, _x25) {\n      return _mintAdditionalCopiesBatchTo.apply(this, arguments);\n    }\n\n    return mintAdditionalCopiesBatchTo;\n  }()\n  /**\r\n   * Burn NFT\r\n   *\r\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The token ID of the NFT you want to burn\r\n   * const tokenId = 0;\r\n   * // The number of specified NFTs you want to burn\r\n   * const amount = 1\r\n   *\r\n   * await module.burn({ tokenId, amount });\r\n   * ```\r\n   */\n  ;\n\n  _proto.burn = /*#__PURE__*/function () {\n    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(args) {\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.t0 = this;\n              _context14.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context14.t1 = _context14.sent;\n              _context14.t2 = args;\n              _context14.next = 7;\n              return _context14.t0.burnFrom.call(_context14.t0, _context14.t1, _context14.t2);\n\n            case 7:\n              return _context14.abrupt(\"return\", _context14.sent);\n\n            case 8:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function burn(_x26) {\n      return _burn.apply(this, arguments);\n    }\n\n    return burn;\n  }();\n\n  _proto.burnBatch = /*#__PURE__*/function () {\n    var _burnBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(args) {\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.t0 = this;\n              _context15.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context15.t1 = _context15.sent;\n              _context15.t2 = args;\n              _context15.next = 7;\n              return _context15.t0.burnBatchFrom.call(_context15.t0, _context15.t1, _context15.t2);\n\n            case 7:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 8:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function burnBatch(_x27) {\n      return _burnBatch.apply(this, arguments);\n    }\n\n    return burnBatch;\n  }();\n\n  _proto.burnFrom = /*#__PURE__*/function () {\n    var _burnFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(account, args) {\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.sendTransaction(\"burn\", [account, args.tokenId, args.amount]);\n\n            case 2:\n              return _context16.abrupt(\"return\", _context16.sent);\n\n            case 3:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function burnFrom(_x28, _x29) {\n      return _burnFrom.apply(this, arguments);\n    }\n\n    return burnFrom;\n  }();\n\n  _proto.burnBatchFrom = /*#__PURE__*/function () {\n    var _burnBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(account, args) {\n      var ids, amounts;\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              ids = args.map(function (a) {\n                return a.tokenId;\n              });\n              amounts = args.map(function (a) {\n                return a.amount;\n              });\n              _context17.next = 4;\n              return this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n\n            case 4:\n              return _context17.abrupt(\"return\", _context17.sent);\n\n            case 5:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function burnBatchFrom(_x30, _x31) {\n      return _burnBatchFrom.apply(this, arguments);\n    }\n\n    return burnBatchFrom;\n  }();\n\n  _proto.transferFrom = /*#__PURE__*/function () {\n    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(from, to, args, data) {\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              _context18.next = 3;\n              return this.sendTransaction(\"safeTransferFrom\", [from, to, args.tokenId, args.amount, data]);\n\n            case 3:\n              return _context18.abrupt(\"return\", _context18.sent);\n\n            case 4:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function transferFrom(_x32, _x33, _x34, _x35) {\n      return _transferFrom.apply(this, arguments);\n    }\n\n    return transferFrom;\n  }()\n  /**\r\n   * Transfer Many NFTs\r\n   *\r\n   * @remarks Transfer NFTs from the one wallet to another.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to send the NFT from\r\n   * const fromAddress = \"{{wallet_address}}\";\r\n   * // Address of the wallet you want to send the NFT to\r\n   * const toAddress = \"0x...\";\r\n   *\r\n   * // The data of the NFTs you want to send\r\n   * const data = [{\r\n   *   tokenId: 1, // The token ID of the NFT you want to send\r\n   *   amount: 1, // The number of this NFT you want to send\r\n   * }, {\r\n   *   tokenId: 2,\r\n   *   amount: 1,\r\n   * }]\r\n   *\r\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\r\n   * await module.transferBatchFrom(fromAddress, toAddress, data);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transferBatchFrom = /*#__PURE__*/function () {\n    var _transferBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(from, to, args, data) {\n      var ids, amounts;\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              ids = args.map(function (a) {\n                return a.tokenId;\n              });\n              amounts = args.map(function (a) {\n                return a.amount;\n              });\n              _context19.next = 5;\n              return this.sendTransaction(\"safeBatchTransferFrom\", [from, to, ids, amounts, data]);\n\n            case 5:\n              return _context19.abrupt(\"return\", _context19.sent);\n\n            case 6:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function transferBatchFrom(_x36, _x37, _x38, _x39) {\n      return _transferBatchFrom.apply(this, arguments);\n    }\n\n    return transferBatchFrom;\n  }()\n  /**\r\n   * Set the royalty recipient and fee for this contract\r\n   * @param recipientAddress\r\n   * @param fee\r\n   */\n  ;\n\n  _proto.setDefaultRoyaltyInfo = /*#__PURE__*/function () {\n    var _setDefaultRoyaltyInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(recipientAddress, fee) {\n      var _yield$this$getMetada, metadata, encoded, uri;\n\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this.getMetadata(false);\n\n            case 2:\n              _yield$this$getMetada = _context20.sent;\n              metadata = _yield$this$getMetada.metadata;\n              encoded = [];\n\n              if (metadata) {\n                _context20.next = 7;\n                break;\n              }\n\n              throw new Error(\"No metadata found, this module might be invalid!\");\n\n            case 7:\n              metadata.fee_recipient = recipientAddress;\n              metadata.seller_fee_basis_points = fee;\n              _context20.t0 = this.sdk.getStorage();\n              _context20.t1 = _extends({}, metadata);\n              _context20.t2 = this.address;\n              _context20.next = 14;\n              return this.getSignerAddress();\n\n            case 14:\n              _context20.t3 = _context20.sent;\n              _context20.next = 17;\n              return _context20.t0.uploadMetadata.call(_context20.t0, _context20.t1, _context20.t2, _context20.t3);\n\n            case 17:\n              uri = _context20.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setDefaultRoyaltyInfo\", [recipientAddress, fee]));\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [uri]));\n              _context20.next = 22;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 22:\n              return _context20.abrupt(\"return\", _context20.sent);\n\n            case 23:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function setDefaultRoyaltyInfo(_x40, _x41) {\n      return _setDefaultRoyaltyInfo.apply(this, arguments);\n    }\n\n    return setDefaultRoyaltyInfo;\n  }()\n  /**\r\n   * Set the royalty recipient and fee for a particular token\r\n   * @param recipientAddress\r\n   * @param fee\r\n   */\n  ;\n\n  _proto.setTokenRoyaltyInfo = /*#__PURE__*/function () {\n    var _setTokenRoyaltyInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(tokenId, recipientAddress, fee) {\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.sendTransaction(\"setRoyaltyInfoForToken\", [tokenId, recipientAddress, fee]);\n\n            case 2:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 3:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function setTokenRoyaltyInfo(_x42, _x43, _x44) {\n      return _setTokenRoyaltyInfo.apply(this, arguments);\n    }\n\n    return setTokenRoyaltyInfo;\n  }();\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context22.sent;\n              _context22.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context22.abrupt(\"return\", _context22.sent);\n\n            case 6:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function setModuleMetadata(_x45) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }()\n  /**\r\n   * `getOwned` is a convenience method for getting all owned tokens\r\n   * for a particular wallet.\r\n   *\r\n   * @param _address - The address to check for token ownership\r\n   * @returns An array of BundleMetadata objects that are owned by the address\r\n   */\n  ;\n\n  _proto.getOwned = /*#__PURE__*/function () {\n    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(_address) {\n      var _this4 = this;\n\n      var address, maxId, balances, ownedBalances;\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              if (!_address) {\n                _context24.next = 4;\n                break;\n              }\n\n              _context24.t0 = _address;\n              _context24.next = 7;\n              break;\n\n            case 4:\n              _context24.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context24.t0 = _context24.sent;\n\n            case 7:\n              address = _context24.t0;\n              _context24.next = 10;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 10:\n              maxId = _context24.sent;\n              _context24.next = 13;\n              return this.readOnlyContract.balanceOfBatch(Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys()));\n\n            case 13:\n              balances = _context24.sent;\n              ownedBalances = balances.map(function (b, i) {\n                return {\n                  tokenId: i,\n                  balance: b\n                };\n              }).filter(function (b) {\n                return b.balance.gt(0);\n              });\n              _context24.next = 17;\n              return Promise.all(ownedBalances.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(item) {\n                  var token;\n                  return runtime_1.wrap(function _callee23$(_context23) {\n                    while (1) {\n                      switch (_context23.prev = _context23.next) {\n                        case 0:\n                          _context23.next = 2;\n                          return _this4.get(item.tokenId.toString());\n\n                        case 2:\n                          token = _context23.sent;\n                          return _context23.abrupt(\"return\", _extends({}, token, {\n                            ownedByAddress: item.balance\n                          }));\n\n                        case 4:\n                        case \"end\":\n                          return _context23.stop();\n                      }\n                    }\n                  }, _callee23);\n                }));\n\n                return function (_x47) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n\n            case 17:\n              return _context24.abrupt(\"return\", _context24.sent);\n\n            case 18:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this);\n    }));\n\n    function getOwned(_x46) {\n      return _getOwned.apply(this, arguments);\n    }\n\n    return getOwned;\n  }()\n  /**\r\n   * Gets the royalty recipient and BPS (basis points) of the contract\r\n   *\r\n   * @returns - The royalty recipient and BPS\r\n   */\n  ;\n\n  _proto.getDefaultRoyaltyInfo = /*#__PURE__*/function () {\n    var _getDefaultRoyaltyInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25() {\n      return runtime_1.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return this.readOnlyContract.getDefaultRoyaltyInfo();\n\n            case 2:\n              return _context25.abrupt(\"return\", _context25.sent);\n\n            case 3:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25, this);\n    }));\n\n    function getDefaultRoyaltyInfo() {\n      return _getDefaultRoyaltyInfo.apply(this, arguments);\n    }\n\n    return getDefaultRoyaltyInfo;\n  }()\n  /**\r\n   * Gets the royalty recipient and BPS (basis points) of a particular token\r\n   *\r\n   * @returns - The royalty recipient and BPS\r\n   */\n  ;\n\n  _proto.getTokenRoyaltyInfo = /*#__PURE__*/function () {\n    var _getTokenRoyaltyInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(tokenId) {\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return this.readOnlyContract.getRoyaltyInfoForToken(tokenId);\n\n            case 2:\n              return _context26.abrupt(\"return\", _context26.sent);\n\n            case 3:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26, this);\n    }));\n\n    function getTokenRoyaltyInfo(_x48) {\n      return _getTokenRoyaltyInfo.apply(this, arguments);\n    }\n\n    return getTokenRoyaltyInfo;\n  }();\n\n  _proto.isTransferRestricted = /*#__PURE__*/function () {\n    var _isTransferRestricted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27() {\n      return runtime_1.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              return _context27.abrupt(\"return\", this.readOnlyContract.transfersRestricted());\n\n            case 1:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27, this);\n    }));\n\n    function isTransferRestricted() {\n      return _isTransferRestricted.apply(this, arguments);\n    }\n\n    return isTransferRestricted;\n  }();\n\n  _proto.setRestrictedTransfer = /*#__PURE__*/function () {\n    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(restricted) {\n      return runtime_1.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              if (restricted === void 0) {\n                restricted = false;\n              }\n\n              _context28.t0 = this;\n              _context28.t1 = [\"admin\"];\n              _context28.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context28.t2 = _context28.sent;\n              _context28.next = 8;\n              return _context28.t0.onlyRoles.call(_context28.t0, _context28.t1, _context28.t2);\n\n            case 8:\n              _context28.next = 10;\n              return this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n\n            case 10:\n              return _context28.abrupt(\"return\", _context28.sent);\n\n            case 11:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28, this);\n    }));\n\n    function setRestrictedTransfer(_x49) {\n      return _setRestrictedTransfer.apply(this, arguments);\n    }\n\n    return setRestrictedTransfer;\n  }() // Signature based minting\n  ;\n\n  _proto.mintWithSignature = /*#__PURE__*/function () {\n    var _mintWithSignature = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(req, signature) {\n      var message, overrides, receipt, t;\n      return runtime_1.wrap(function _callee29$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              message = _extends({}, this.mapPayload(req), {\n                uri: req.uri\n              });\n              _context29.next = 3;\n              return this.getCallOverrides();\n\n            case 3:\n              overrides = _context29.sent;\n              _context29.next = 6;\n              return this.setAllowance(BigNumber$1.from(message.pricePerToken).mul(req.quantity), req.currencyAddress, overrides);\n\n            case 6:\n              _context29.next = 8;\n              return this.sendTransaction(\"mintWithSignature\", [message, signature], overrides);\n\n            case 8:\n              receipt = _context29.sent;\n              _context29.next = 11;\n              return this.parseLogs(\"MintWithSignature\", receipt.logs);\n\n            case 11:\n              t = _context29.sent;\n\n              if (!(t.length === 0)) {\n                _context29.next = 14;\n                break;\n              }\n\n              throw new Error(\"No MintWithSignature event found\");\n\n            case 14:\n              return _context29.abrupt(\"return\", t[0].args.tokenIdMinted);\n\n            case 15:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee29, this);\n    }));\n\n    function mintWithSignature(_x50, _x51) {\n      return _mintWithSignature.apply(this, arguments);\n    }\n\n    return mintWithSignature;\n  }();\n\n  _proto.verify = /*#__PURE__*/function () {\n    var _verify = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(mintRequest, signature) {\n      var message, v;\n      return runtime_1.wrap(function _callee30$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              message = this.mapPayload(mintRequest);\n              _context30.next = 3;\n              return this.readOnlyContract.verify(_extends({}, message, {\n                uri: mintRequest.uri\n              }), signature);\n\n            case 3:\n              v = _context30.sent;\n              return _context30.abrupt(\"return\", v[0]);\n\n            case 5:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, _callee30, this);\n    }));\n\n    function verify(_x52, _x53) {\n      return _verify.apply(this, arguments);\n    }\n\n    return verify;\n  }();\n\n  _proto.generateSignatureBatch = /*#__PURE__*/function () {\n    var _generateSignatureBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(payloads) {\n      var _this5 = this;\n\n      var resolveId, _yield$this$sdk$getSt2, uris, chainId, signer;\n\n      return runtime_1.wrap(function _callee32$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              resolveId = function resolveId(mintRequest) {\n                if (mintRequest.id === undefined) {\n                  var buffer = Buffer.alloc(16);\n                  v4({}, buffer);\n                  return hexlify(toUtf8Bytes(buffer.toString(\"hex\")));\n                } else {\n                  return hexlify(mintRequest.id);\n                }\n              };\n\n              _context32.t0 = this;\n              _context32.t1 = [\"minter\"];\n              _context32.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context32.t2 = _context32.sent;\n              _context32.next = 8;\n              return _context32.t0.onlyRoles.call(_context32.t0, _context32.t1, _context32.t2);\n\n            case 8:\n              _context32.next = 10;\n              return this.sdk.getStorage().uploadMetadataBatch(payloads.map(function (r) {\n                return r.metadata;\n              }));\n\n            case 10:\n              _yield$this$sdk$getSt2 = _context32.sent;\n              uris = _yield$this$sdk$getSt2.metadataUris;\n              _context32.next = 14;\n              return this.getChainID();\n\n            case 14:\n              chainId = _context32.sent;\n              signer = this.getSigner();\n              _context32.next = 18;\n              return Promise.all(payloads.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(m, i) {\n                  var id, uri;\n                  return runtime_1.wrap(function _callee31$(_context31) {\n                    while (1) {\n                      switch (_context31.prev = _context31.next) {\n                        case 0:\n                          id = resolveId(m);\n                          uri = uris[i];\n                          _context31.t0 = _extends({}, m, {\n                            id: id,\n                            uri: uri\n                          });\n                          _context31.next = 5;\n                          return _this5.signTypedDataEmitEvent(signer, {\n                            name: \"SignatureMint1155\",\n                            version: \"1\",\n                            chainId: chainId,\n                            verifyingContract: _this5.address\n                          }, {\n                            MintRequest: MintRequest\n                          }, _extends({\n                            uri: uri\n                          }, _this5.mapPayload(m), {\n                            uid: id\n                          }));\n\n                        case 5:\n                          _context31.t1 = _context31.sent.toString();\n                          return _context31.abrupt(\"return\", {\n                            payload: _context31.t0,\n                            signature: _context31.t1\n                          });\n\n                        case 7:\n                        case \"end\":\n                          return _context31.stop();\n                      }\n                    }\n                  }, _callee31);\n                }));\n\n                return function (_x55, _x56) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 18:\n              return _context32.abrupt(\"return\", _context32.sent);\n\n            case 19:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, _callee32, this);\n    }));\n\n    function generateSignatureBatch(_x54) {\n      return _generateSignatureBatch.apply(this, arguments);\n    }\n\n    return generateSignatureBatch;\n  }();\n\n  _proto.generateSignature = /*#__PURE__*/function () {\n    var _generateSignature = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(mintRequest) {\n      return runtime_1.wrap(function _callee33$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return this.generateSignatureBatch([mintRequest]);\n\n            case 2:\n              return _context33.abrupt(\"return\", _context33.sent[0]);\n\n            case 3:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, _callee33, this);\n    }));\n\n    function generateSignature(_x57) {\n      return _generateSignature.apply(this, arguments);\n    }\n\n    return generateSignature;\n  }()\n  /**\r\n   * Maps a payload to the format expected by the contract\r\n   *\r\n   * @internal\r\n   *\r\n   * @param mintRequest - The payload to map.\r\n   * @returns - The mapped payload.\r\n   */\n  ;\n\n  _proto.mapPayload = function mapPayload(mintRequest) {\n    return {\n      to: mintRequest.to,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      tokenId: mintRequest.tokenId,\n      quantity: mintRequest.quantity,\n      pricePerToken: mintRequest.price,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTimeEpochSeconds,\n      validityStartTimestamp: mintRequest.mintStartTimeEpochSeconds,\n      uid: mintRequest.id\n    };\n  } // TODO: write in common place and stop duping\n  ;\n\n  _proto.setAllowance = /*#__PURE__*/function () {\n    var _setAllowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34(value, currencyAddress, overrides) {\n      var erc20, owner, spender, allowance;\n      return runtime_1.wrap(function _callee34$(_context34) {\n        while (1) {\n          switch (_context34.prev = _context34.next) {\n            case 0:\n              if (!(currencyAddress === NATIVE_TOKEN_ADDRESS || currencyAddress === AddressZero)) {\n                _context34.next = 4;\n                break;\n              }\n\n              overrides[\"value\"] = value;\n              _context34.next = 16;\n              break;\n\n            case 4:\n              erc20 = ERC20__factory.connect(currencyAddress, this.providerOrSigner);\n              _context34.next = 7;\n              return this.getSignerAddress();\n\n            case 7:\n              owner = _context34.sent;\n              spender = this.address;\n              _context34.next = 11;\n              return erc20.allowance(owner, spender);\n\n            case 11:\n              allowance = _context34.sent;\n\n              if (!allowance.lt(value)) {\n                _context34.next = 15;\n                break;\n              }\n\n              _context34.next = 15;\n              return this.sendContractTransaction(erc20, \"increaseAllowance\", [spender, value.sub(allowance)]);\n\n            case 15:\n              return _context34.abrupt(\"return\", overrides);\n\n            case 16:\n            case \"end\":\n              return _context34.stop();\n          }\n        }\n      }, _callee34, this);\n    }));\n\n    function setAllowance(_x58, _x59, _x60) {\n      return _setAllowance.apply(this, arguments);\n    }\n\n    return setAllowance;\n  }();\n\n  return SignatureMint1155Module;\n}(ModuleWithRoles);\n\nSignatureMint1155Module.moduleType = ModuleType.BUNDLE_SIGNATURE;\nSignatureMint1155Module.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];\n\nvar _CONTRACT_ADDRESSES;\n\nvar FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\nvar CONTRACT_ADDRESSES = (_CONTRACT_ADDRESSES = {}, _CONTRACT_ADDRESSES[ChainId.Mainnet] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\"\n}, _CONTRACT_ADDRESSES[ChainId.Rinkeby] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: \"0xFD4973FeB2031D4409fB57afEE5dF2051b171104\"\n}, _CONTRACT_ADDRESSES[ChainId.Polygon] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\"\n}, _CONTRACT_ADDRESSES[ChainId.Mumbai] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\"\n}, _CONTRACT_ADDRESSES[ChainId.Avalanche] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\"\n}, _CONTRACT_ADDRESSES[ChainId.AvalancheFujiTestnet] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\"\n}, _CONTRACT_ADDRESSES[ChainId.Fantom] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: ethers.constants.AddressZero\n}, _CONTRACT_ADDRESSES[ChainId.FantomTestnet] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: ethers.constants.AddressZero\n}, _CONTRACT_ADDRESSES[ChainId.Hardhat] = {\n  registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  biconomyForwarder: ethers.constants.AddressZero\n}, _CONTRACT_ADDRESSES);\n\nfunction getContractAddressByChainId(chainId, contractName) {\n  if (contractName === void 0) {\n    contractName = \"registry\";\n  }\n\n  return CONTRACT_ADDRESSES[chainId][contractName];\n}\n/**\r\n * @internal\r\n */\n\n\nvar ForwardRequest = [{\n  name: \"from\",\n  type: \"address\"\n}, {\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"value\",\n  type: \"uint256\"\n}, {\n  name: \"gas\",\n  type: \"uint256\"\n}, {\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\n/**\r\n * @internal\r\n */\n\nvar BiconomyForwarderAbi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"batchId\",\n    type: \"uint256\"\n  }],\n  name: \"getNonce\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nvar _nonces = {};\nvar _noncesSyncTimestamp = {};\n/**\r\n * @internal\r\n */\n\nfunction getAndIncrementNonce(_x, _x2, _x3) {\n  return _getAndIncrementNonce.apply(this, arguments);\n}\n\nfunction _getAndIncrementNonce() {\n  _getAndIncrementNonce = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(forwarder, forwarderFunction, forwarderArgs) {\n    var address, timestamp, shouldSync, _forwarder$functions, nonceResult, nonce;\n\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // address is only used for internal caching :)\n            address = forwarderArgs.join(\"|\");\n            timestamp = _noncesSyncTimestamp[address]; // if it's within 2 seconds we're optimistically increment the nonce\n            // should we always sync?\n\n            shouldSync = Date.now() - timestamp >= 2000;\n\n            if (!(!(address in _nonces) || shouldSync)) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 6;\n            return (_forwarder$functions = forwarder.functions)[forwarderFunction].apply(_forwarder$functions, forwarderArgs);\n\n          case 6:\n            nonceResult = _context.sent;\n\n            if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n              _nonces[address] = BigNumber.from(nonceResult[0]);\n            } else {\n              _nonces[address] = BigNumber.from(nonceResult);\n            }\n\n            _noncesSyncTimestamp[address] = Date.now();\n\n          case 9:\n            nonce = _nonces[address];\n            _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n            return _context.abrupt(\"return\", nonce);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getAndIncrementNonce.apply(this, arguments);\n}\n\nvar NAME_ABI = [{\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nvar DOMAIN_SEPARATOR_ABI = [{\n  constant: true,\n  inputs: [],\n  name: \"DOMAIN_SEPARATOR\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getDomainSeperator\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nvar NONCES_ABI = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }],\n  name: \"nonces\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"user\",\n    type: \"address\"\n  }],\n  name: \"getNonce\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"nonce\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nfunction getSignerNonce(_x, _x2) {\n  return _getSignerNonce.apply(this, arguments);\n}\n\nfunction _getSignerNonce() {\n  _getSignerNonce = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(signer, contractAddress) {\n    var contract;\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contract = new Contract$1(contractAddress, NONCES_ABI, signer);\n            _context.prev = 1;\n            _context.t0 = contract;\n            _context.next = 5;\n            return signer.getAddress();\n\n          case 5:\n            _context.t1 = _context.sent;\n            _context.next = 8;\n            return _context.t0.nonces.call(_context.t0, _context.t1);\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 11:\n            _context.prev = 11;\n            _context.t2 = _context[\"catch\"](1);\n            _context.t3 = contract;\n            _context.next = 16;\n            return signer.getAddress();\n\n          case 16:\n            _context.t4 = _context.sent;\n            _context.next = 19;\n            return _context.t3.getNonce.call(_context.t3, _context.t4);\n\n          case 19:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11]]);\n  }));\n  return _getSignerNonce.apply(this, arguments);\n}\n\nfunction getDomainSeperator(_x3, _x4) {\n  return _getDomainSeperator.apply(this, arguments);\n}\n\nfunction _getDomainSeperator() {\n  _getDomainSeperator = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(signer, contractAddress) {\n    var contract;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            contract = new Contract$1(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n            _context2.prev = 1;\n            _context2.next = 4;\n            return contract.DOMAIN_SEPARATOR();\n\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](1);\n            _context2.next = 11;\n            return contract.getDomainSeperator();\n\n          case 11:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 7]]);\n  }));\n  return _getDomainSeperator.apply(this, arguments);\n}\n\nfunction getTokenName(_x5, _x6) {\n  return _getTokenName.apply(this, arguments);\n}\n/**\r\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\r\n */\n\n\nfunction _getTokenName() {\n  _getTokenName = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(signer, contractAddress) {\n    return runtime_1.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", new Contract$1(contractAddress, NAME_ABI, signer).name());\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getTokenName.apply(this, arguments);\n}\n\nfunction getChainDomainSeperator(_x7, _x8) {\n  return _getChainDomainSeperator.apply(this, arguments);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChainDomainSeperator() {\n  _getChainDomainSeperator = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(signer, domain) {\n    var contractDomainSeparator, polygonDomain;\n    return runtime_1.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getDomainSeperator(signer, domain.verifyingContract);\n\n          case 2:\n            contractDomainSeparator = _context4.sent;\n            polygonDomain = {\n              name: domain.name,\n              version: domain.version,\n              verifyingContract: domain.verifyingContract,\n              salt: ethers.utils.hexZeroPad(BigNumber.from(domain.chainId).toHexString(), 32)\n            };\n\n            if (!(ethers.utils._TypedDataEncoder.hashDomain(polygonDomain) === contractDomainSeparator)) {\n              _context4.next = 6;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", polygonDomain);\n\n          case 6:\n            return _context4.abrupt(\"return\", domain);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getChainDomainSeperator.apply(this, arguments);\n}\n\nfunction signEIP2612Permit(_x16, _x17, _x18, _x19, _x20, _x21, _x22) {\n  return _signEIP2612Permit.apply(this, arguments);\n}\n\nfunction _signEIP2612Permit() {\n  _signEIP2612Permit = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(signer, currencyAddress, owner, spender, value, deadline, nonce) {\n    var _nonce2, _deadline2;\n\n    var domain, message, types, _yield$signTypedData2, signature;\n\n    return runtime_1.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.t0 = getChainDomainSeperator;\n            _context6.t1 = signer;\n            _context6.next = 4;\n            return getTokenName(signer, currencyAddress);\n\n          case 4:\n            _context6.t2 = _context6.sent;\n            _context6.next = 7;\n            return signer.getChainId();\n\n          case 7:\n            _context6.t3 = _context6.sent;\n            _context6.t4 = currencyAddress;\n            _context6.t5 = {\n              name: _context6.t2,\n              version: \"1\",\n              chainId: _context6.t3,\n              verifyingContract: _context6.t4\n            };\n            _context6.next = 12;\n            return (0, _context6.t0)(_context6.t1, _context6.t5);\n\n          case 12:\n            domain = _context6.sent;\n\n            if (!((_nonce2 = nonce) != null)) {\n              _context6.next = 17;\n              break;\n            }\n\n            _context6.t6 = _nonce2;\n            _context6.next = 20;\n            break;\n\n          case 17:\n            _context6.next = 19;\n            return getSignerNonce(signer, currencyAddress);\n\n          case 19:\n            _context6.t6 = _context6.sent.toString();\n\n          case 20:\n            nonce = _context6.t6;\n            deadline = (_deadline2 = deadline) != null ? _deadline2 : ethers.constants.MaxUint256;\n            message = {\n              owner: owner,\n              spender: spender,\n              value: value,\n              nonce: nonce,\n              deadline: deadline\n            };\n            types = {\n              Permit: [{\n                name: \"owner\",\n                type: \"address\"\n              }, {\n                name: \"spender\",\n                type: \"address\"\n              }, {\n                name: \"value\",\n                type: \"uint256\"\n              }, {\n                name: \"nonce\",\n                type: \"uint256\"\n              }, {\n                name: \"deadline\",\n                type: \"uint256\"\n              }]\n            };\n            _context6.next = 26;\n            return signTypedData(signer, domain, types, message);\n\n          case 26:\n            _yield$signTypedData2 = _context6.sent;\n            signature = _yield$signTypedData2.signature;\n            return _context6.abrupt(\"return\", {\n              message: message,\n              signature: signature\n            });\n\n          case 29:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _signEIP2612Permit.apply(this, arguments);\n}\n/**\r\n * CommonModuleMetadata defines the common properties of a module deployment.\r\n */\n\n\nvar CommonModuleMetadata = function CommonModuleMetadata() {\n  this.name = \"\";\n  this.description = undefined;\n  this.image = undefined;\n  this.externalLink = undefined;\n};\n\n__decorate([JsonProperty(\"name\", String)], CommonModuleMetadata.prototype, \"name\", void 0);\n\n__decorate([JsonProperty(\"description\", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, \"description\", void 0);\n\n__decorate([JsonProperty(\"image\", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, \"image\", void 0);\n\n__decorate([JsonProperty(\"external_link\", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, \"externalLink\", void 0);\n\nCommonModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"CommonModuleMetadata\")], CommonModuleMetadata);\nvar CommonModuleMetadata$1 = CommonModuleMetadata;\n\nvar BundleDropModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(BundleDropModuleMetadata, _CommonModuleMetadata);\n\n  function BundleDropModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.sellerFeeBasisPoints = 0;\n    _this.primarySaleFeeBasisPoints = 0;\n    _this.feeRecipient = undefined;\n    _this.primarySaleRecipientAddress = \"\";\n    return _this;\n  }\n\n  return BundleDropModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"seller_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], BundleDropModuleMetadata.prototype, \"sellerFeeBasisPoints\", void 0);\n\n__decorate([JsonProperty(\"primary_sale_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], BundleDropModuleMetadata.prototype, \"primarySaleFeeBasisPoints\", void 0);\n\n__decorate([JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)], BundleDropModuleMetadata.prototype, \"feeRecipient\", void 0);\n\n__decorate([JsonProperty(\"primary_sale_recipient_address\", String)], BundleDropModuleMetadata.prototype, \"primarySaleRecipientAddress\", void 0);\n\nBundleDropModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"BundleDropModuleMetadata\")], BundleDropModuleMetadata);\n\nvar BundleModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(BundleModuleMetadata, _CommonModuleMetadata);\n\n  function BundleModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.sellerFeeBasisPoints = 0;\n    _this.feeRecipient = undefined;\n    return _this;\n  }\n\n  return BundleModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"seller_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], BundleModuleMetadata.prototype, \"sellerFeeBasisPoints\", void 0);\n\n__decorate([JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)], BundleModuleMetadata.prototype, \"feeRecipient\", void 0);\n\nBundleModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"CollectionModuleMetadata\")], BundleModuleMetadata);\n\nvar CurrencyModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(CurrencyModuleMetadata, _CommonModuleMetadata);\n\n  function CurrencyModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.symbol = \"\";\n    return _this;\n  }\n\n  return CurrencyModuleMetadata;\n}(CommonModuleMetadata);\n\n__decorate([JsonProperty(\"symbol\", String)], CurrencyModuleMetadata.prototype, \"symbol\", void 0);\n\nCurrencyModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"CurrencyModuleMetadata\")], CurrencyModuleMetadata);\n\nvar DatastoreModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(DatastoreModuleMetadata, _CommonModuleMetadata);\n\n  function DatastoreModuleMetadata() {\n    return _CommonModuleMetadata.apply(this, arguments) || this;\n  }\n\n  return DatastoreModuleMetadata;\n}(CommonModuleMetadata);\n\nDatastoreModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"DatastoreModuleMetadata\")], DatastoreModuleMetadata);\n\nvar DropModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(DropModuleMetadata, _CommonModuleMetadata);\n\n  function DropModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.sellerFeeBasisPoints = 0;\n    _this.primarySaleFeeBasisPoints = 0;\n    _this.feeRecipient = undefined;\n    _this.symbol = void 0;\n    _this.maxSupply = 1;\n    _this.primarySaleRecipientAddress = \"\";\n    _this.baseTokenUri = \"\";\n    return _this;\n  }\n\n  return DropModuleMetadata;\n}(CommonModuleMetadata);\n\n__decorate([JsonProperty(\"seller_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, \"sellerFeeBasisPoints\", void 0);\n\n__decorate([JsonProperty(\"primary_sale_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, \"primarySaleFeeBasisPoints\", void 0);\n\n__decorate([JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, \"feeRecipient\", void 0);\n\n__decorate([JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, \"symbol\", void 0);\n\n__decorate([JsonProperty(\"max_supply\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, \"maxSupply\", void 0);\n\n__decorate([JsonProperty(\"primary_sale_recipient_address\", String)], DropModuleMetadata.prototype, \"primarySaleRecipientAddress\", void 0);\n\n__decorate([JsonProperty(\"base_token_uri\", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, \"baseTokenUri\", void 0);\n\nDropModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"DropModuleMetadata\")], DropModuleMetadata);\n\nvar MarketModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(MarketModuleMetadata, _CommonModuleMetadata);\n\n  function MarketModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.marketFeeBasisPoints = 0;\n    return _this;\n  }\n\n  return MarketModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"seller_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], MarketModuleMetadata.prototype, \"marketFeeBasisPoints\", void 0);\n\nMarketModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"MarketModuleMetadata\")], MarketModuleMetadata);\n\nvar MarketplaceModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(MarketplaceModuleMetadata, _CommonModuleMetadata);\n\n  function MarketplaceModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.marketFeeBasisPoints = 0;\n    return _this;\n  }\n\n  return MarketplaceModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"seller_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], MarketplaceModuleMetadata.prototype, \"marketFeeBasisPoints\", void 0);\n\nMarketplaceModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"MarketplaceModuleMetadata\")], MarketplaceModuleMetadata);\nvar MarketplaceModuleMetadata$1 = MarketplaceModuleMetadata;\n\nvar NftModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(NftModuleMetadata, _CommonModuleMetadata);\n\n  function NftModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.sellerFeeBasisPoints = 0;\n    _this.feeRecipient = undefined;\n    _this.symbol = void 0;\n    _this.defaultSaleRecipientAddress = \"\";\n    _this.primarySaleFeeBasisPoints = 0;\n    return _this;\n  }\n\n  return NftModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"seller_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, \"sellerFeeBasisPoints\", void 0);\n\n__decorate([JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, \"feeRecipient\", void 0);\n\n__decorate([JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, \"symbol\", void 0);\n\n__decorate([JsonProperty(\"default_sale_recipient_address\", String, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, \"defaultSaleRecipientAddress\", void 0);\n\n__decorate([JsonProperty(\"sale_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, \"primarySaleFeeBasisPoints\", void 0);\n\nNftModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"NftModuleMetadata\")], NftModuleMetadata);\n\nvar PackModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(PackModuleMetadata, _CommonModuleMetadata);\n\n  function PackModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.sellerFeeBasisPoints = 0;\n    _this.feeRecipient = undefined;\n    return _this;\n  }\n\n  return PackModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"seller_fee_basis_points\", Number, PropertyConvertingMode.IGNORE_NULLABLE)], PackModuleMetadata.prototype, \"sellerFeeBasisPoints\", void 0);\n\n__decorate([JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)], PackModuleMetadata.prototype, \"feeRecipient\", void 0);\n\nPackModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"PackModuleMetadata\")], PackModuleMetadata);\n\nvar SplitsModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(SplitsModuleMetadata, _CommonModuleMetadata);\n\n  function SplitsModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.recipientSplits = [];\n    _this.isRoyalty = false;\n    return _this;\n  }\n\n  return SplitsModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"is_royalty\", Boolean, PropertyConvertingMode.IGNORE_NULLABLE)], SplitsModuleMetadata.prototype, \"isRoyalty\", void 0);\n\nSplitsModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"SplitsModuleMetadata\")], SplitsModuleMetadata);\n\nvar TokenModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(TokenModuleMetadata, _CommonModuleMetadata);\n\n  function TokenModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.symbol = \"\";\n    return _this;\n  }\n\n  return TokenModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"symbol\", String)], TokenModuleMetadata.prototype, \"symbol\", void 0);\n\nTokenModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"TokenModuleMetadata\")], TokenModuleMetadata);\n\nvar VoteModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {\n  _inheritsLoose(VoteModuleMetadata, _CommonModuleMetadata);\n\n  function VoteModuleMetadata() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;\n    _this.proposalStartWaitTimeInSeconds = 0;\n    _this.proposalVotingTimeInSeconds = 0;\n    _this.votingDelay = 0;\n    _this.votingPeriod = 0;\n    _this.votingTokenAddress = \"\";\n    _this.votingQuorumFraction = 0;\n    _this.minimumNumberOfTokensNeededToPropose = \"0\";\n    return _this;\n  }\n\n  return VoteModuleMetadata;\n}(CommonModuleMetadata$1);\n\n__decorate([JsonProperty(\"proposal_start_time_in_seconds\", Number)], VoteModuleMetadata.prototype, \"proposalStartWaitTimeInSeconds\", void 0);\n\n__decorate([JsonProperty(\"proposal_voting_time_in_seconds\", Number)], VoteModuleMetadata.prototype, \"proposalVotingTimeInSeconds\", void 0);\n\n__decorate([JsonProperty(\"voting_delay\", Number)], VoteModuleMetadata.prototype, \"votingDelay\", void 0);\n\n__decorate([JsonProperty(\"voting_period\", Number)], VoteModuleMetadata.prototype, \"votingPeriod\", void 0);\n\n__decorate([JsonProperty(\"voting_token_address\", String)], VoteModuleMetadata.prototype, \"votingTokenAddress\", void 0);\n\n__decorate([JsonProperty(\"voting_quorum_fraction\", Number)], VoteModuleMetadata.prototype, \"votingQuorumFraction\", void 0);\n\n__decorate([JsonProperty(\"proposal_token_threshold\", String)], VoteModuleMetadata.prototype, \"minimumNumberOfTokensNeededToPropose\", void 0);\n\nVoteModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"VoteModuleMetadata\")], VoteModuleMetadata);\n\nvar _DEFAULT_BLOCK_TIMES_;\n/**\r\n * Fallback map of default block mining times in seconds.\r\n\n */\n\n\nvar DEFAULT_BLOCK_TIMES_FALLBACK = (_DEFAULT_BLOCK_TIMES_ = {}, _DEFAULT_BLOCK_TIMES_[ChainId.Mainnet] = {\n  secondsBetweenBlocks: 15,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_[ChainId.Rinkeby] = {\n  secondsBetweenBlocks: 15,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_[ChainId.Polygon] = {\n  secondsBetweenBlocks: 2.5,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_[ChainId.Mumbai] = {\n  secondsBetweenBlocks: 2.5,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_[ChainId.Fantom] = {\n  secondsBetweenBlocks: 1,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_[ChainId.FantomTestnet] = {\n  secondsBetweenBlocks: 1,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_[ChainId.Avalanche] = {\n  secondsBetweenBlocks: 1,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_[ChainId.AvalancheFujiTestnet] = {\n  secondsBetweenBlocks: 1,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_[ChainId.Hardhat] = {\n  secondsBetweenBlocks: 1,\n  synced: false\n}, _DEFAULT_BLOCK_TIMES_);\n/**\r\n * Given a time in second, return the block number that the time is in.\r\n *\r\n * @param timeInEpochSeconds - The time in seconds.\r\n * @param chainId - The chain id.\r\n * @returns - The block number.\r\n */\n\nfunction estimateBlockAtTime(_x, _x2) {\n  return _estimateBlockAtTime.apply(this, arguments);\n}\n\nfunction _estimateBlockAtTime() {\n  _estimateBlockAtTime = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(timeInEpochSeconds, provider) {\n    var secondsUntil, chainId, estimateSecondsBetweenBlocks, latestBlock, secondsBetweenBlocks, blocksUntil;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            secondsUntil = Math.floor(timeInEpochSeconds - Date.now() / 1000);\n            _context2.next = 3;\n            return provider.getNetwork();\n\n          case 3:\n            chainId = _context2.sent.chainId;\n            !SUPPORTED_CHAIN_IDS.includes(chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Chain id \" + chainId + \" is not supported\") : invariant(false) : void 0;\n            !(timeInEpochSeconds >= Date.now() / 1000) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"This function should not be used to estimate past block times\") : invariant(false) : void 0;\n\n            estimateSecondsBetweenBlocks = /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n                var blockTimes, latest, i, current, previous, diff, sum;\n                return runtime_1.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        blockTimes = [];\n                        _context.next = 3;\n                        return provider.getBlock(\"latest\");\n\n                      case 3:\n                        latest = _context.sent;\n                        i = 0;\n\n                      case 5:\n                        if (!(i < 5)) {\n                          _context.next = 17;\n                          break;\n                        }\n\n                        _context.next = 8;\n                        return provider.getBlock(latest.number - i);\n\n                      case 8:\n                        current = _context.sent;\n                        _context.next = 11;\n                        return provider.getBlock(latest.number - i - 1);\n\n                      case 11:\n                        previous = _context.sent;\n                        diff = current.timestamp - previous.timestamp;\n                        blockTimes.push(diff);\n\n                      case 14:\n                        i++;\n                        _context.next = 5;\n                        break;\n\n                      case 17:\n                        sum = blockTimes.reduce(function (result, a) {\n                          return result + a;\n                        }, 0);\n                        return _context.abrupt(\"return\", sum / blockTimes.length);\n\n                      case 19:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function estimateSecondsBetweenBlocks() {\n                return _ref.apply(this, arguments);\n              };\n            }();\n\n            if (!DEFAULT_BLOCK_TIMES_FALLBACK[chainId].synced) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks);\n\n          case 9:\n            _context2.next = 11;\n            return provider.getBlock(\"latest\");\n\n          case 11:\n            latestBlock = _context2.sent;\n            _context2.prev = 12;\n            _context2.next = 15;\n            return estimateSecondsBetweenBlocks();\n\n          case 15:\n            secondsBetweenBlocks = _context2.sent;\n            DEFAULT_BLOCK_TIMES_FALLBACK[chainId] = {\n              synced: true,\n              secondsBetweenBlocks: secondsBetweenBlocks\n            };\n            _context2.next = 22;\n            break;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.t0 = _context2[\"catch\"](12);\n            secondsBetweenBlocks = DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks;\n\n          case 22:\n            console.log(\"Seconds until block\", secondsUntil);\n            blocksUntil = Math.ceil(secondsUntil / secondsBetweenBlocks);\n            return _context2.abrupt(\"return\", latestBlock.number + blocksUntil);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[12, 19]]);\n  }));\n  return _estimateBlockAtTime.apply(this, arguments);\n}\n/**\r\n * Create a standard crypto token or crypto currency.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getTokenModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nvar TokenModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(TokenModule, _ModuleWithRoles);\n\n  function TokenModule() {\n    return _ModuleWithRoles.apply(this, arguments) || this;\n  }\n\n  var _proto = TokenModule.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return TokenModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return Coin__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return TokenModule.moduleType;\n  };\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getCurrencyMetadata(this.providerOrSigner, this.address);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function get() {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }();\n\n  _proto.getValue = /*#__PURE__*/function () {\n    var _getValue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(value) {\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getCurrencyValue(this.providerOrSigner, this.address, BigNumber.from(value));\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getValue(_x) {\n      return _getValue.apply(this, arguments);\n    }\n\n    return getValue;\n  }();\n\n  _proto.totalSupply = /*#__PURE__*/function () {\n    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.readOnlyContract.totalSupply();\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function totalSupply() {\n      return _totalSupply.apply(this, arguments);\n    }\n\n    return totalSupply;\n  }();\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = this;\n              _context4.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context4.t1 = _context4.sent;\n              _context4.next = 6;\n              return _context4.t0.balanceOf.call(_context4.t0, _context4.t1);\n\n            case 6:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function balance() {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }()\n  /**\r\n   * Get Token Balance\r\n   *\r\n   * @remarks Get a wallets token balance.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check token balance\r\n   * const address = \"{{wallet_address}}\";\r\n   *\r\n   * const balance = await module.balanceOf(address);\r\n   * console.log(balance);\r\n   * ```\r\n   *\r\n   * @returns The balance of a specific wallet.\r\n   */\n  ;\n\n  _proto.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address) {\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = this;\n              _context5.next = 3;\n              return this.readOnlyContract.balanceOf(address);\n\n            case 3:\n              _context5.t1 = _context5.sent;\n              _context5.next = 6;\n              return _context5.t0.getValue.call(_context5.t0, _context5.t1);\n\n            case 6:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function balanceOf(_x2) {\n      return _balanceOf.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }();\n\n  _proto.allowance = /*#__PURE__*/function () {\n    var _allowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(spender) {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.t0 = this;\n              _context6.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context6.t1 = _context6.sent;\n              _context6.t2 = spender;\n              _context6.next = 7;\n              return _context6.t0.allowanceOf.call(_context6.t0, _context6.t1, _context6.t2);\n\n            case 7:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function allowance(_x3) {\n      return _allowance.apply(this, arguments);\n    }\n\n    return allowance;\n  }()\n  /**\r\n   * Get Token Allowance\r\n   *\r\n   * @remarks Get the allowance of one wallet over another's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the connected wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet who owns the funds\r\n   * const address = \"{{wallet_address}}\";\r\n   *\r\n   * // Address of the wallet to check token allowance\r\n   * const otherAddress = \"0x...\";\r\n   *\r\n   * const allowance = await module.allowanceOf(address, otherAddress);\r\n   * console.log(allowance);\r\n   * ```\r\n   *\r\n   * @returns The allowance of one wallet over anothers funds.\r\n   */\n  ;\n\n  _proto.allowanceOf = /*#__PURE__*/function () {\n    var _allowanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(owner, spender) {\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.readOnlyContract.allowance(owner, spender);\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function allowanceOf(_x4, _x5) {\n      return _allowanceOf.apply(this, arguments);\n    }\n\n    return allowanceOf;\n  }()\n  /**\r\n   * Get your wallet voting power for the current checkpoints\r\n   *\r\n   * @returns the amount of voting power in tokens\r\n   */\n  ;\n\n  _proto.getVoteBalance = /*#__PURE__*/function () {\n    var _getVoteBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.t0 = this;\n              _context8.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context8.t1 = _context8.sent;\n              _context8.next = 6;\n              return _context8.t0.getVoteBalanceOf.call(_context8.t0, _context8.t1);\n\n            case 6:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getVoteBalance() {\n      return _getVoteBalance.apply(this, arguments);\n    }\n\n    return getVoteBalance;\n  }();\n\n  _proto.getVoteBalanceOf = /*#__PURE__*/function () {\n    var _getVoteBalanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(account) {\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.readOnlyContract.getVotes(account);\n\n            case 2:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getVoteBalanceOf(_x6) {\n      return _getVoteBalanceOf.apply(this, arguments);\n    }\n\n    return getVoteBalanceOf;\n  }()\n  /**\r\n   * Get your voting delegatee address\r\n   *\r\n   * @returns the address of your vote delegatee\r\n   */\n  ;\n\n  _proto.getDelegation = /*#__PURE__*/function () {\n    var _getDelegation = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10() {\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.t0 = this;\n              _context10.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context10.t1 = _context10.sent;\n              _context10.next = 6;\n              return _context10.t0.getDelegationOf.call(_context10.t0, _context10.t1);\n\n            case 6:\n              return _context10.abrupt(\"return\", _context10.sent);\n\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function getDelegation() {\n      return _getDelegation.apply(this, arguments);\n    }\n\n    return getDelegation;\n  }();\n\n  _proto.getDelegationOf = /*#__PURE__*/function () {\n    var _getDelegationOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(account) {\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.readOnlyContract.delegates(account);\n\n            case 2:\n              return _context11.abrupt(\"return\", _context11.sent);\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function getDelegationOf(_x7) {\n      return _getDelegationOf.apply(this, arguments);\n    }\n\n    return getDelegationOf;\n  }()\n  /**\r\n   * Lets you delegate your voting power to the delegateeAddress\r\n   *\r\n   * @param delegateeAddress - delegatee wallet address\r\n   * @alpha\r\n   */\n  ;\n\n  _proto.delegateTo = /*#__PURE__*/function () {\n    var _delegateTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(delegateeAddress) {\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.sendTransaction(\"delegate\", [delegateeAddress]);\n\n            case 2:\n              return _context12.abrupt(\"return\", _context12.sent);\n\n            case 3:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function delegateTo(_x8) {\n      return _delegateTo.apply(this, arguments);\n    }\n\n    return delegateTo;\n  }()\n  /**\r\n   * Transfer Tokens\r\n   *\r\n   * @remarks Transfer tokens from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the tokens to\r\n   * const toAddress = \"0x...\";\r\n   *\r\n   * // The amount of tokens you want to send\r\n   * const amount = 0;\r\n   *\r\n   * await module.transfer(toAddress, amount);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transfer = /*#__PURE__*/function () {\n    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(to, amount) {\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.isTransferRestricted();\n\n            case 2:\n              if (!_context13.sent) {\n                _context13.next = 4;\n                break;\n              }\n\n              throw new RestrictedTransferError(this.address);\n\n            case 4:\n              _context13.next = 6;\n              return this.sendTransaction(\"transfer\", [to, amount]);\n\n            case 6:\n              return _context13.abrupt(\"return\", _context13.sent);\n\n            case 7:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function transfer(_x9, _x10) {\n      return _transfer.apply(this, arguments);\n    }\n\n    return transfer;\n  }();\n\n  _proto.setAllowance = /*#__PURE__*/function () {\n    var _setAllowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(spender, amount) {\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.sendTransaction(\"approve\", [spender, amount]);\n\n            case 2:\n              return _context14.abrupt(\"return\", _context14.sent);\n\n            case 3:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function setAllowance(_x11, _x12) {\n      return _setAllowance.apply(this, arguments);\n    }\n\n    return setAllowance;\n  }() // owner functions\n  ;\n\n  _proto.mint = /*#__PURE__*/function () {\n    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(amount) {\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.t0 = this;\n              _context15.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context15.t1 = _context15.sent;\n              _context15.t2 = amount;\n              _context15.next = 7;\n              return _context15.t0.mintTo.call(_context15.t0, _context15.t1, _context15.t2);\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function mint(_x13) {\n      return _mint.apply(this, arguments);\n    }\n\n    return mint;\n  }()\n  /**\r\n   * Mint Tokens\r\n   *\r\n   * @remarks Mint tokens to a specified address\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to mint the tokens to\r\n   * const toAddress = \"{{wallet_address}}\";\r\n   *\r\n   * // The amount of this token you want to mint\r\n   * const amount = ethers.utils.parseEther(\"1.5\");\r\n   *\r\n   * await module.mintTo(toAddress, amount);\r\n   * ```\r\n   */\n  ;\n\n  _proto.mintTo = /*#__PURE__*/function () {\n    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(to, amount) {\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.sendTransaction(\"mint\", [to, amount]);\n\n            case 2:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function mintTo(_x14, _x15) {\n      return _mintTo.apply(this, arguments);\n    }\n\n    return mintTo;\n  }()\n  /**\r\n   * Mint Tokens To Many Wallets\r\n   *\r\n   * @remarks Mint tokens to many different wallets\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data of the tokens you want to mint\r\n   * const data = [\r\n   *   {\r\n   *     address: \"{{wallet_address}}\", // Address to mint tokens to\r\n   *     amount: 100, // How many tokens to mint to specified address\r\n   *   },\r\n   *  {\r\n   *    address: \"0x...\",\r\n   *    amount: 100,\r\n   *  }\r\n   * ]\r\n   *\r\n   * await module.mintBatchTo(data);\r\n   * ```\r\n   */\n  ;\n\n  _proto.mintBatchTo = /*#__PURE__*/function () {\n    var _mintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(args) {\n      var encoded, _iterator, _step, arg;\n\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              encoded = [];\n\n              for (_iterator = _createForOfIteratorHelperLoose(args); !(_step = _iterator()).done;) {\n                arg = _step.value;\n                encoded.push(this.contract[\"interface\"].encodeFunctionData(\"mint\", [arg.address, arg.amount]));\n              }\n\n              _context17.next = 4;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 4:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function mintBatchTo(_x16) {\n      return _mintBatchTo.apply(this, arguments);\n    }\n\n    return mintBatchTo;\n  }()\n  /**\r\n   * Lets you get a all token holders and their corresponding balances\r\n   * @beta - This can be very slow for large numbers of token holders\r\n   * @param queryParams - Optional query params\r\n   * @returns - A JSON object of all token holders and their corresponding balances\r\n   */\n  ;\n\n  _proto.getAllHolderBalances = /*#__PURE__*/function () {\n    var _getAllHolderBalances = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18() {\n      var a, txns, balances;\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.contract.queryFilter(this.contract.filters.Transfer());\n\n            case 2:\n              a = _context18.sent;\n              txns = a.map(function (b) {\n                return b.args;\n              });\n              balances = {};\n              txns.forEach(function (item) {\n                var from = item.from;\n                var to = item.to;\n                var amount = item.value;\n\n                if (!(from === AddressZero)) {\n                  if (!(from in balances)) {\n                    balances[from] = BigNumber.from(0);\n                  }\n\n                  balances[from] = balances[from].sub(amount);\n                }\n\n                if (!(to === AddressZero)) {\n                  if (!(to in balances)) {\n                    balances[to] = BigNumber.from(0);\n                  }\n\n                  balances[to] = balances[to].add(amount);\n                }\n              });\n              return _context18.abrupt(\"return\", balances);\n\n            case 7:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function getAllHolderBalances() {\n      return _getAllHolderBalances.apply(this, arguments);\n    }\n\n    return getAllHolderBalances;\n  }()\n  /**\r\n   * Burn Tokens\r\n   *\r\n   * @remarks Burn tokens held by the connected wallet\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The amount of this token you want to burn\r\n   * const amount = 100;\r\n   *\r\n   * await module.burn(amount);\r\n   * ```\r\n   */\n  ;\n\n  _proto.burn = /*#__PURE__*/function () {\n    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(amount) {\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.sendTransaction(\"burn\", [amount]);\n\n            case 2:\n              return _context19.abrupt(\"return\", _context19.sent);\n\n            case 3:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function burn(_x17) {\n      return _burn.apply(this, arguments);\n    }\n\n    return burn;\n  }();\n\n  _proto.burnFrom = /*#__PURE__*/function () {\n    var _burnFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(from, amount) {\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this.sendTransaction(\"burnFrom\", [from, amount]);\n\n            case 2:\n              return _context20.abrupt(\"return\", _context20.sent);\n\n            case 3:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function burnFrom(_x18, _x19) {\n      return _burnFrom.apply(this, arguments);\n    }\n\n    return burnFrom;\n  }()\n  /**\r\n   * Transfer Tokens From Address\r\n   *\r\n   * @remarks Transfer tokens from one wallet to another\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet sending the tokens\r\n   * const fromAddress = \"{{wallet_address}}\";\r\n   * // Address of the wallet you want to send the tokens to\r\n   * const toAddress = \"0x...\";\r\n   * // The number of tokens you want to send\r\n   * const amount = 100\r\n   *\r\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\r\n   * await module.transferFrom(fromAddress, toAddress, amount);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transferFrom = /*#__PURE__*/function () {\n    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(from, to, amount) {\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.sendTransaction(\"transferFrom\", [from, to, amount]);\n\n            case 2:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 3:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function transferFrom(_x20, _x21, _x22) {\n      return _transferFrom.apply(this, arguments);\n    }\n\n    return transferFrom;\n  }();\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context22.sent;\n              _context22.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context22.abrupt(\"return\", _context22.sent);\n\n            case 6:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function setModuleMetadata(_x23) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }();\n\n  _proto.transferBatch = /*#__PURE__*/function () {\n    var _transferBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(args) {\n      var _this = this;\n\n      var encoded;\n      return runtime_1.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              encoded = args.map(function (arg) {\n                return _this.contract[\"interface\"].encodeFunctionData(\"transfer\", [arg.address, arg.amount]);\n              });\n              _context23.next = 3;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 3:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function transferBatch(_x24) {\n      return _transferBatch.apply(this, arguments);\n    }\n\n    return transferBatch;\n  }();\n\n  _proto.transferFromBatch = /*#__PURE__*/function () {\n    var _transferFromBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(args) {\n      var _this2 = this;\n\n      var encoded;\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              encoded = args.map(function (arg) {\n                return _this2.contract[\"interface\"].encodeFunctionData(\"transferFrom\", [arg.fromAddress, arg.address, arg.amount]);\n              });\n              _context24.next = 3;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 3:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this);\n    }));\n\n    function transferFromBatch(_x25) {\n      return _transferFromBatch.apply(this, arguments);\n    }\n\n    return transferFromBatch;\n  }();\n\n  _proto.isTransferRestricted = /*#__PURE__*/function () {\n    var _isTransferRestricted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25() {\n      return runtime_1.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              return _context25.abrupt(\"return\", this.readOnlyContract.transfersRestricted());\n\n            case 1:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25, this);\n    }));\n\n    function isTransferRestricted() {\n      return _isTransferRestricted.apply(this, arguments);\n    }\n\n    return isTransferRestricted;\n  }();\n\n  _proto.setRestrictedTransfer = /*#__PURE__*/function () {\n    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(restricted) {\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              if (restricted === void 0) {\n                restricted = false;\n              }\n\n              _context26.t0 = this;\n              _context26.t1 = [\"admin\"];\n              _context26.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context26.t2 = _context26.sent;\n              _context26.next = 8;\n              return _context26.t0.onlyRoles.call(_context26.t0, _context26.t1, _context26.t2);\n\n            case 8:\n              _context26.next = 10;\n              return this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n\n            case 10:\n              return _context26.abrupt(\"return\", _context26.sent);\n\n            case 11:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26, this);\n    }));\n\n    function setRestrictedTransfer(_x26) {\n      return _setRestrictedTransfer.apply(this, arguments);\n    }\n\n    return setRestrictedTransfer;\n  }();\n\n  return TokenModule;\n}(ModuleWithRoles);\n/**\r\n * @deprecated - see {@link TokenModule}\r\n */\n\n\nTokenModule.moduleType = ModuleType.CURRENCY;\nTokenModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];\n\nvar CurrencyModule = /*#__PURE__*/function (_TokenModule) {\n  _inheritsLoose(CurrencyModule, _TokenModule);\n\n  function CurrencyModule() {\n    return _TokenModule.apply(this, arguments) || this;\n  }\n\n  return CurrencyModule;\n}(TokenModule);\n/**\r\n * Access this module by calling {@link ThirdwebSDK.getAppModule}\r\n * @public\r\n */\n\n\nvar AppModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(AppModule, _ModuleWithRoles);\n\n  function AppModule() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ModuleWithRoles.call.apply(_ModuleWithRoles, [this].concat(args)) || this;\n    _this._shouldCheckVersion = true;\n    _this._isV1 = false;\n    _this.jsonConvert = new JsonConvert();\n    _this.moduleType = -1;\n    return _this;\n  }\n\n  var _proto = AppModule.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return CurrencyModule.roles;\n  }\n  /**\r\n   * The internal module type for the app module.\r\n   * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.\r\n   * @internal\r\n   * @readonly\r\n   */\n  ;\n  /**\r\n   * @internal\r\n   */\n\n\n  _proto.connectContract = function connectContract() {\n    return ProtocolControl__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return this.moduleType;\n  }\n  /**\r\n   * @internal\r\n   *\r\n   */\n  ;\n\n  _proto.getModuleAddress = /*#__PURE__*/function () {\n    var _getModuleAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(moduleType) {\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.readOnlyContract.getAllModulesOfType(moduleType);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getModuleAddress(_x) {\n      return _getModuleAddress.apply(this, arguments);\n    }\n\n    return getModuleAddress;\n  }();\n\n  _proto.getNFTAddress = /*#__PURE__*/function () {\n    var _getNFTAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.getModuleAddress(ModuleType.NFT));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getNFTAddress() {\n      return _getNFTAddress.apply(this, arguments);\n    }\n\n    return getNFTAddress;\n  }();\n\n  _proto.getBundleAddress = /*#__PURE__*/function () {\n    var _getBundleAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.getModuleAddress(ModuleType.BUNDLE));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getBundleAddress() {\n      return _getBundleAddress.apply(this, arguments);\n    }\n\n    return getBundleAddress;\n  }();\n\n  _proto.getPackAddress = /*#__PURE__*/function () {\n    var _getPackAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", this.getModuleAddress(ModuleType.PACK));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getPackAddress() {\n      return _getPackAddress.apply(this, arguments);\n    }\n\n    return getPackAddress;\n  }();\n\n  _proto.getCurrencyAddress = /*#__PURE__*/function () {\n    var _getCurrencyAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this.getModuleAddress(ModuleType.CURRENCY));\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getCurrencyAddress() {\n      return _getCurrencyAddress.apply(this, arguments);\n    }\n\n    return getCurrencyAddress;\n  }();\n\n  _proto.getMarketAddress = /*#__PURE__*/function () {\n    var _getMarketAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", this.getModuleAddress(ModuleType.MARKET));\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function getMarketAddress() {\n      return _getMarketAddress.apply(this, arguments);\n    }\n\n    return getMarketAddress;\n  }();\n\n  _proto.getDropAddress = /*#__PURE__*/function () {\n    var _getDropAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", this.getModuleAddress(ModuleType.DROP));\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getDropAddress() {\n      return _getDropAddress.apply(this, arguments);\n    }\n\n    return getDropAddress;\n  }();\n\n  _proto.getDatastoreAddress = /*#__PURE__*/function () {\n    var _getDatastoreAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", this.getModuleAddress(ModuleType.DATASTORE));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getDatastoreAddress() {\n      return _getDatastoreAddress.apply(this, arguments);\n    }\n\n    return getDatastoreAddress;\n  }();\n\n  _proto.getRoyaltyTreasury = /*#__PURE__*/function () {\n    var _getRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(address) {\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.readOnlyContract.getRoyaltyTreasury(address || AddressZero);\n\n            case 2:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getRoyaltyTreasury(_x2) {\n      return _getRoyaltyTreasury.apply(this, arguments);\n    }\n\n    return getRoyaltyTreasury;\n  }()\n  /**\r\n   * @internal\r\n   * @param addresses - The addresses of the modules to get metadata for.\r\n   */\n  ;\n\n  _proto.getAllContractMetadata = /*#__PURE__*/function () {\n    var _getAllContractMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(addresses, resolveGateway) {\n      var _this2 = this;\n\n      var metadatas;\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (resolveGateway === void 0) {\n                resolveGateway = true;\n              }\n\n              _context10.next = 3;\n              return Promise.all(addresses.map(function (address) {\n                return getContractMetadata(_this2.providerOrSigner, address, _this2.sdk.getStorage(), resolveGateway);\n              }));\n\n            case 3:\n              metadatas = _context10.sent;\n              return _context10.abrupt(\"return\", addresses.filter(function (d) {\n                return d;\n              }).map(function (address, i) {\n                return {\n                  address: address,\n                  metadata: metadatas[i]\n                };\n              }));\n\n            case 5:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    function getAllContractMetadata(_x3, _x4) {\n      return _getAllContractMetadata.apply(this, arguments);\n    }\n\n    return getAllContractMetadata;\n  }()\n  /**\r\n   * Method to get a list of pack module metadata.\r\n   * @returns A promise of an array of Pack modules.\r\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\r\n   */\n  ;\n\n  _proto.getPackModules = /*#__PURE__*/function () {\n    var _getPackModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.t0 = this;\n              _context11.next = 3;\n              return this.getPackAddress();\n\n            case 3:\n              _context11.t1 = _context11.sent;\n              _context11.next = 6;\n              return _context11.t0.getAllContractMetadata.call(_context11.t0, _context11.t1);\n\n            case 6:\n              return _context11.abrupt(\"return\", _context11.sent.map(function (m) {\n                return _extends({}, m, {\n                  type: ModuleType.PACK\n                });\n              }));\n\n            case 7:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function getPackModules() {\n      return _getPackModules.apply(this, arguments);\n    }\n\n    return getPackModules;\n  }()\n  /**\r\n   * Method to get a list of NFT module metadata.\r\n   * @returns A promise of an array of NFT modules.\r\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\r\n   */\n  ;\n\n  _proto.getNFTModules = /*#__PURE__*/function () {\n    var _getNFTModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.t0 = this;\n              _context12.next = 3;\n              return this.getNFTAddress();\n\n            case 3:\n              _context12.t1 = _context12.sent;\n              _context12.next = 6;\n              return _context12.t0.getAllContractMetadata.call(_context12.t0, _context12.t1);\n\n            case 6:\n              return _context12.abrupt(\"return\", _context12.sent.map(function (m) {\n                return _extends({}, m, {\n                  type: ModuleType.NFT\n                });\n              }));\n\n            case 7:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function getNFTModules() {\n      return _getNFTModules.apply(this, arguments);\n    }\n\n    return getNFTModules;\n  }()\n  /**\r\n   * Method to get a list of Bundle module metadata.\r\n   * @returns A promise of an array of Bundle modules.\r\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\r\n   */\n  ;\n\n  _proto.getCollectionModules = /*#__PURE__*/function () {\n    var _getCollectionModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.getBundleModules();\n\n            case 2:\n              return _context13.abrupt(\"return\", _context13.sent);\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getCollectionModules() {\n      return _getCollectionModules.apply(this, arguments);\n    }\n\n    return getCollectionModules;\n  }();\n\n  _proto.getBundleModules = /*#__PURE__*/function () {\n    var _getBundleModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.t0 = this;\n              _context14.next = 3;\n              return this.getBundleAddress();\n\n            case 3:\n              _context14.t1 = _context14.sent;\n              _context14.next = 6;\n              return _context14.t0.getAllContractMetadata.call(_context14.t0, _context14.t1);\n\n            case 6:\n              return _context14.abrupt(\"return\", _context14.sent.map(function (m) {\n                return _extends({}, m, {\n                  type: ModuleType.BUNDLE\n                });\n              }));\n\n            case 7:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function getBundleModules() {\n      return _getBundleModules.apply(this, arguments);\n    }\n\n    return getBundleModules;\n  }()\n  /**\r\n   * Method to get a list of Currency module metadata.\r\n   * @returns A promise of an array of Currency modules.\r\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\r\n   */\n  ;\n\n  _proto.getCurrencyModules = /*#__PURE__*/function () {\n    var _getCurrencyModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15() {\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.t0 = this;\n              _context15.next = 3;\n              return this.getCurrencyAddress();\n\n            case 3:\n              _context15.t1 = _context15.sent;\n              _context15.next = 6;\n              return _context15.t0.getAllContractMetadata.call(_context15.t0, _context15.t1);\n\n            case 6:\n              return _context15.abrupt(\"return\", _context15.sent.map(function (m) {\n                return _extends({}, m, {\n                  type: ModuleType.CURRENCY\n                });\n              }));\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function getCurrencyModules() {\n      return _getCurrencyModules.apply(this, arguments);\n    }\n\n    return getCurrencyModules;\n  }()\n  /**\r\n   * Method to get a list of Datastore module metadata.\r\n   * @alpha\r\n   * @returns A promise of an array of Datastore modules.\r\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\r\n   */\n  ;\n\n  _proto.getDatastoreModules = /*#__PURE__*/function () {\n    var _getDatastoreModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16() {\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.t0 = this;\n              _context16.next = 3;\n              return this.getDatastoreAddress();\n\n            case 3:\n              _context16.t1 = _context16.sent;\n              _context16.next = 6;\n              return _context16.t0.getAllContractMetadata.call(_context16.t0, _context16.t1);\n\n            case 6:\n              return _context16.abrupt(\"return\", _context16.sent.map(function (m) {\n                return _extends({}, m, {\n                  type: ModuleType.DATASTORE\n                });\n              }));\n\n            case 7:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function getDatastoreModules() {\n      return _getDatastoreModules.apply(this, arguments);\n    }\n\n    return getDatastoreModules;\n  }()\n  /**\r\n   * Method to get a list of Market module metadata.\r\n   * @returns A promise of an array of Market modules.\r\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\r\n   */\n  ;\n\n  _proto.getMarketModules = /*#__PURE__*/function () {\n    var _getMarketModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17() {\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.t0 = this;\n              _context17.next = 3;\n              return this.getMarketAddress();\n\n            case 3:\n              _context17.t1 = _context17.sent;\n              _context17.next = 6;\n              return _context17.t0.getAllContractMetadata.call(_context17.t0, _context17.t1);\n\n            case 6:\n              return _context17.abrupt(\"return\", _context17.sent.map(function (m) {\n                return _extends({}, m, {\n                  type: ModuleType.MARKET\n                });\n              }));\n\n            case 7:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function getMarketModules() {\n      return _getMarketModules.apply(this, arguments);\n    }\n\n    return getMarketModules;\n  }()\n  /**\r\n   * Method to get a list of Drop module metadata.\r\n   * @returns A promise of an array of Drop modules.\r\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\r\n   */\n  ;\n\n  _proto.getDropModules = /*#__PURE__*/function () {\n    var _getDropModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18() {\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.t0 = this;\n              _context18.next = 3;\n              return this.getDropAddress();\n\n            case 3:\n              _context18.t1 = _context18.sent;\n              _context18.next = 6;\n              return _context18.t0.getAllContractMetadata.call(_context18.t0, _context18.t1);\n\n            case 6:\n              return _context18.abrupt(\"return\", _context18.sent.map(function (m) {\n                return _extends({}, m, {\n                  type: ModuleType.DROP\n                });\n              }));\n\n            case 7:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function getDropModules() {\n      return _getDropModules.apply(this, arguments);\n    }\n\n    return getDropModules;\n  }()\n  /**\r\n   * Method to get a list of all module metadata on a given app.\r\n   * @public\r\n   * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.\r\n   * @returns Array of module metadata\r\n   */\n  ;\n\n  _proto.getAllModuleMetadata = /*#__PURE__*/function () {\n    var _getAllModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(filterByModuleType, resolveGateway) {\n      var _this3 = this;\n\n      var moduleTypesToGet;\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              if (resolveGateway === void 0) {\n                resolveGateway = true;\n              }\n\n              moduleTypesToGet = filterByModuleType || [ModuleType.NFT, ModuleType.BUNDLE, ModuleType.PACK, ModuleType.TOKEN, ModuleType.MARKET, ModuleType.DATASTORE, ModuleType.DROP, ModuleType.BUNDLE_DROP, ModuleType.VOTE];\n              _context20.next = 4;\n              return Promise.all(moduleTypesToGet.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(moduleType) {\n                  var moduleAddresses;\n                  return runtime_1.wrap(function _callee19$(_context19) {\n                    while (1) {\n                      switch (_context19.prev = _context19.next) {\n                        case 0:\n                          _context19.next = 2;\n                          return _this3.getModuleAddress(moduleType);\n\n                        case 2:\n                          moduleAddresses = _context19.sent;\n                          _context19.next = 5;\n                          return _this3.getAllContractMetadata(moduleAddresses, resolveGateway);\n\n                        case 5:\n                          return _context19.abrupt(\"return\", _context19.sent.map(function (m) {\n                            return _extends({}, m, {\n                              type: moduleType\n                            });\n                          }));\n\n                        case 6:\n                        case \"end\":\n                          return _context19.stop();\n                      }\n                    }\n                  }, _callee19);\n                }));\n\n                return function (_x7) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n\n            case 4:\n              return _context20.abrupt(\"return\", _context20.sent.reduce(function (acc, curr) {\n                return acc.concat(curr);\n              }, []));\n\n            case 5:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }));\n\n    function getAllModuleMetadata(_x5, _x6) {\n      return _getAllModuleMetadata.apply(this, arguments);\n    }\n\n    return getAllModuleMetadata;\n  }()\n  /**\r\n   * Trusted forwarder is used to forward gasless transactions. Trusted Forwarder of each module cannot be changed once it is deployed.\r\n   *\r\n   * @returns The address of the trusted forwarder contract\r\n   */\n  ;\n\n  _proto.getForwarder = /*#__PURE__*/function () {\n    var _getForwarder = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21() {\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.readOnlyContract.getForwarder();\n\n            case 2:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 3:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function getForwarder() {\n      return _getForwarder.apply(this, arguments);\n    }\n\n    return getForwarder;\n  }() // owner functions\n\n  /**\r\n   * Set trusted forwarder for the modules. Every module that is deployed after this call will use the new forwarder.\r\n   * Trusted forwarder is used to forward gasless transactions. Trusted Forwarder of each module cannot be changed once it is deployed.\r\n   *\r\n   * @param address - The address of the trusted forwarder contract\r\n   */\n  ;\n\n  _proto.setForwarder = /*#__PURE__*/function () {\n    var _setForwarder = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(address) {\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.contract.setForwarder(address);\n\n            case 2:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function setForwarder(_x8) {\n      return _setForwarder.apply(this, arguments);\n    }\n\n    return setForwarder;\n  }()\n  /**\r\n   * @deprecated - Use setMetadata() instead\r\n   */\n  ;\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context23.sent;\n              _context23.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context23.abrupt(\"return\", _context23.sent);\n\n            case 6:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function setModuleMetadata(_x9) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }();\n\n  _proto.setRoyaltyTreasury = /*#__PURE__*/function () {\n    var _setRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(treasury) {\n      var _e$message;\n\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.prev = 0;\n              _context24.next = 3;\n              return this.sendTransaction(\"setRoyaltyTreasury\", [treasury]);\n\n            case 3:\n              return _context24.abrupt(\"return\", _context24.sent);\n\n            case 6:\n              _context24.prev = 6;\n              _context24.t0 = _context24[\"catch\"](0);\n\n              if (!(_context24.t0 != null && (_e$message = _context24.t0.message) != null && _e$message.includes(\"provider shares too low\"))) {\n                _context24.next = 10;\n                break;\n              }\n\n              throw new Error(\"Missing thirdweb fees. Please set it to a Royalty Splits address, which can deployed using \\\"deployRoyaltySplitsModule({...})\\\".\");\n\n            case 10:\n              throw _context24.t0;\n\n            case 11:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this, [[0, 6]]);\n    }));\n\n    function setRoyaltyTreasury(_x10) {\n      return _setRoyaltyTreasury.apply(this, arguments);\n    }\n\n    return setRoyaltyTreasury;\n  }();\n\n  _proto.setModuleRoyaltyTreasury = /*#__PURE__*/function () {\n    var _setModuleRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(moduleAddress, treasury) {\n      var moduleContract, metadata, uri, _e$message2;\n\n      return runtime_1.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              // Note: connecting module address contract. Only need to access setContractURI abi\n              // any Interface with setContractURI can be used.\n              moduleContract = new Contract$1(moduleAddress, ProtocolControl__factory.createInterface(), this.providerOrSigner);\n              _context25.next = 3;\n              return getContractMetadata(this.providerOrSigner, moduleAddress, this.sdk.getStorage(), false);\n\n            case 3:\n              metadata = _context25.sent;\n              _context25.next = 6;\n              return this.sdk.getStorage().uploadMetadata(_extends({}, metadata, {\n                fee_recipient: treasury\n              }));\n\n            case 6:\n              uri = _context25.sent;\n              _context25.prev = 7;\n              _context25.next = 10;\n              return this.contract.callStatic.setModuleRoyaltyTreasury(moduleAddress, treasury);\n\n            case 10:\n              _context25.next = 12;\n              return moduleContract.callStatic.setContractURI(uri);\n\n            case 12:\n              _context25.next = 19;\n              break;\n\n            case 14:\n              _context25.prev = 14;\n              _context25.t0 = _context25[\"catch\"](7);\n\n              if (!(_context25.t0 != null && (_e$message2 = _context25.t0.message) != null && _e$message2.includes(\"provider shares too low\"))) {\n                _context25.next = 18;\n                break;\n              }\n\n              throw new Error(\"Missing thirdweb fees. Please set it to a Royalty Splits address, which can deployed using \\\"deployRoyaltySplitsModule({...})\\\".\");\n\n            case 18:\n              throw _context25.t0;\n\n            case 19:\n              _context25.next = 21;\n              return this.sendContractTransaction(moduleContract, \"setContractURI\", [uri]);\n\n            case 21:\n              _context25.next = 23;\n              return this.sendTransaction(\"setModuleRoyaltyTreasury\", [moduleAddress, treasury]);\n\n            case 23:\n              return _context25.abrupt(\"return\", _context25.sent);\n\n            case 24:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25, this, [[7, 14]]);\n    }));\n\n    function setModuleRoyaltyTreasury(_x11, _x12) {\n      return _setModuleRoyaltyTreasury.apply(this, arguments);\n    }\n\n    return setModuleRoyaltyTreasury;\n  }()\n  /**\r\n   * Checks to see if an address is either the current protocol\r\n   * control address, or a splits module address.\r\n   *\r\n   * @internal\r\n   * @param address - The address to check.\r\n   * @returns - True if the address is of this protocol control or if its a split module.\r\n   */\n  ;\n\n  _proto.isValidRoyaltyRecipient = /*#__PURE__*/function () {\n    var _isValidRoyaltyRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(address) {\n      var contract;\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              if (!(address.toLowerCase() === this.address.toLowerCase())) {\n                _context26.next = 2;\n                break;\n              }\n\n              return _context26.abrupt(\"return\", true);\n\n            case 2:\n              contract = this.sdk.getSplitsModule(address);\n              _context26.prev = 3;\n              _context26.next = 6;\n              return contract.balanceOf(this.address);\n\n            case 6:\n              return _context26.abrupt(\"return\", true);\n\n            case 9:\n              _context26.prev = 9;\n              _context26.t0 = _context26[\"catch\"](3);\n              return _context26.abrupt(\"return\", false);\n\n            case 12:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26, this, [[3, 9]]);\n    }));\n\n    function isValidRoyaltyRecipient(_x13) {\n      return _isValidRoyaltyRecipient.apply(this, arguments);\n    }\n\n    return isValidRoyaltyRecipient;\n  }();\n\n  _proto.withdrawFunds = /*#__PURE__*/function () {\n    var _withdrawFunds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(to, currency) {\n      var provider, lastTransaction, isNative, balance, bn, isV2, treasury, treasuryBalance, royalty;\n      return runtime_1.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              provider = this.readOnlyContract.provider;\n              lastTransaction = null;\n              isNative = isNativeToken(currency);\n\n              if (isNative) {\n                currency = ethers.constants.AddressZero;\n              } // should fetch for contract only, not treasury\n\n\n              _context27.next = 6;\n              return getCurrencyBalance(provider, currency, this.address);\n\n            case 6:\n              balance = _context27.sent;\n              bn = BigNumber.from(balance.value); // tries to withdraw from the project\n\n              if (!bn.gt(0)) {\n                _context27.next = 16;\n                break;\n              }\n\n              _context27.next = 11;\n              return this.isV1();\n\n            case 11:\n              isV2 = !_context27.sent;\n\n              if (!(isV2 || isNative)) {\n                _context27.next = 16;\n                break;\n              }\n\n              _context27.next = 15;\n              return this.sendTransaction(\"withdrawFunds\", [to, currency]);\n\n            case 15:\n              lastTransaction = _context27.sent;\n\n            case 16:\n              _context27.next = 18;\n              return this.getRoyaltyTreasury();\n\n            case 18:\n              treasury = _context27.sent;\n\n              if (!(treasury !== this.address)) {\n                _context27.next = 34;\n                break;\n              }\n\n              _context27.next = 22;\n              return getCurrencyBalance(provider, currency, treasury);\n\n            case 22:\n              treasuryBalance = _context27.sent;\n\n              if (!BigNumber.from(treasuryBalance.value).gt(0)) {\n                _context27.next = 34;\n                break;\n              }\n\n              royalty = Royalty__factory.connect(treasury, this.getSigner());\n\n              if (!isNative) {\n                _context27.next = 31;\n                break;\n              }\n\n              _context27.next = 28;\n              return this.sendContractTransaction(royalty, \"distribute()\", []);\n\n            case 28:\n              lastTransaction = _context27.sent;\n              _context27.next = 34;\n              break;\n\n            case 31:\n              _context27.next = 33;\n              return this.sendContractTransaction(royalty, \"distribute(address)\", [currency]);\n\n            case 33:\n              lastTransaction = _context27.sent;\n\n            case 34:\n              if (lastTransaction) {\n                _context27.next = 36;\n                break;\n              }\n\n              throw new Error(\"no funds to withdraw\");\n\n            case 36:\n              return _context27.abrupt(\"return\", lastTransaction);\n\n            case 37:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27, this);\n    }));\n\n    function withdrawFunds(_x14, _x15) {\n      return _withdrawFunds.apply(this, arguments);\n    }\n\n    return withdrawFunds;\n  }()\n  /**\r\n   * Helper method that handles `image` property uploads if its a file\r\n   *\r\n   * @param metadata - The metadata of the module to be deployed\r\n   * @returns - The sanitized metadata with an uploaded image ipfs hash\r\n   */\n  ;\n\n  _proto._prepareMetadata = /*#__PURE__*/function () {\n    var _prepareMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(metadata) {\n      return runtime_1.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              if (!(typeof metadata.image === \"string\")) {\n                _context28.next = 2;\n                break;\n              }\n\n              return _context28.abrupt(\"return\", Promise.resolve(metadata));\n\n            case 2:\n              if (!(metadata.image === undefined)) {\n                _context28.next = 4;\n                break;\n              }\n\n              return _context28.abrupt(\"return\", Promise.resolve(metadata));\n\n            case 4:\n              _context28.t0 = this.sdk.getStorage();\n              _context28.t1 = metadata.image;\n              _context28.t2 = this.address;\n              _context28.next = 9;\n              return this.getSignerAddress();\n\n            case 9:\n              _context28.t3 = _context28.sent;\n              _context28.next = 12;\n              return _context28.t0.upload.call(_context28.t0, _context28.t1, _context28.t2, _context28.t3);\n\n            case 12:\n              metadata.image = _context28.sent;\n              return _context28.abrupt(\"return\", Promise.resolve(metadata));\n\n            case 14:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28, this);\n    }));\n\n    function _prepareMetadata(_x16) {\n      return _prepareMetadata2.apply(this, arguments);\n    }\n\n    return _prepareMetadata;\n  }()\n  /**\r\n   * Helper method that deploys a module and returns its address\r\n   *\r\n   * @internal\r\n   *\r\n   * @param moduleType - The ModuleType to deploy\r\n   * @param args - Constructor arguments for the module\r\n   * @param factory - The ABI factory used to call the `deploy` method\r\n   * @returns The address of the deployed module\r\n   */\n  ;\n\n  _proto._deployModule = /*#__PURE__*/function () {\n    var _deployModule2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(moduleType, args, factory) {\n      var _ethers$ContractFacto;\n\n      var gasPrice, txOpts, tx, contractAddress, addModuleTx;\n      return runtime_1.wrap(function _callee29$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.t0 = this;\n              _context29.t1 = [\"admin\"];\n              _context29.next = 4;\n              return this.getSignerAddress();\n\n            case 4:\n              _context29.t2 = _context29.sent;\n              _context29.next = 7;\n              return _context29.t0.onlyRoles.call(_context29.t0, _context29.t1, _context29.t2);\n\n            case 7:\n              _context29.next = 9;\n              return this.sdk.getGasPrice();\n\n            case 9:\n              gasPrice = _context29.sent;\n              txOpts = gasPrice ? {\n                gasPrice: ethers.utils.parseUnits(gasPrice.toString(), \"gwei\")\n              } : {};\n              _context29.next = 13;\n              return (_ethers$ContractFacto = new ethers.ContractFactory(factory.abi, factory.bytecode).connect(this.signer)).deploy.apply(_ethers$ContractFacto, args.concat([txOpts]));\n\n            case 13:\n              tx = _context29.sent;\n              _context29.next = 16;\n              return tx.deployed();\n\n            case 16:\n              contractAddress = tx.address;\n              _context29.next = 19;\n              return this.contract.addModule(contractAddress, moduleType, txOpts);\n\n            case 19:\n              addModuleTx = _context29.sent;\n              _context29.next = 22;\n              return addModuleTx.wait();\n\n            case 22:\n              return _context29.abrupt(\"return\", contractAddress);\n\n            case 23:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee29, this);\n    }));\n\n    function _deployModule(_x17, _x18, _x19) {\n      return _deployModule2.apply(this, arguments);\n    }\n\n    return _deployModule;\n  }()\n  /**\r\n   * Throws an error if metadata is invalid\r\n   *\r\n   * @param metadata - The metadata to validate\r\n   */\n  ;\n\n  _proto.verifyMetadata = /*#__PURE__*/function () {\n    var _verifyMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(metadata) {\n      var shouldUpdateRecipient, isValidFeeRecipient;\n      return runtime_1.wrap(function _callee30$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              shouldUpdateRecipient = metadata.feeRecipient && metadata.feeRecipient !== this.address;\n              _context30.next = 3;\n              return this.isValidRoyaltyRecipient(metadata.feeRecipient ? metadata.feeRecipient : this.address);\n\n            case 3:\n              isValidFeeRecipient = _context30.sent;\n\n              if (!(shouldUpdateRecipient && !isValidFeeRecipient)) {\n                _context30.next = 6;\n                break;\n              }\n\n              throw new Error(\"Invalid fee recipient, can only be the Project address or a Splits module address\");\n\n            case 6:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, _callee30, this);\n    }));\n\n    function verifyMetadata(_x20) {\n      return _verifyMetadata.apply(this, arguments);\n    }\n\n    return verifyMetadata;\n  }()\n  /**\r\n   * Deploys a collection module.\r\n   *\r\n   * @param metadata - Metadata about the module.\r\n   * @returns A promise with the newly created module.\r\n   */\n  ;\n\n  _proto.deployBundleModule = /*#__PURE__*/function () {\n    var _deployBundleModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(metadata) {\n      var serializedMetadata, metadataUri, address;\n      return runtime_1.wrap(function _callee31$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              _context31.t0 = this.jsonConvert;\n              _context31.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context31.t1 = _context31.sent;\n              _context31.t2 = BundleModuleMetadata;\n              serializedMetadata = _context31.t0.serializeObject.call(_context31.t0, _context31.t1, _context31.t2);\n              _context31.next = 8;\n              return this.verifyMetadata(metadata);\n\n            case 8:\n              _context31.t3 = this.sdk.getStorage();\n              _context31.t4 = serializedMetadata;\n              _context31.t5 = this.address;\n              _context31.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context31.t6 = _context31.sent;\n              _context31.next = 16;\n              return _context31.t3.uploadMetadata.call(_context31.t3, _context31.t4, _context31.t5, _context31.t6);\n\n            case 16:\n              metadataUri = _context31.sent;\n              _context31.t7 = this;\n              _context31.t8 = ModuleType.COLLECTION;\n              _context31.t9 = this.address;\n              _context31.next = 22;\n              return this.getForwarder();\n\n            case 22:\n              _context31.t10 = _context31.sent;\n              _context31.t11 = metadataUri;\n              _context31.t12 = BigNumber.from(metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0);\n              _context31.t13 = [_context31.t9, _context31.t10, _context31.t11, _context31.t12];\n              _context31.t14 = NFTCollection__factory;\n              _context31.next = 29;\n              return _context31.t7._deployModule.call(_context31.t7, _context31.t8, _context31.t13, _context31.t14);\n\n            case 29:\n              address = _context31.sent;\n              _context31.t15 = metadata.feeRecipient;\n\n              if (!_context31.t15) {\n                _context31.next = 37;\n                break;\n              }\n\n              _context31.t16 = metadata.feeRecipient;\n              _context31.next = 35;\n              return this.getRoyaltyTreasury();\n\n            case 35:\n              _context31.t17 = _context31.sent;\n              _context31.t15 = _context31.t16 !== _context31.t17;\n\n            case 37:\n              if (!_context31.t15) {\n                _context31.next = 40;\n                break;\n              }\n\n              _context31.next = 40;\n              return this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n\n            case 40:\n              return _context31.abrupt(\"return\", this.sdk.getBundleModule(address));\n\n            case 41:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, _callee31, this);\n    }));\n\n    function deployBundleModule(_x21) {\n      return _deployBundleModule.apply(this, arguments);\n    }\n\n    return deployBundleModule;\n  }()\n  /**\r\n   * Deploys a Splits module\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed splits module\r\n   */\n  ;\n\n  _proto.deploySplitsModule = /*#__PURE__*/function () {\n    var _deploySplitsModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(metadata) {\n      var serializedMetadata, metadataUri, address;\n      return runtime_1.wrap(function _callee32$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.t0 = this.jsonConvert;\n              _context32.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context32.t1 = _context32.sent;\n              _context32.t2 = SplitsModuleMetadata;\n              serializedMetadata = _context32.t0.serializeObject.call(_context32.t0, _context32.t1, _context32.t2);\n              _context32.t3 = this.sdk.getStorage();\n              _context32.t4 = serializedMetadata;\n              _context32.t5 = this.address;\n              _context32.next = 11;\n              return this.getSignerAddress();\n\n            case 11:\n              _context32.t6 = _context32.sent;\n              _context32.next = 14;\n              return _context32.t3.uploadMetadata.call(_context32.t3, _context32.t4, _context32.t5, _context32.t6);\n\n            case 14:\n              metadataUri = _context32.sent;\n              _context32.t7 = this;\n              _context32.t8 = ModuleType.SPLITS;\n              _context32.t9 = this.address;\n              _context32.next = 20;\n              return this.getForwarder();\n\n            case 20:\n              _context32.t10 = _context32.sent;\n              _context32.t11 = metadataUri;\n              _context32.t12 = metadata.recipientSplits.map(function (s) {\n                return s.address;\n              });\n              _context32.t13 = metadata.recipientSplits.map(function (s) {\n                return s.shares;\n              });\n              _context32.t14 = [_context32.t9, _context32.t10, _context32.t11, _context32.t12, _context32.t13];\n              _context32.t15 = metadata.isRoyalty ? Royalty__factory : Splits__factory;\n              _context32.next = 28;\n              return _context32.t7._deployModule.call(_context32.t7, _context32.t8, _context32.t14, _context32.t15);\n\n            case 28:\n              address = _context32.sent;\n              return _context32.abrupt(\"return\", this.sdk.getSplitsModule(address));\n\n            case 30:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, _callee32, this);\n    }));\n\n    function deploySplitsModule(_x22) {\n      return _deploySplitsModule.apply(this, arguments);\n    }\n\n    return deploySplitsModule;\n  }()\n  /**\r\n   * Deploys a Royalty Splits module\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed splits module\r\n   */\n  ;\n\n  _proto.deployRoyaltySplitsModule = /*#__PURE__*/function () {\n    var _deployRoyaltySplitsModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(metadata) {\n      var serializedMetadata, metadataUri, address;\n      return runtime_1.wrap(function _callee33$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              metadata.isRoyalty = true;\n              _context33.t0 = this.jsonConvert;\n              _context33.next = 4;\n              return this._prepareMetadata(metadata);\n\n            case 4:\n              _context33.t1 = _context33.sent;\n              _context33.t2 = SplitsModuleMetadata;\n              serializedMetadata = _context33.t0.serializeObject.call(_context33.t0, _context33.t1, _context33.t2);\n              _context33.t3 = this.sdk.getStorage();\n              _context33.t4 = serializedMetadata;\n              _context33.t5 = this.address;\n              _context33.next = 12;\n              return this.getSignerAddress();\n\n            case 12:\n              _context33.t6 = _context33.sent;\n              _context33.next = 15;\n              return _context33.t3.uploadMetadata.call(_context33.t3, _context33.t4, _context33.t5, _context33.t6);\n\n            case 15:\n              metadataUri = _context33.sent;\n              _context33.t7 = this;\n              _context33.t8 = ModuleType.SPLITS;\n              _context33.t9 = this.address;\n              _context33.next = 21;\n              return this.getForwarder();\n\n            case 21:\n              _context33.t10 = _context33.sent;\n              _context33.t11 = metadataUri;\n              _context33.t12 = metadata.recipientSplits.map(function (s) {\n                return s.address;\n              });\n              _context33.t13 = metadata.recipientSplits.map(function (s) {\n                return s.shares;\n              });\n              _context33.t14 = [_context33.t9, _context33.t10, _context33.t11, _context33.t12, _context33.t13];\n              _context33.t15 = Royalty__factory;\n              _context33.next = 29;\n              return _context33.t7._deployModule.call(_context33.t7, _context33.t8, _context33.t14, _context33.t15);\n\n            case 29:\n              address = _context33.sent;\n              return _context33.abrupt(\"return\", this.sdk.getSplitsModule(address));\n\n            case 31:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, _callee33, this);\n    }));\n\n    function deployRoyaltySplitsModule(_x23) {\n      return _deployRoyaltySplitsModule.apply(this, arguments);\n    }\n\n    return deployRoyaltySplitsModule;\n  }()\n  /**\r\n   * Deploys a NFT module.\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed NFT module\r\n   */\n  ;\n\n  _proto.deployNftModule = /*#__PURE__*/function () {\n    var _deployNftModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34(metadata) {\n      var serializedMetadata, metadataUri, nativeTokenWrapperAddress, address;\n      return runtime_1.wrap(function _callee34$(_context34) {\n        while (1) {\n          switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.t0 = this.jsonConvert;\n              _context34.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context34.t1 = _context34.sent;\n              _context34.t2 = NftModuleMetadata;\n              serializedMetadata = _context34.t0.serializeObject.call(_context34.t0, _context34.t1, _context34.t2);\n              _context34.next = 8;\n              return this.verifyMetadata(metadata);\n\n            case 8:\n              _context34.t3 = this.sdk.getStorage();\n              _context34.t4 = serializedMetadata;\n              _context34.t5 = this.address;\n              _context34.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context34.t6 = _context34.sent;\n              _context34.next = 16;\n              return _context34.t3.uploadMetadata.call(_context34.t3, _context34.t4, _context34.t5, _context34.t6);\n\n            case 16:\n              metadataUri = _context34.sent;\n              _context34.t7 = getNativeTokenByChainId;\n              _context34.next = 20;\n              return this.getChainID();\n\n            case 20:\n              _context34.t8 = _context34.sent;\n              nativeTokenWrapperAddress = (0, _context34.t7)(_context34.t8).wrapped.address;\n              _context34.t9 = this;\n              _context34.t10 = ModuleType.NFT;\n              _context34.t11 = metadata.name;\n              _context34.t12 = metadata.symbol ? metadata.symbol : \"\";\n              _context34.t13 = metadataUri;\n              _context34.t14 = this.address;\n              _context34.next = 30;\n              return this.getForwarder();\n\n            case 30:\n              _context34.t15 = _context34.sent;\n              _context34.t16 = nativeTokenWrapperAddress;\n\n              if (!metadata.defaultSaleRecipientAddress) {\n                _context34.next = 36;\n                break;\n              }\n\n              _context34.t17 = metadata.defaultSaleRecipientAddress;\n              _context34.next = 39;\n              break;\n\n            case 36:\n              _context34.next = 38;\n              return this.getSignerAddress();\n\n            case 38:\n              _context34.t17 = _context34.sent;\n\n            case 39:\n              _context34.t18 = _context34.t17;\n              _context34.t19 = metadata.sellerFeeBasisPoints;\n              _context34.t20 = metadata.primarySaleFeeBasisPoints ? metadata.primarySaleFeeBasisPoints : 0;\n              _context34.t21 = [_context34.t11, _context34.t12, _context34.t13, _context34.t14, _context34.t15, _context34.t16, _context34.t18, _context34.t19, _context34.t20];\n              _context34.t22 = SignatureMint721__factory;\n              _context34.next = 46;\n              return _context34.t9._deployModule.call(_context34.t9, _context34.t10, _context34.t21, _context34.t22);\n\n            case 46:\n              address = _context34.sent;\n              _context34.t23 = metadata.feeRecipient;\n\n              if (!_context34.t23) {\n                _context34.next = 54;\n                break;\n              }\n\n              _context34.t24 = metadata.feeRecipient;\n              _context34.next = 52;\n              return this.getRoyaltyTreasury();\n\n            case 52:\n              _context34.t25 = _context34.sent;\n              _context34.t23 = _context34.t24 !== _context34.t25;\n\n            case 54:\n              if (!_context34.t23) {\n                _context34.next = 57;\n                break;\n              }\n\n              _context34.next = 57;\n              return this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n\n            case 57:\n              return _context34.abrupt(\"return\", this.sdk.getNFTModule(address));\n\n            case 58:\n            case \"end\":\n              return _context34.stop();\n          }\n        }\n      }, _callee34, this);\n    }));\n\n    function deployNftModule(_x24) {\n      return _deployNftModule.apply(this, arguments);\n    }\n\n    return deployNftModule;\n  }()\n  /**\r\n   * Deploys a currency module.\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed currency module\r\n   */\n  ;\n\n  _proto.deployCurrencyModule = /*#__PURE__*/function () {\n    var _deployCurrencyModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee35(metadata) {\n      var serializedMetadata, metadataUri, address;\n      return runtime_1.wrap(function _callee35$(_context35) {\n        while (1) {\n          switch (_context35.prev = _context35.next) {\n            case 0:\n              _context35.t0 = this.jsonConvert;\n              _context35.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context35.t1 = _context35.sent;\n              _context35.t2 = CurrencyModuleMetadata;\n              serializedMetadata = _context35.t0.serializeObject.call(_context35.t0, _context35.t1, _context35.t2);\n              _context35.t3 = this.sdk.getStorage();\n              _context35.t4 = serializedMetadata;\n              _context35.t5 = this.address;\n              _context35.next = 11;\n              return this.getSignerAddress();\n\n            case 11:\n              _context35.t6 = _context35.sent;\n              _context35.next = 14;\n              return _context35.t3.uploadMetadata.call(_context35.t3, _context35.t4, _context35.t5, _context35.t6);\n\n            case 14:\n              metadataUri = _context35.sent;\n              _context35.t7 = this;\n              _context35.t8 = ModuleType.CURRENCY;\n              _context35.t9 = this.address;\n              _context35.t10 = metadata.name;\n              _context35.t11 = metadata.symbol ? metadata.symbol : \"\";\n              _context35.next = 22;\n              return this.getForwarder();\n\n            case 22:\n              _context35.t12 = _context35.sent;\n              _context35.t13 = metadataUri;\n              _context35.t14 = [_context35.t9, _context35.t10, _context35.t11, _context35.t12, _context35.t13];\n              _context35.t15 = Coin__factory;\n              _context35.next = 28;\n              return _context35.t7._deployModule.call(_context35.t7, _context35.t8, _context35.t14, _context35.t15);\n\n            case 28:\n              address = _context35.sent;\n              return _context35.abrupt(\"return\", this.sdk.getCurrencyModule(address));\n\n            case 30:\n            case \"end\":\n              return _context35.stop();\n          }\n        }\n      }, _callee35, this);\n    }));\n\n    function deployCurrencyModule(_x25) {\n      return _deployCurrencyModule.apply(this, arguments);\n    }\n\n    return deployCurrencyModule;\n  }()\n  /**\r\n   * Deploys a token module.\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed currency module\r\n   */\n  ;\n\n  _proto.deployTokenModule = /*#__PURE__*/function () {\n    var _deployTokenModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee36(metadata) {\n      var serializedMetadata, metadataUri, address;\n      return runtime_1.wrap(function _callee36$(_context36) {\n        while (1) {\n          switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.t0 = this.jsonConvert;\n              _context36.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context36.t1 = _context36.sent;\n              _context36.t2 = CurrencyModuleMetadata;\n              serializedMetadata = _context36.t0.serializeObject.call(_context36.t0, _context36.t1, _context36.t2);\n              _context36.t3 = this.sdk.getStorage();\n              _context36.t4 = serializedMetadata;\n              _context36.t5 = this.address;\n              _context36.next = 11;\n              return this.getSignerAddress();\n\n            case 11:\n              _context36.t6 = _context36.sent;\n              _context36.next = 14;\n              return _context36.t3.uploadMetadata.call(_context36.t3, _context36.t4, _context36.t5, _context36.t6);\n\n            case 14:\n              metadataUri = _context36.sent;\n              _context36.t7 = this;\n              _context36.t8 = ModuleType.CURRENCY;\n              _context36.t9 = this.address;\n              _context36.t10 = metadata.name;\n              _context36.t11 = metadata.symbol ? metadata.symbol : \"\";\n              _context36.next = 22;\n              return this.getForwarder();\n\n            case 22:\n              _context36.t12 = _context36.sent;\n              _context36.t13 = metadataUri;\n              _context36.t14 = [_context36.t9, _context36.t10, _context36.t11, _context36.t12, _context36.t13];\n              _context36.t15 = Coin__factory;\n              _context36.next = 28;\n              return _context36.t7._deployModule.call(_context36.t7, _context36.t8, _context36.t14, _context36.t15);\n\n            case 28:\n              address = _context36.sent;\n              return _context36.abrupt(\"return\", this.sdk.getTokenModule(address));\n\n            case 30:\n            case \"end\":\n              return _context36.stop();\n          }\n        }\n      }, _callee36, this);\n    }));\n\n    function deployTokenModule(_x26) {\n      return _deployTokenModule.apply(this, arguments);\n    }\n\n    return deployTokenModule;\n  }()\n  /**\r\n   * Deploys a Marketplace module\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed Marketplace module\r\n   */\n  ;\n\n  _proto.deployMarketModule = /*#__PURE__*/function () {\n    var _deployMarketModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee37(metadata) {\n      var serializedMetadata, metadataUri, address;\n      return runtime_1.wrap(function _callee37$(_context37) {\n        while (1) {\n          switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.t0 = this.jsonConvert;\n              _context37.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context37.t1 = _context37.sent;\n              _context37.t2 = MarketModuleMetadata;\n              serializedMetadata = _context37.t0.serializeObject.call(_context37.t0, _context37.t1, _context37.t2);\n              _context37.t3 = this.sdk.getStorage();\n              _context37.t4 = serializedMetadata;\n              _context37.t5 = this.address;\n              _context37.next = 11;\n              return this.getSignerAddress();\n\n            case 11:\n              _context37.t6 = _context37.sent;\n              _context37.next = 14;\n              return _context37.t3.uploadMetadata.call(_context37.t3, _context37.t4, _context37.t5, _context37.t6);\n\n            case 14:\n              metadataUri = _context37.sent;\n              _context37.t7 = this;\n              _context37.t8 = ModuleType.MARKET;\n              _context37.t9 = this.address;\n              _context37.next = 20;\n              return this.getForwarder();\n\n            case 20:\n              _context37.t10 = _context37.sent;\n              _context37.t11 = metadataUri;\n              _context37.t12 = metadata.marketFeeBasisPoints ? metadata.marketFeeBasisPoints : 0;\n              _context37.t13 = [_context37.t9, _context37.t10, _context37.t11, _context37.t12];\n              _context37.t14 = Market__factory;\n              _context37.next = 27;\n              return _context37.t7._deployModule.call(_context37.t7, _context37.t8, _context37.t13, _context37.t14);\n\n            case 27:\n              address = _context37.sent;\n              return _context37.abrupt(\"return\", this.sdk.getMarketModule(address));\n\n            case 29:\n            case \"end\":\n              return _context37.stop();\n          }\n        }\n      }, _callee37, this);\n    }));\n\n    function deployMarketModule(_x27) {\n      return _deployMarketModule.apply(this, arguments);\n    }\n\n    return deployMarketModule;\n  }()\n  /**\r\n   * Deploys a Pack module\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed Pack module\r\n   */\n  ;\n\n  _proto.deployPackModule = /*#__PURE__*/function () {\n    var _deployPackModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee38(metadata) {\n      var serializedMetadata, metadataUri, chainId, _ChainlinkVrf$chainId, vrfCoordinator, linkTokenAddress, keyHash, fees, address;\n\n      return runtime_1.wrap(function _callee38$(_context38) {\n        while (1) {\n          switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.t0 = this.jsonConvert;\n              _context38.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context38.t1 = _context38.sent;\n              _context38.t2 = PackModuleMetadata;\n              serializedMetadata = _context38.t0.serializeObject.call(_context38.t0, _context38.t1, _context38.t2);\n              _context38.next = 8;\n              return this.verifyMetadata(metadata);\n\n            case 8:\n              _context38.t3 = this.sdk.getStorage();\n              _context38.t4 = serializedMetadata;\n              _context38.t5 = this.address;\n              _context38.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context38.t6 = _context38.sent;\n              _context38.next = 16;\n              return _context38.t3.uploadMetadata.call(_context38.t3, _context38.t4, _context38.t5, _context38.t6);\n\n            case 16:\n              metadataUri = _context38.sent;\n              _context38.next = 19;\n              return this.getChainID();\n\n            case 19:\n              chainId = _context38.sent;\n              _ChainlinkVrf$chainId = ChainlinkVrf[chainId], vrfCoordinator = _ChainlinkVrf$chainId.vrfCoordinator, linkTokenAddress = _ChainlinkVrf$chainId.linkTokenAddress, keyHash = _ChainlinkVrf$chainId.keyHash, fees = _ChainlinkVrf$chainId.fees;\n              _context38.t7 = this;\n              _context38.t8 = ModuleType.PACK;\n              _context38.t9 = this.address;\n              _context38.t10 = metadataUri;\n              _context38.t11 = vrfCoordinator;\n              _context38.t12 = linkTokenAddress;\n              _context38.t13 = keyHash;\n              _context38.t14 = fees;\n              _context38.next = 31;\n              return this.getForwarder();\n\n            case 31:\n              _context38.t15 = _context38.sent;\n              _context38.t16 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;\n              _context38.t17 = [_context38.t9, _context38.t10, _context38.t11, _context38.t12, _context38.t13, _context38.t14, _context38.t15, _context38.t16];\n              _context38.t18 = Pack__factory;\n              _context38.next = 37;\n              return _context38.t7._deployModule.call(_context38.t7, _context38.t8, _context38.t17, _context38.t18);\n\n            case 37:\n              address = _context38.sent;\n              _context38.t19 = metadata.feeRecipient;\n\n              if (!_context38.t19) {\n                _context38.next = 45;\n                break;\n              }\n\n              _context38.t20 = metadata.feeRecipient;\n              _context38.next = 43;\n              return this.getRoyaltyTreasury();\n\n            case 43:\n              _context38.t21 = _context38.sent;\n              _context38.t19 = _context38.t20 !== _context38.t21;\n\n            case 45:\n              if (!_context38.t19) {\n                _context38.next = 48;\n                break;\n              }\n\n              _context38.next = 48;\n              return this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n\n            case 48:\n              return _context38.abrupt(\"return\", this.sdk.getPackModule(address));\n\n            case 49:\n            case \"end\":\n              return _context38.stop();\n          }\n        }\n      }, _callee38, this);\n    }));\n\n    function deployPackModule(_x28) {\n      return _deployPackModule.apply(this, arguments);\n    }\n\n    return deployPackModule;\n  }()\n  /**\r\n   * Deploys a Drop module\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed Drop module\r\n   */\n  ;\n\n  _proto.deployDropModule = /*#__PURE__*/function () {\n    var _deployDropModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee39(metadata) {\n      var serializedMetadata, metadataUri, nativeTokenWrapperAddress, address;\n      return runtime_1.wrap(function _callee39$(_context39) {\n        while (1) {\n          switch (_context39.prev = _context39.next) {\n            case 0:\n              !(metadata.primarySaleRecipientAddress !== \"\" && isAddress(metadata.primarySaleRecipientAddress)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Primary sale recipient address must be specified and must be a valid address\") : invariant(false) : void 0;\n              _context39.t0 = this.jsonConvert;\n              _context39.next = 4;\n              return this._prepareMetadata(metadata);\n\n            case 4:\n              _context39.t1 = _context39.sent;\n              _context39.t2 = DropModuleMetadata;\n              serializedMetadata = _context39.t0.serializeObject.call(_context39.t0, _context39.t1, _context39.t2);\n              _context39.next = 9;\n              return this.verifyMetadata(metadata);\n\n            case 9:\n              _context39.t3 = this.sdk.getStorage();\n              _context39.t4 = serializedMetadata;\n              _context39.t5 = this.address;\n              _context39.next = 14;\n              return this.getSignerAddress();\n\n            case 14:\n              _context39.t6 = _context39.sent;\n              _context39.next = 17;\n              return _context39.t3.uploadMetadata.call(_context39.t3, _context39.t4, _context39.t5, _context39.t6);\n\n            case 17:\n              metadataUri = _context39.sent;\n              _context39.t7 = getNativeTokenByChainId;\n              _context39.next = 21;\n              return this.getChainID();\n\n            case 21:\n              _context39.t8 = _context39.sent;\n              nativeTokenWrapperAddress = (0, _context39.t7)(_context39.t8).wrapped.address;\n              _context39.t9 = this;\n              _context39.t10 = ModuleType.DROP;\n              _context39.t11 = metadata.name;\n              _context39.t12 = metadata.symbol ? metadata.symbol : \"\";\n              _context39.t13 = metadataUri;\n              _context39.t14 = this.address;\n              _context39.next = 31;\n              return this.getForwarder();\n\n            case 31:\n              _context39.t15 = _context39.sent;\n              _context39.t16 = nativeTokenWrapperAddress;\n              _context39.t17 = metadata.primarySaleRecipientAddress;\n              _context39.t18 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;\n              _context39.t19 = metadata.primarySaleFeeBasisPoints ? metadata.primarySaleFeeBasisPoints : 0;\n              _context39.t20 = [_context39.t11, _context39.t12, _context39.t13, _context39.t14, _context39.t15, _context39.t16, _context39.t17, _context39.t18, _context39.t19];\n              _context39.t21 = LazyMintERC721__factory;\n              _context39.next = 40;\n              return _context39.t9._deployModule.call(_context39.t9, _context39.t10, _context39.t20, _context39.t21);\n\n            case 40:\n              address = _context39.sent;\n              _context39.t22 = metadata.feeRecipient;\n\n              if (!_context39.t22) {\n                _context39.next = 48;\n                break;\n              }\n\n              _context39.t23 = metadata.feeRecipient;\n              _context39.next = 46;\n              return this.getRoyaltyTreasury();\n\n            case 46:\n              _context39.t24 = _context39.sent;\n              _context39.t22 = _context39.t23 !== _context39.t24;\n\n            case 48:\n              if (!_context39.t22) {\n                _context39.next = 51;\n                break;\n              }\n\n              _context39.next = 51;\n              return this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n\n            case 51:\n              return _context39.abrupt(\"return\", this.sdk.getDropModule(address));\n\n            case 52:\n            case \"end\":\n              return _context39.stop();\n          }\n        }\n      }, _callee39, this);\n    }));\n\n    function deployDropModule(_x29) {\n      return _deployDropModule.apply(this, arguments);\n    }\n\n    return deployDropModule;\n  }()\n  /**\r\n   * Deploys a BundleSignature module\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed BundleSignature module\r\n   */\n  ;\n\n  _proto.deployBundleSignatureModule = /*#__PURE__*/function () {\n    var _deployBundleSignatureModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee40(metadata) {\n      var serializedMetadata, metadataUri, nativeTokenWrapperAddress, royaltyTreasury, address;\n      return runtime_1.wrap(function _callee40$(_context40) {\n        while (1) {\n          switch (_context40.prev = _context40.next) {\n            case 0:\n              !(metadata.primarySaleRecipientAddress !== \"\" && isAddress(metadata.primarySaleRecipientAddress)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Primary sale recipient address must be specified and must be a valid address\") : invariant(false) : void 0;\n              _context40.t0 = this.jsonConvert;\n              _context40.next = 4;\n              return this._prepareMetadata(metadata);\n\n            case 4:\n              _context40.t1 = _context40.sent;\n              _context40.t2 = DropModuleMetadata;\n              serializedMetadata = _context40.t0.serializeObject.call(_context40.t0, _context40.t1, _context40.t2);\n              _context40.next = 9;\n              return this.verifyMetadata(metadata);\n\n            case 9:\n              _context40.t3 = this.sdk.getStorage();\n              _context40.t4 = serializedMetadata;\n              _context40.t5 = this.address;\n              _context40.next = 14;\n              return this.getSignerAddress();\n\n            case 14:\n              _context40.t6 = _context40.sent;\n              _context40.next = 17;\n              return _context40.t3.uploadMetadata.call(_context40.t3, _context40.t4, _context40.t5, _context40.t6);\n\n            case 17:\n              metadataUri = _context40.sent;\n              _context40.t7 = getNativeTokenByChainId;\n              _context40.next = 21;\n              return this.getChainID();\n\n            case 21:\n              _context40.t8 = _context40.sent;\n              nativeTokenWrapperAddress = (0, _context40.t7)(_context40.t8).wrapped.address;\n              _context40.next = 25;\n              return this.getRoyaltyTreasury();\n\n            case 25:\n              royaltyTreasury = _context40.sent;\n              _context40.t9 = this;\n              _context40.t10 = ModuleType.BUNDLE_SIGNATURE;\n              _context40.t11 = metadataUri;\n              _context40.t12 = this.address;\n              _context40.next = 32;\n              return this.getForwarder();\n\n            case 32:\n              _context40.t13 = _context40.sent;\n              _context40.t14 = nativeTokenWrapperAddress;\n              _context40.t15 = metadata.primarySaleRecipientAddress;\n              _context40.t16 = metadata.feeRecipient ? metadata.feeRecipient : royaltyTreasury;\n              _context40.t17 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;\n              _context40.t18 = metadata.primarySaleFeeBasisPoints ? metadata.primarySaleFeeBasisPoints : 0;\n              _context40.t19 = [_context40.t11, _context40.t12, _context40.t13, _context40.t14, _context40.t15, _context40.t16, _context40.t17, _context40.t18];\n              _context40.t20 = SignatureMint1155__factory;\n              _context40.next = 42;\n              return _context40.t9._deployModule.call(_context40.t9, _context40.t10, _context40.t19, _context40.t20);\n\n            case 42:\n              address = _context40.sent;\n\n              if (!(metadata.feeRecipient && metadata.feeRecipient !== royaltyTreasury)) {\n                _context40.next = 46;\n                break;\n              }\n\n              _context40.next = 46;\n              return this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n\n            case 46:\n              return _context40.abrupt(\"return\", this.sdk.getBundleSignatureModule(address));\n\n            case 47:\n            case \"end\":\n              return _context40.stop();\n          }\n        }\n      }, _callee40, this);\n    }));\n\n    function deployBundleSignatureModule(_x30) {\n      return _deployBundleSignatureModule.apply(this, arguments);\n    }\n\n    return deployBundleSignatureModule;\n  }()\n  /**\r\n   * Deploys a Bundle Drop module\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed Bundle Drop module\r\n   */\n  ;\n\n  _proto.deployBundleDropModule = /*#__PURE__*/function () {\n    var _deployBundleDropModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee41(metadata) {\n      var serializedMetadata, metadataUri, nativeTokenWrapperAddress, address;\n      return runtime_1.wrap(function _callee41$(_context41) {\n        while (1) {\n          switch (_context41.prev = _context41.next) {\n            case 0:\n              !(metadata.primarySaleRecipientAddress !== \"\" && isAddress(metadata.primarySaleRecipientAddress)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Primary sale recipient address must be specified and must be a valid address\") : invariant(false) : void 0;\n              _context41.next = 3;\n              return this.verifyMetadata(metadata);\n\n            case 3:\n              _context41.t0 = this.jsonConvert;\n              _context41.next = 6;\n              return this._prepareMetadata(metadata);\n\n            case 6:\n              _context41.t1 = _context41.sent;\n              _context41.t2 = DropModuleMetadata;\n              serializedMetadata = _context41.t0.serializeObject.call(_context41.t0, _context41.t1, _context41.t2);\n              _context41.t3 = this.sdk.getStorage();\n              _context41.t4 = serializedMetadata;\n              _context41.t5 = this.address;\n              _context41.next = 14;\n              return this.getSignerAddress();\n\n            case 14:\n              _context41.t6 = _context41.sent;\n              _context41.next = 17;\n              return _context41.t3.uploadMetadata.call(_context41.t3, _context41.t4, _context41.t5, _context41.t6);\n\n            case 17:\n              metadataUri = _context41.sent;\n              _context41.t7 = getNativeTokenByChainId;\n              _context41.next = 21;\n              return this.getChainID();\n\n            case 21:\n              _context41.t8 = _context41.sent;\n              nativeTokenWrapperAddress = (0, _context41.t7)(_context41.t8).wrapped.address;\n              _context41.t9 = this;\n              _context41.t10 = ModuleType.BUNDLE_DROP;\n              _context41.t11 = metadataUri;\n              _context41.t12 = this.address;\n              _context41.next = 29;\n              return this.getForwarder();\n\n            case 29:\n              _context41.t13 = _context41.sent;\n              _context41.t14 = nativeTokenWrapperAddress;\n              _context41.t15 = metadata.primarySaleRecipientAddress;\n              _context41.t16 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;\n              _context41.t17 = metadata.primarySaleFeeBasisPoints ? metadata.primarySaleFeeBasisPoints : 0;\n              _context41.t18 = [_context41.t11, _context41.t12, _context41.t13, _context41.t14, _context41.t15, _context41.t16, _context41.t17];\n              _context41.t19 = LazyMintERC1155__factory;\n              _context41.next = 38;\n              return _context41.t9._deployModule.call(_context41.t9, _context41.t10, _context41.t18, _context41.t19);\n\n            case 38:\n              address = _context41.sent;\n              _context41.t20 = metadata.feeRecipient;\n\n              if (!_context41.t20) {\n                _context41.next = 46;\n                break;\n              }\n\n              _context41.t21 = metadata.feeRecipient;\n              _context41.next = 44;\n              return this.getRoyaltyTreasury();\n\n            case 44:\n              _context41.t22 = _context41.sent;\n              _context41.t20 = _context41.t21 !== _context41.t22;\n\n            case 46:\n              if (!_context41.t20) {\n                _context41.next = 49;\n                break;\n              }\n\n              _context41.next = 49;\n              return this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n\n            case 49:\n              return _context41.abrupt(\"return\", this.sdk.getBundleDropModule(address));\n\n            case 50:\n            case \"end\":\n              return _context41.stop();\n          }\n        }\n      }, _callee41, this);\n    }));\n\n    function deployBundleDropModule(_x31) {\n      return _deployBundleDropModule.apply(this, arguments);\n    }\n\n    return deployBundleDropModule;\n  }()\n  /**\r\n   * Deploys a Datastore module\r\n   *\r\n   * @alpha\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed Datastore module\r\n   */\n  ;\n\n  _proto.deployDatastoreModule = /*#__PURE__*/function () {\n    var _deployDatastoreModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee42(metadata) {\n      var serializedMetadata, metadataUri, address;\n      return runtime_1.wrap(function _callee42$(_context42) {\n        while (1) {\n          switch (_context42.prev = _context42.next) {\n            case 0:\n              _context42.t0 = this.jsonConvert;\n              _context42.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context42.t1 = _context42.sent;\n              _context42.t2 = DatastoreModuleMetadata;\n              serializedMetadata = _context42.t0.serializeObject.call(_context42.t0, _context42.t1, _context42.t2);\n              _context42.t3 = this.sdk.getStorage();\n              _context42.t4 = serializedMetadata;\n              _context42.t5 = this.address;\n              _context42.next = 11;\n              return this.getSignerAddress();\n\n            case 11:\n              _context42.t6 = _context42.sent;\n              _context42.next = 14;\n              return _context42.t3.uploadMetadata.call(_context42.t3, _context42.t4, _context42.t5, _context42.t6);\n\n            case 14:\n              metadataUri = _context42.sent;\n              _context42.t7 = this;\n              _context42.t8 = ModuleType.DATASTORE;\n              _context42.t9 = this.address;\n              _context42.next = 20;\n              return this.getForwarder();\n\n            case 20:\n              _context42.t10 = _context42.sent;\n              _context42.t11 = metadataUri;\n              _context42.t12 = [_context42.t9, _context42.t10, _context42.t11];\n              _context42.t13 = DataStore__factory;\n              _context42.next = 26;\n              return _context42.t7._deployModule.call(_context42.t7, _context42.t8, _context42.t12, _context42.t13);\n\n            case 26:\n              address = _context42.sent;\n              return _context42.abrupt(\"return\", this.sdk.getDatastoreModule(address));\n\n            case 28:\n            case \"end\":\n              return _context42.stop();\n          }\n        }\n      }, _callee42, this);\n    }));\n\n    function deployDatastoreModule(_x32) {\n      return _deployDatastoreModule.apply(this, arguments);\n    }\n\n    return deployDatastoreModule;\n  }()\n  /**\r\n   * Deploys a Vote module\r\n   *\r\n   * @param metadata - The module metadata\r\n   * @returns - The deployed vote module\r\n   */\n  ;\n\n  _proto.deployVoteModule = /*#__PURE__*/function () {\n    var _deployVoteModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee43(metadata) {\n      var chainId, timeBetweenBlocks, waitTimeInBlocks, votingTimeInBlocks, serializedMetadata, metadataUri, address;\n      return runtime_1.wrap(function _callee43$(_context43) {\n        while (1) {\n          switch (_context43.prev = _context43.next) {\n            case 0:\n              !(metadata.votingTokenAddress !== \"\" && isAddress(metadata.votingTokenAddress)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Voting Token Address must be a valid address\") : invariant(false) : void 0;\n              !(metadata.votingQuorumFraction >= 0 && metadata.votingQuorumFraction <= 100) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Quofrum Fraction must be in the range of 0-100 representing percentage\") : invariant(false) : void 0;\n              _context43.next = 4;\n              return this.getChainID();\n\n            case 4:\n              chainId = _context43.sent;\n              timeBetweenBlocks = DEFAULT_BLOCK_TIMES_FALLBACK[chainId];\n              waitTimeInBlocks = metadata.proposalStartWaitTimeInSeconds / timeBetweenBlocks.secondsBetweenBlocks;\n              votingTimeInBlocks = metadata.proposalVotingTimeInSeconds / timeBetweenBlocks.secondsBetweenBlocks;\n              metadata.votingDelay = waitTimeInBlocks;\n              metadata.votingPeriod = votingTimeInBlocks; // verify making sure that the voting token address is valid\n\n              _context43.prev = 10;\n              _context43.next = 13;\n              return Coin__factory.connect(metadata.votingTokenAddress, this.readOnlyContract.provider).callStatic.getPastTotalSupply(0);\n\n            case 13:\n              _context43.next = 18;\n              break;\n\n            case 15:\n              _context43.prev = 15;\n              _context43.t0 = _context43[\"catch\"](10);\n              process.env.NODE_ENV !== \"production\" ? invariant(false, \"Token is not compatible with the vote module\") : invariant(false);\n\n            case 18:\n              _context43.t1 = this.jsonConvert;\n              _context43.next = 21;\n              return this._prepareMetadata(metadata);\n\n            case 21:\n              _context43.t2 = _context43.sent;\n              _context43.t3 = VoteModuleMetadata;\n              serializedMetadata = _context43.t1.serializeObject.call(_context43.t1, _context43.t2, _context43.t3);\n              _context43.t4 = this.sdk.getStorage();\n              _context43.t5 = serializedMetadata;\n              _context43.t6 = this.address;\n              _context43.next = 29;\n              return this.getSignerAddress();\n\n            case 29:\n              _context43.t7 = _context43.sent;\n              _context43.next = 32;\n              return _context43.t4.uploadMetadata.call(_context43.t4, _context43.t5, _context43.t6, _context43.t7);\n\n            case 32:\n              metadataUri = _context43.sent;\n              _context43.t8 = this;\n              _context43.t9 = ModuleType.VOTE;\n              _context43.t10 = metadata.name;\n              _context43.t11 = metadata.votingTokenAddress;\n              _context43.t12 = BigNumber.from(Math.ceil(metadata.votingDelay));\n              _context43.t13 = BigNumber.from(Math.ceil(metadata.votingPeriod));\n              _context43.t14 = BigNumber.from(metadata.minimumNumberOfTokensNeededToPropose);\n              _context43.t15 = metadata.votingQuorumFraction;\n              _context43.next = 43;\n              return this.getForwarder();\n\n            case 43:\n              _context43.t16 = _context43.sent;\n              _context43.t17 = metadataUri;\n              _context43.t18 = [_context43.t10, _context43.t11, _context43.t12, _context43.t13, _context43.t14, _context43.t15, _context43.t16, _context43.t17];\n              _context43.t19 = VotingGovernor__factory;\n              _context43.next = 49;\n              return _context43.t8._deployModule.call(_context43.t8, _context43.t9, _context43.t18, _context43.t19);\n\n            case 49:\n              address = _context43.sent;\n              return _context43.abrupt(\"return\", this.sdk.getVoteModule(address));\n\n            case 51:\n            case \"end\":\n              return _context43.stop();\n          }\n        }\n      }, _callee43, this, [[10, 15]]);\n    }));\n\n    function deployVoteModule(_x33) {\n      return _deployVoteModule.apply(this, arguments);\n    }\n\n    return deployVoteModule;\n  }();\n\n  _proto.shouldUpgradeToV2 = /*#__PURE__*/function () {\n    var _shouldUpgradeToV = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee44() {\n      var isAdmin;\n      return runtime_1.wrap(function _callee44$(_context44) {\n        while (1) {\n          switch (_context44.prev = _context44.next) {\n            case 0:\n              _context44.next = 2;\n              return this.isV1();\n\n            case 2:\n              _context44.t0 = _context44.sent;\n\n              if (!_context44.t0) {\n                _context44.next = 5;\n                break;\n              }\n\n              _context44.t0 = this.hasValidSigner();\n\n            case 5:\n              if (!_context44.t0) {\n                _context44.next = 23;\n                break;\n              }\n\n              _context44.t1 = this.readOnlyContract;\n              _context44.t2 = ethers.utils.hexZeroPad([0], 32);\n              _context44.next = 10;\n              return this.getSignerAddress();\n\n            case 10:\n              _context44.t3 = _context44.sent;\n              _context44.next = 13;\n              return _context44.t1.hasRole.call(_context44.t1, _context44.t2, _context44.t3);\n\n            case 13:\n              isAdmin = _context44.sent;\n              _context44.t4 = isAdmin;\n\n              if (!_context44.t4) {\n                _context44.next = 21;\n                break;\n              }\n\n              _context44.next = 18;\n              return this.getRoyaltyTreasury();\n\n            case 18:\n              _context44.t5 = _context44.sent;\n              _context44.t6 = this.address;\n              _context44.t4 = _context44.t5 === _context44.t6;\n\n            case 21:\n              if (!_context44.t4) {\n                _context44.next = 23;\n                break;\n              }\n\n              return _context44.abrupt(\"return\", true);\n\n            case 23:\n              return _context44.abrupt(\"return\", false);\n\n            case 24:\n            case \"end\":\n              return _context44.stop();\n          }\n        }\n      }, _callee44, this);\n    }));\n\n    function shouldUpgradeToV2() {\n      return _shouldUpgradeToV.apply(this, arguments);\n    }\n\n    return shouldUpgradeToV2;\n  }();\n\n  _proto.shouldUpgradeModuleList = /*#__PURE__*/function () {\n    var _shouldUpgradeModuleList = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee45() {\n      var _this4 = this;\n\n      var modules;\n      return runtime_1.wrap(function _callee45$(_context45) {\n        while (1) {\n          switch (_context45.prev = _context45.next) {\n            case 0:\n              _context45.next = 2;\n              return this.isV1();\n\n            case 2:\n              if (_context45.sent) {\n                _context45.next = 4;\n                break;\n              }\n\n              return _context45.abrupt(\"return\", []);\n\n            case 4:\n              _context45.next = 6;\n              return this.getRoyaltyTreasury();\n\n            case 6:\n              _context45.t0 = _context45.sent;\n              _context45.t1 = this.address;\n\n              if (!(_context45.t0 === _context45.t1)) {\n                _context45.next = 10;\n                break;\n              }\n\n              return _context45.abrupt(\"return\", []);\n\n            case 10:\n              _context45.next = 12;\n              return this.getAllModuleMetadata([ModuleType.NFT, ModuleType.BUNDLE, ModuleType.PACK, ModuleType.DROP, ModuleType.BUNDLE_DROP], false);\n\n            case 12:\n              modules = _context45.sent;\n              return _context45.abrupt(\"return\", modules.filter(function (m) {\n                var _m$metadata, _m$metadata$fee_recip;\n\n                return ((_m$metadata = m.metadata) == null ? void 0 : (_m$metadata$fee_recip = _m$metadata.fee_recipient) == null ? void 0 : _m$metadata$fee_recip.toLowerCase()) === _this4.address.toLowerCase();\n              }));\n\n            case 14:\n            case \"end\":\n              return _context45.stop();\n          }\n        }\n      }, _callee45, this);\n    }));\n\n    function shouldUpgradeModuleList() {\n      return _shouldUpgradeModuleList.apply(this, arguments);\n    }\n\n    return shouldUpgradeModuleList;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.upgradeModuleList = /*#__PURE__*/function () {\n    var _upgradeModuleList = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee46(moduleAddresses) {\n      var _this5 = this;\n\n      var signer, allUpgradableModules, moduleMetadatas, royaltyTreasury, metadataUris, nonce, txData, txs, txns;\n      return runtime_1.wrap(function _callee46$(_context46) {\n        while (1) {\n          switch (_context46.prev = _context46.next) {\n            case 0:\n              signer = this.getSigner();\n              !signer ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"needs a signer\") : invariant(false) : void 0; // already filtered to make sure that the fee_recipient is set to the app\n\n              _context46.next = 4;\n              return this.shouldUpgradeModuleList();\n\n            case 4:\n              allUpgradableModules = _context46.sent; // this already returns the correct metadata array with non-resolved metadata...\n\n              moduleMetadatas = allUpgradableModules.filter(function (m) {\n                return moduleAddresses.includes(m.address);\n              });\n              _context46.next = 8;\n              return this.getRoyaltyTreasury();\n\n            case 8:\n              royaltyTreasury = _context46.sent;\n              _context46.next = 11;\n              return Promise.all(moduleMetadatas.map(function (m) {\n                return _this5.sdk.getStorage().uploadMetadata(_extends({}, m.metadata, {\n                  fee_recipient: royaltyTreasury\n                }));\n              }));\n\n            case 11:\n              metadataUris = _context46.sent;\n              _context46.next = 14;\n              return signer.getTransactionCount(\"pending\");\n\n            case 14:\n              nonce = _context46.sent;\n              txData = metadataUris.map(function (uri) {\n                return _this5.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [uri]);\n              });\n              txs = txData.map(function (data, i) {\n                return {\n                  to: moduleMetadatas[i].address,\n                  nonce: nonce + i,\n                  data: data\n                };\n              }); // batch send :)\n\n              _context46.next = 19;\n              return Promise.all(txs.map(function (tx) {\n                return signer.sendTransaction(tx);\n              }));\n\n            case 19:\n              txns = _context46.sent;\n              _context46.next = 22;\n              return Promise.all(txns.map(function (tx) {\n                return tx.wait();\n              }));\n\n            case 22:\n              return _context46.abrupt(\"return\", _context46.sent);\n\n            case 23:\n            case \"end\":\n              return _context46.stop();\n          }\n        }\n      }, _callee46, this);\n    }));\n\n    function upgradeModuleList(_x34) {\n      return _upgradeModuleList.apply(this, arguments);\n    }\n\n    return upgradeModuleList;\n  }()\n  /**\r\n   *  @internal\r\n   * Upgrades the protocol control to v2. In v2, the royalty treasury needs to be set to be set to a splits contract.\r\n   *\r\n   * @param splitsModuleAddress - Optional. By default, it automatically creates a Splits for the project.\r\n   * @param splitsRecipients - Optiional. By default, it is the signer who upgrades.\r\n   */\n  ;\n\n  _proto.upgradeToV2 = /*#__PURE__*/function () {\n    var _upgradeToV = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee47(upgradeOptions) {\n      var splitsAddress, metadata;\n      return runtime_1.wrap(function _callee47$(_context47) {\n        while (1) {\n          switch (_context47.prev = _context47.next) {\n            case 0:\n              if (upgradeOptions === void 0) {\n                upgradeOptions = {};\n              }\n\n              _context47.next = 3;\n              return this.isV1UpgradedOrV2();\n\n            case 3:\n              if (!_context47.sent) {\n                _context47.next = 5;\n                break;\n              }\n\n              return _context47.abrupt(\"return\");\n\n            case 5:\n              splitsAddress = \"\";\n\n              if (!upgradeOptions.splitsModuleAddress) {\n                _context47.next = 10;\n                break;\n              }\n\n              splitsAddress = upgradeOptions.splitsModuleAddress;\n              _context47.next = 22;\n              break;\n\n            case 10:\n              if (upgradeOptions.splitsRecipients) {\n                _context47.next = 16;\n                break;\n              }\n\n              _context47.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context47.t0 = _context47.sent;\n              _context47.t1 = {\n                address: _context47.t0,\n                shares: 100\n              };\n              upgradeOptions.splitsRecipients = [_context47.t1];\n\n            case 16:\n              _context47.next = 18;\n              return this.getMetadata();\n\n            case 18:\n              metadata = _context47.sent.metadata;\n              _context47.next = 21;\n              return this.deploySplitsModule({\n                name: (metadata == null ? void 0 : metadata.name) + \" Royalty Treasury\",\n                recipientSplits: upgradeOptions.splitsRecipients,\n                isRoyalty: true\n              });\n\n            case 21:\n              splitsAddress = _context47.sent.address;\n\n            case 22:\n              _context47.next = 24;\n              return this.setRoyaltyTreasury(splitsAddress);\n\n            case 24:\n              return _context47.abrupt(\"return\", _context47.sent);\n\n            case 25:\n            case \"end\":\n              return _context47.stop();\n          }\n        }\n      }, _callee47, this);\n    }));\n\n    function upgradeToV2(_x35) {\n      return _upgradeToV.apply(this, arguments);\n    }\n\n    return upgradeToV2;\n  }()\n  /**\r\n   * Check the balance of the project wallet in the native token of the chain\r\n   *\r\n   * @returns - The balance of the project in the native token of the chain\r\n   */\n  ;\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee48() {\n      var projectBalance, treasuryBalance, treasury;\n      return runtime_1.wrap(function _callee48$(_context48) {\n        while (1) {\n          switch (_context48.prev = _context48.next) {\n            case 0:\n              _context48.next = 2;\n              return this.readOnlyContract.provider.getBalance(this.address);\n\n            case 2:\n              projectBalance = _context48.sent;\n              treasuryBalance = BigNumber.from(0);\n              _context48.next = 6;\n              return this.getRoyaltyTreasury();\n\n            case 6:\n              treasury = _context48.sent;\n\n              if (!(treasury.toLowerCase() !== this.address.toLowerCase())) {\n                _context48.next = 11;\n                break;\n              }\n\n              _context48.next = 10;\n              return this.readOnlyContract.provider.getBalance(treasury);\n\n            case 10:\n              treasuryBalance = _context48.sent;\n\n            case 11:\n              return _context48.abrupt(\"return\", projectBalance.add(treasuryBalance));\n\n            case 12:\n            case \"end\":\n              return _context48.stop();\n          }\n        }\n      }, _callee48, this);\n    }));\n\n    function balance() {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }()\n  /**\r\n   * Check the balance of the project wallet in a particular\r\n   * ERC20 token contract\r\n   *\r\n   * @returns - The balance of the project in the native token of the chain\r\n   */\n  ;\n\n  _proto.balanceOfToken = /*#__PURE__*/function () {\n    var _balanceOfToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee49(tokenAddress) {\n      var balance, erc20, treasury;\n      return runtime_1.wrap(function _callee49$(_context49) {\n        while (1) {\n          switch (_context49.prev = _context49.next) {\n            case 0:\n              balance = BigNumber.from(0);\n\n              if (!isNativeToken(tokenAddress)) {\n                _context49.next = 7;\n                break;\n              }\n\n              _context49.next = 4;\n              return this.balance();\n\n            case 4:\n              balance = _context49.sent;\n              _context49.next = 39;\n              break;\n\n            case 7:\n              erc20 = IERC20__factory.connect(tokenAddress, this.readOnlyContract.provider); // TODO: multicall :)\n              // only fetch project's erc20 balance if it's not v1\n\n              _context49.next = 10;\n              return this.isV1();\n\n            case 10:\n              if (_context49.sent) {\n                _context49.next = 23;\n                break;\n              }\n\n              _context49.prev = 11;\n              _context49.t0 = balance;\n              _context49.next = 15;\n              return erc20.balanceOf(this.address);\n\n            case 15:\n              _context49.t1 = _context49.sent;\n              balance = _context49.t0.add.call(_context49.t0, _context49.t1);\n              _context49.next = 23;\n              break;\n\n            case 19:\n              _context49.prev = 19;\n              _context49.t2 = _context49[\"catch\"](11); // invalid token address\n\n              console.error(_context49.t2);\n              throw new Error(\"invalid token address\");\n\n            case 23:\n              _context49.next = 25;\n              return this.getRoyaltyTreasury();\n\n            case 25:\n              treasury = _context49.sent;\n\n              if (!(treasury.toLowerCase() !== this.address.toLowerCase())) {\n                _context49.next = 39;\n                break;\n              }\n\n              _context49.prev = 27;\n              _context49.t3 = balance;\n              _context49.next = 31;\n              return erc20.balanceOf(treasury);\n\n            case 31:\n              _context49.t4 = _context49.sent;\n              balance = _context49.t3.add.call(_context49.t3, _context49.t4);\n              _context49.next = 39;\n              break;\n\n            case 35:\n              _context49.prev = 35;\n              _context49.t5 = _context49[\"catch\"](27); // invalid token address\n\n              console.error(_context49.t5);\n              throw new Error(\"invalid token address\");\n\n            case 39:\n              _context49.next = 41;\n              return getCurrencyValue(this.providerOrSigner, tokenAddress, balance);\n\n            case 41:\n              return _context49.abrupt(\"return\", _context49.sent);\n\n            case 42:\n            case \"end\":\n              return _context49.stop();\n          }\n        }\n      }, _callee49, this, [[11, 19], [27, 35]]);\n    }));\n\n    function balanceOfToken(_x36) {\n      return _balanceOfToken.apply(this, arguments);\n    }\n\n    return balanceOfToken;\n  }()\n  /**\r\n   * @internal\r\n   * Check if contract is v1 or v2. If the contract doesn't have version = v1 contract.\r\n   */\n  ;\n\n  _proto.isV1 = /*#__PURE__*/function () {\n    var _isV = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee50() {\n      return runtime_1.wrap(function _callee50$(_context50) {\n        while (1) {\n          switch (_context50.prev = _context50.next) {\n            case 0:\n              if (!this._shouldCheckVersion) {\n                _context50.next = 11;\n                break;\n              }\n\n              _context50.prev = 1;\n              _context50.next = 4;\n              return this.readOnlyContract.callStatic.version();\n\n            case 4:\n              this._isV1 = false;\n              _context50.next = 10;\n              break;\n\n            case 7:\n              _context50.prev = 7;\n              _context50.t0 = _context50[\"catch\"](1);\n              this._isV1 = true;\n\n            case 10:\n              this._shouldCheckVersion = false;\n\n            case 11:\n              return _context50.abrupt(\"return\", this._isV1);\n\n            case 12:\n            case \"end\":\n              return _context50.stop();\n          }\n        }\n      }, _callee50, this, [[1, 7]]);\n    }));\n\n    function isV1() {\n      return _isV.apply(this, arguments);\n    }\n\n    return isV1;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.isV1UpgradedOrV2 = /*#__PURE__*/function () {\n    var _isV1UpgradedOrV = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee51() {\n      return runtime_1.wrap(function _callee51$(_context51) {\n        while (1) {\n          switch (_context51.prev = _context51.next) {\n            case 0:\n              _context51.next = 2;\n              return this.isV1();\n\n            case 2:\n              _context51.t0 = !_context51.sent;\n\n              if (_context51.t0) {\n                _context51.next = 7;\n                break;\n              }\n\n              _context51.next = 6;\n              return this.shouldUpgradeToV2();\n\n            case 6:\n              _context51.t0 = !_context51.sent;\n\n            case 7:\n              return _context51.abrupt(\"return\", _context51.t0);\n\n            case 8:\n            case \"end\":\n              return _context51.stop();\n          }\n        }\n      }, _callee51, this);\n    }));\n\n    function isV1UpgradedOrV2() {\n      return _isV1UpgradedOrV.apply(this, arguments);\n    }\n\n    return isV1UpgradedOrV2;\n  }();\n\n  _proto.deployMarketplaceModule = /*#__PURE__*/function () {\n    var _deployMarketplaceModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee52(metadata) {\n      var serializedMetadata, metadataUri, nativeTokenWrapperAddress, address;\n      return runtime_1.wrap(function _callee52$(_context52) {\n        while (1) {\n          switch (_context52.prev = _context52.next) {\n            case 0:\n              _context52.t0 = this.jsonConvert;\n              _context52.next = 3;\n              return this._prepareMetadata(metadata);\n\n            case 3:\n              _context52.t1 = _context52.sent;\n              _context52.t2 = MarketplaceModuleMetadata$1;\n              serializedMetadata = _context52.t0.serializeObject.call(_context52.t0, _context52.t1, _context52.t2);\n              _context52.t3 = this.sdk.getStorage();\n              _context52.t4 = serializedMetadata;\n              _context52.t5 = this.address;\n              _context52.next = 11;\n              return this.getSignerAddress();\n\n            case 11:\n              _context52.t6 = _context52.sent;\n              _context52.next = 14;\n              return _context52.t3.uploadMetadata.call(_context52.t3, _context52.t4, _context52.t5, _context52.t6);\n\n            case 14:\n              metadataUri = _context52.sent;\n              _context52.t7 = getNativeTokenByChainId;\n              _context52.next = 18;\n              return this.getChainID();\n\n            case 18:\n              _context52.t8 = _context52.sent;\n              nativeTokenWrapperAddress = (0, _context52.t7)(_context52.t8).wrapped.address;\n              _context52.t9 = this;\n              _context52.t10 = ModuleType.MARKETPLACE;\n              _context52.t11 = this.address;\n              _context52.next = 25;\n              return this.getForwarder();\n\n            case 25:\n              _context52.t12 = _context52.sent;\n              _context52.t13 = nativeTokenWrapperAddress;\n              _context52.t14 = metadataUri;\n              _context52.t15 = metadata.marketFeeBasisPoints;\n              _context52.t16 = [_context52.t11, _context52.t12, _context52.t13, _context52.t14, _context52.t15];\n              _context52.t17 = Marketplace__factory;\n              _context52.next = 33;\n              return _context52.t9._deployModule.call(_context52.t9, _context52.t10, _context52.t16, _context52.t17);\n\n            case 33:\n              address = _context52.sent;\n              return _context52.abrupt(\"return\", this.sdk.getMarketplaceModule(address));\n\n            case 35:\n            case \"end\":\n              return _context52.stop();\n          }\n        }\n      }, _callee52, this);\n    }));\n\n    function deployMarketplaceModule(_x37) {\n      return _deployMarketplaceModule.apply(this, arguments);\n    }\n\n    return deployMarketplaceModule;\n  }();\n\n  return AppModule;\n}(ModuleWithRoles);\n\nAppModule.roles = [RolesMap.admin];\n/**\r\n * Create a collection of NFTs that lets you optionally mint multiple copies of each NFT.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getBundleModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar BundleModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(BundleModule, _ModuleWithRoles);\n\n  function BundleModule() {\n    return _ModuleWithRoles.apply(this, arguments) || this;\n  }\n\n  var _proto = BundleModule.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return BundleModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return NFTCollection__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return BundleModule.moduleType;\n  }\n  /**\r\n   *\r\n   * Get a single bundle item by tokenId.\r\n   * @param tokenId - the unique token id of the nft\r\n   * @returns A promise that resolves to a `BundleMetadata`.\r\n   */\n  ;\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId, address) {\n      var _yield$Promise$all, metadata, supply, ownedByAddress, state;\n\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = Promise;\n              _context.t1 = getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage());\n              _context.t2 = this.readOnlyContract.totalSupply(tokenId)[\"catch\"](function () {\n                return BigNumber$1.from(\"0\");\n              });\n\n              if (!address) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return this.balanceOf(address, tokenId);\n\n            case 6:\n              _context.t3 = _context.sent.toNumber();\n              _context.next = 10;\n              break;\n\n            case 9:\n              _context.t3 = 0;\n\n            case 10:\n              _context.t4 = _context.t3;\n              _context.t5 = this.readOnlyContract.tokenState(tokenId);\n              _context.t6 = [_context.t1, _context.t2, _context.t4, _context.t5];\n              _context.next = 15;\n              return _context.t0.all.call(_context.t0, _context.t6);\n\n            case 15:\n              _yield$Promise$all = _context.sent;\n              metadata = _yield$Promise$all[0];\n              supply = _yield$Promise$all[1];\n              ownedByAddress = _yield$Promise$all[2];\n              state = _yield$Promise$all[3];\n              return _context.abrupt(\"return\", {\n                creator: state.creator,\n                supply: supply,\n                metadata: metadata,\n                ownedByAddress: BigNumber$1.from(ownedByAddress),\n                underlyingType: state.underlyingType\n              });\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function get(_x, _x2) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * Get NFT Data\r\n   *\r\n   * @remarks Get data associated with NFTs in this module.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // You can get every NFT in the module\r\n   * const nfts = await module.getAll();\r\n   * console.log(nfts);\r\n   *\r\n   * // Or you can get optionally get the NFTs owned by a specific wallet\r\n   * const address = \"{{wallet_address}}\"; // The address you want to get the NFTs for;\r\n   * const ownedNfts = await module.getAll(address);\r\n   * console.log(ownedNfts);\r\n   * ```\r\n   *\r\n   * @returns The NFT metadata for all NFTs in the module.\r\n   */\n  ;\n\n  _proto.getAll = /*#__PURE__*/function () {\n    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(address) {\n      var _this = this;\n\n      var maxId;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.readOnlyContract.nextTokenId();\n\n            case 2:\n              maxId = _context2.sent.toNumber();\n              _context2.next = 5;\n              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {\n                return _this.get(i.toString(), address);\n              }));\n\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getAll(_x3) {\n      return _getAll.apply(this, arguments);\n    }\n\n    return getAll;\n  }()\n  /**\r\n   * Get NFT Balance\r\n   *\r\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check NFT balance\r\n   * const address = \"{{wallet_address}}\";\r\n   * // The token ID of the NFT you want to check the wallets balance of\r\n   * const tokenId = \"0\"\r\n   *\r\n   * const balance = await module.balanceOf(address, tokenId);\r\n   * console.log(balance);\r\n   * ```\r\n   */\n  ;\n\n  _proto.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(address, tokenId) {\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.readOnlyContract.balanceOf(address, tokenId);\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function balanceOf(_x4, _x5) {\n      return _balanceOf.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }();\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(tokenId) {\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = this.readOnlyContract;\n              _context4.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context4.t1 = _context4.sent;\n              _context4.t2 = tokenId;\n              _context4.next = 7;\n              return _context4.t0.balanceOf.call(_context4.t0, _context4.t1, _context4.t2);\n\n            case 7:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function balance(_x6) {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }();\n\n  _proto.isApproved = /*#__PURE__*/function () {\n    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address, operator, assetContract, assetId) {\n      var contract, approved, isTokenApproved;\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (assetContract) {\n                _context5.next = 4;\n                break;\n              }\n\n              _context5.next = 3;\n              return this.readOnlyContract.isApprovedForAll(address, operator);\n\n            case 3:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 4:\n              if (assetId) {\n                _context5.next = 6;\n                break;\n              }\n\n              throw new Error(\"tokenId is required\");\n\n            case 6:\n              contract = ERC721__factory.connect(assetContract, this.providerOrSigner);\n              _context5.t0 = contract;\n              _context5.next = 10;\n              return this.getSignerAddress();\n\n            case 10:\n              _context5.t1 = _context5.sent;\n              _context5.t2 = this.address;\n              _context5.next = 14;\n              return _context5.t0.isApprovedForAll.call(_context5.t0, _context5.t1, _context5.t2);\n\n            case 14:\n              approved = _context5.sent;\n              _context5.next = 17;\n              return contract.getApproved(assetId);\n\n            case 17:\n              _context5.t3 = _context5.sent.toLowerCase();\n              _context5.t4 = this.address.toLowerCase();\n              isTokenApproved = _context5.t3 === _context5.t4;\n              return _context5.abrupt(\"return\", approved || isTokenApproved);\n\n            case 21:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function isApproved(_x7, _x8, _x9, _x10) {\n      return _isApproved.apply(this, arguments);\n    }\n\n    return isApproved;\n  }() // write functions\n  ;\n\n  _proto.setApproval = /*#__PURE__*/function () {\n    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(operator, approved) {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (approved === void 0) {\n                approved = true;\n              }\n\n              _context6.next = 3;\n              return this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function setApproval(_x11, _x12) {\n      return _setApproval.apply(this, arguments);\n    }\n\n    return setApproval;\n  }()\n  /**\r\n   * Transfer NFT\r\n   *\r\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the NFT to\r\n   * const toAddress = \"0x...\";\r\n   *\r\n   * // The token ID of the NFT you want to send\r\n   * const tokenId = \"0\";\r\n   *\r\n   * // The number of NFTs you want to send\r\n   * const amount = 1;\r\n   *\r\n   * await module.transfer(toAddress, tokenId, amount);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transfer = /*#__PURE__*/function () {\n    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(to, tokenId, amount) {\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.t0 = this;\n              _context7.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context7.t1 = _context7.sent;\n              _context7.t2 = to;\n              _context7.t3 = {\n                tokenId: tokenId,\n                amount: amount\n              };\n              _context7.t4 = [0];\n              _context7.next = 9;\n              return _context7.t0.transferFrom.call(_context7.t0, _context7.t1, _context7.t2, _context7.t3, _context7.t4);\n\n            case 9:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 10:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function transfer(_x13, _x14, _x15) {\n      return _transfer.apply(this, arguments);\n    }\n\n    return transfer;\n  }() // owner functions\n  ;\n\n  _proto.create = /*#__PURE__*/function () {\n    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(metadata) {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.createBatch([metadata]);\n\n            case 2:\n              return _context8.abrupt(\"return\", _context8.sent[0]);\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function create(_x16) {\n      return _create.apply(this, arguments);\n    }\n\n    return create;\n  }();\n\n  _proto.createBatch = /*#__PURE__*/function () {\n    var _createBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(metadatas) {\n      var metadataWithSupply;\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              metadataWithSupply = metadatas.map(function (m) {\n                return {\n                  metadata: m,\n                  supply: 0\n                };\n              });\n              return _context9.abrupt(\"return\", this.createAndMintBatch(metadataWithSupply));\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function createBatch(_x17) {\n      return _createBatch.apply(this, arguments);\n    }\n\n    return createBatch;\n  }()\n  /**\r\n   * Mint NFT\r\n   *\r\n   * @remarks Mint an NFT with a specified supply.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\r\n   * const metadata = {\r\n   *   name: \"Cool NFT\",\r\n   *   description: \"This is a cool NFT\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\r\n   * }\r\n   *\r\n   * const metadataWithSupply = {\r\n   *   metadata,\r\n   *   supply: 1, // The number of this NFT you want to mint\r\n   * }\r\n   *\r\n   * await module.createAndMint(metadataWithSupply);\r\n   * ```\r\n   */\n  ;\n\n  _proto.createAndMint = /*#__PURE__*/function () {\n    var _createAndMint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(metadataWithSupply) {\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.createAndMintBatch([metadataWithSupply]);\n\n            case 2:\n              return _context10.abrupt(\"return\", _context10.sent[0]);\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function createAndMint(_x18) {\n      return _createAndMint.apply(this, arguments);\n    }\n\n    return createAndMint;\n  }()\n  /**\r\n   * Mint Many NFTs\r\n   *\r\n   * @remarks Mint many different NFTs with specified supplies.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Custom metadata and supplies of your NFTs\r\n   * const metadataWithSupply = [{\r\n   *   supply: 1, // The number of this NFT you want to mint\r\n   *   metadata: {\r\n   *     name: \"Cool NFT #1\",\r\n   *     description: \"This is a cool NFT\",\r\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\r\n   *   },\r\n   * }, {\r\n   *   supply: 1,\r\n   *   metadata: {\r\n   *     name: \"Cool NFT #2\",\r\n   *     description: \"This is a cool NFT\",\r\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\r\n   *   },\r\n   * }];\r\n   *\r\n   * await module.createAndMintBatch(metadataWithSupply);\r\n   * ```\r\n   */\n  ;\n\n  _proto.createAndMintBatch = /*#__PURE__*/function () {\n    var _createAndMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(metadataWithSupply) {\n      var _this2 = this;\n\n      var metadatas, _yield$this$sdk$getSt, uris, supplies, to, receipt, event, tokenIds;\n\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              metadatas = metadataWithSupply.map(function (a) {\n                return a.metadata;\n              });\n              _context11.next = 3;\n              return this.sdk.getStorage().uploadMetadataBatch(metadatas);\n\n            case 3:\n              _yield$this$sdk$getSt = _context11.sent;\n              uris = _yield$this$sdk$getSt.metadataUris;\n              supplies = metadataWithSupply.map(function (a) {\n                return a.supply;\n              });\n              _context11.next = 8;\n              return this.getSignerAddress();\n\n            case 8:\n              to = _context11.sent;\n              _context11.next = 11;\n              return this.sendTransaction(\"createNativeTokens\", [to, uris, supplies, [0]]);\n\n            case 11:\n              receipt = _context11.sent;\n              event = this.parseEventLogs(\"NativeTokens\", receipt == null ? void 0 : receipt.logs);\n              tokenIds = event == null ? void 0 : event.tokenIds;\n              _context11.next = 16;\n              return Promise.all(tokenIds.map(function (tokenId) {\n                return _this2.get(tokenId.toString());\n              }));\n\n            case 16:\n              return _context11.abrupt(\"return\", _context11.sent);\n\n            case 17:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function createAndMintBatch(_x19) {\n      return _createAndMintBatch.apply(this, arguments);\n    }\n\n    return createAndMintBatch;\n  }();\n\n  _proto.createWithToken = /*#__PURE__*/function () {\n    var _createWithToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(tokenContract, tokenAmount, args) {\n      var token, allowance, uri;\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              token = ERC20__factory.connect(tokenContract, this.providerOrSigner);\n              _context12.t0 = token;\n              _context12.next = 4;\n              return this.getSignerAddress();\n\n            case 4:\n              _context12.t1 = _context12.sent;\n              _context12.t2 = this.address;\n              _context12.next = 8;\n              return _context12.t0.allowance.call(_context12.t0, _context12.t1, _context12.t2);\n\n            case 8:\n              allowance = _context12.sent;\n\n              if (!(allowance < tokenAmount)) {\n                _context12.next = 12;\n                break;\n              }\n\n              _context12.next = 12;\n              return token.increaseAllowance(this.address, tokenAmount);\n\n            case 12:\n              _context12.next = 14;\n              return this.sdk.getStorage().uploadMetadata(args.metadata);\n\n            case 14:\n              uri = _context12.sent;\n              _context12.next = 17;\n              return this.sendTransaction(\"wrapERC20\", [tokenContract, tokenAmount, args.supply, uri]);\n\n            case 17:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function createWithToken(_x20, _x21, _x22) {\n      return _createWithToken.apply(this, arguments);\n    }\n\n    return createWithToken;\n  }();\n\n  _proto.createWithErc20 = /*#__PURE__*/function () {\n    var _createWithErc = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(tokenContract, tokenAmount, args) {\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              return _context13.abrupt(\"return\", this.createWithToken(tokenContract, tokenAmount, args));\n\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function createWithErc20(_x23, _x24, _x25) {\n      return _createWithErc.apply(this, arguments);\n    }\n\n    return createWithErc20;\n  }();\n\n  _proto.createWithNFT = /*#__PURE__*/function () {\n    var _createWithNFT = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(tokenContract, tokenId, metadata) {\n      var asset, isTokenApproved, uri;\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              asset = ERC721__factory.connect(tokenContract, this.providerOrSigner);\n              _context14.t0 = asset;\n              _context14.next = 4;\n              return this.getSignerAddress();\n\n            case 4:\n              _context14.t1 = _context14.sent;\n              _context14.t2 = this.address;\n              _context14.next = 8;\n              return _context14.t0.isApprovedForAll.call(_context14.t0, _context14.t1, _context14.t2);\n\n            case 8:\n              if (_context14.sent) {\n                _context14.next = 17;\n                break;\n              }\n\n              _context14.next = 11;\n              return asset.getApproved(tokenId);\n\n            case 11:\n              _context14.t3 = _context14.sent.toLowerCase();\n              _context14.t4 = this.address.toLowerCase();\n              isTokenApproved = _context14.t3 === _context14.t4;\n\n              if (isTokenApproved) {\n                _context14.next = 17;\n                break;\n              }\n\n              _context14.next = 17;\n              return this.sendContractTransaction(asset, \"setApprovalForAll\", [this.address]);\n\n            case 17:\n              _context14.next = 19;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 19:\n              uri = _context14.sent;\n              _context14.next = 22;\n              return this.sendTransaction(\"wrapERC721\", [tokenContract, tokenId, uri]);\n\n            case 22:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function createWithNFT(_x26, _x27, _x28) {\n      return _createWithNFT.apply(this, arguments);\n    }\n\n    return createWithNFT;\n  }();\n\n  _proto.unwrapNFT = /*#__PURE__*/function () {\n    var _unwrapNFT = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(tokenId) {\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.sendTransaction(\"redeemERC721\", [tokenId]);\n\n            case 2:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 3:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function unwrapNFT(_x29) {\n      return _unwrapNFT.apply(this, arguments);\n    }\n\n    return unwrapNFT;\n  }();\n\n  _proto.unwrapToken = /*#__PURE__*/function () {\n    var _unwrapToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(tokenId, amount) {\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.sendTransaction(\"redeemERC20\", [tokenId, amount]);\n\n            case 2:\n              return _context16.abrupt(\"return\", _context16.sent);\n\n            case 3:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function unwrapToken(_x30, _x31) {\n      return _unwrapToken.apply(this, arguments);\n    }\n\n    return unwrapToken;\n  }();\n\n  _proto.createWithERC721 = /*#__PURE__*/function () {\n    var _createWithERC = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(tokenContract, tokenId, metadata) {\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              return _context17.abrupt(\"return\", this.createWithNFT(tokenContract, tokenId, metadata));\n\n            case 1:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function createWithERC721(_x32, _x33, _x34) {\n      return _createWithERC.apply(this, arguments);\n    }\n\n    return createWithERC721;\n  }();\n\n  _proto.mint = /*#__PURE__*/function () {\n    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(args) {\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.t0 = this;\n              _context18.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context18.t1 = _context18.sent;\n              _context18.t2 = args;\n              _context18.next = 7;\n              return _context18.t0.mintTo.call(_context18.t0, _context18.t1, _context18.t2);\n\n            case 7:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function mint(_x35) {\n      return _mint.apply(this, arguments);\n    }\n\n    return mint;\n  }();\n\n  _proto.mintTo = /*#__PURE__*/function () {\n    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(to, args, data) {\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              _context19.next = 3;\n              return this.sendTransaction(\"mint\", [to, args.tokenId, args.amount, data]);\n\n            case 3:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function mintTo(_x36, _x37, _x38) {\n      return _mintTo.apply(this, arguments);\n    }\n\n    return mintTo;\n  }();\n\n  _proto.mintBatch = /*#__PURE__*/function () {\n    var _mintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(args) {\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.t0 = this;\n              _context20.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context20.t1 = _context20.sent;\n              _context20.t2 = args;\n              _context20.next = 7;\n              return _context20.t0.mintBatchTo.call(_context20.t0, _context20.t1, _context20.t2);\n\n            case 7:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function mintBatch(_x39) {\n      return _mintBatch.apply(this, arguments);\n    }\n\n    return mintBatch;\n  }();\n\n  _proto.mintBatchTo = /*#__PURE__*/function () {\n    var _mintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(to, args, data) {\n      var ids, amounts;\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              ids = args.map(function (a) {\n                return a.tokenId;\n              });\n              amounts = args.map(function (a) {\n                return a.amount;\n              });\n              _context21.next = 5;\n              return this.sendTransaction(\"mintBatch\", [to, ids, amounts, data]);\n\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function mintBatchTo(_x40, _x41, _x42) {\n      return _mintBatchTo.apply(this, arguments);\n    }\n\n    return mintBatchTo;\n  }()\n  /**\r\n   * Burn NFT\r\n   *\r\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The token ID of the NFT you want to burn\r\n   * const tokenId = 0;\r\n   * // The number of specified NFTs you want to burn\r\n   * const amount = 1\r\n   *\r\n   * await module.burn({ tokenId, amount });\r\n   * ```\r\n   */\n  ;\n\n  _proto.burn = /*#__PURE__*/function () {\n    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(args) {\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.t0 = this;\n              _context22.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context22.t1 = _context22.sent;\n              _context22.t2 = args;\n              _context22.next = 7;\n              return _context22.t0.burnFrom.call(_context22.t0, _context22.t1, _context22.t2);\n\n            case 7:\n              return _context22.abrupt(\"return\", _context22.sent);\n\n            case 8:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function burn(_x43) {\n      return _burn.apply(this, arguments);\n    }\n\n    return burn;\n  }();\n\n  _proto.burnBatch = /*#__PURE__*/function () {\n    var _burnBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(args) {\n      return runtime_1.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.t0 = this;\n              _context23.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context23.t1 = _context23.sent;\n              _context23.t2 = args;\n              _context23.next = 7;\n              return _context23.t0.burnBatchFrom.call(_context23.t0, _context23.t1, _context23.t2);\n\n            case 7:\n              return _context23.abrupt(\"return\", _context23.sent);\n\n            case 8:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function burnBatch(_x44) {\n      return _burnBatch.apply(this, arguments);\n    }\n\n    return burnBatch;\n  }();\n\n  _proto.burnFrom = /*#__PURE__*/function () {\n    var _burnFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(account, args) {\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return this.sendTransaction(\"burn\", [account, args.tokenId, args.amount]);\n\n            case 2:\n              return _context24.abrupt(\"return\", _context24.sent);\n\n            case 3:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this);\n    }));\n\n    function burnFrom(_x45, _x46) {\n      return _burnFrom.apply(this, arguments);\n    }\n\n    return burnFrom;\n  }();\n\n  _proto.burnBatchFrom = /*#__PURE__*/function () {\n    var _burnBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(account, args) {\n      var ids, amounts;\n      return runtime_1.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              ids = args.map(function (a) {\n                return a.tokenId;\n              });\n              amounts = args.map(function (a) {\n                return a.amount;\n              });\n              _context25.next = 4;\n              return this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n\n            case 4:\n              return _context25.abrupt(\"return\", _context25.sent);\n\n            case 5:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25, this);\n    }));\n\n    function burnBatchFrom(_x47, _x48) {\n      return _burnBatchFrom.apply(this, arguments);\n    }\n\n    return burnBatchFrom;\n  }();\n\n  _proto.transferFrom = /*#__PURE__*/function () {\n    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(from, to, args, data) {\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              _context26.next = 3;\n              return this.sendTransaction(\"safeTransferFrom\", [from, to, args.tokenId, args.amount, data]);\n\n            case 3:\n              return _context26.abrupt(\"return\", _context26.sent);\n\n            case 4:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26, this);\n    }));\n\n    function transferFrom(_x49, _x50, _x51, _x52) {\n      return _transferFrom.apply(this, arguments);\n    }\n\n    return transferFrom;\n  }()\n  /**\r\n   * Transfer Many NFTs\r\n   *\r\n   * @remarks Transfer NFTs from the one wallet to another.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to send the NFT from\r\n   * const fromAddress = \"{{wallet_address}}\";\r\n   * // Address of the wallet you want to send the NFT to\r\n   * const toAddress = \"0x...\";\r\n   *\r\n   * // The data of the NFTs you want to send\r\n   * const data = [{\r\n   *   tokenId: 1, // The token ID of the NFT you want to send\r\n   *   amount: 1, // The number of this NFT you want to send\r\n   * }, {\r\n   *   tokenId: 2,\r\n   *   amount: 1,\r\n   * }]\r\n   *\r\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\r\n   * await module.transferBatchFrom(fromAddress, toAddress, data);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transferBatchFrom = /*#__PURE__*/function () {\n    var _transferBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(from, to, args, data) {\n      var ids, amounts;\n      return runtime_1.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              ids = args.map(function (a) {\n                return a.tokenId;\n              });\n              amounts = args.map(function (a) {\n                return a.amount;\n              });\n              _context27.next = 5;\n              return this.sendTransaction(\"safeBatchTransferFrom\", [from, to, ids, amounts, data]);\n\n            case 5:\n              return _context27.abrupt(\"return\", _context27.sent);\n\n            case 6:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27, this);\n    }));\n\n    function transferBatchFrom(_x53, _x54, _x55, _x56) {\n      return _transferBatchFrom.apply(this, arguments);\n    }\n\n    return transferBatchFrom;\n  }();\n\n  _proto.setRoyaltyBps = /*#__PURE__*/function () {\n    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(amount) {\n      var _yield$this$getMetada, metadata, encoded, uri;\n\n      return runtime_1.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return this.getMetadata(false);\n\n            case 2:\n              _yield$this$getMetada = _context28.sent;\n              metadata = _yield$this$getMetada.metadata;\n              encoded = [];\n\n              if (metadata) {\n                _context28.next = 7;\n                break;\n              }\n\n              throw new Error(\"No metadata found, this module might be invalid!\");\n\n            case 7:\n              metadata.seller_fee_basis_points = amount;\n              _context28.t0 = this.sdk.getStorage();\n              _context28.t1 = _extends({}, metadata);\n              _context28.t2 = this.address;\n              _context28.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context28.t3 = _context28.sent;\n              _context28.next = 16;\n              return _context28.t0.uploadMetadata.call(_context28.t0, _context28.t1, _context28.t2, _context28.t3);\n\n            case 16:\n              uri = _context28.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setRoyaltyBps\", [amount]));\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [uri]));\n              _context28.next = 21;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 21:\n              return _context28.abrupt(\"return\", _context28.sent);\n\n            case 22:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28, this);\n    }));\n\n    function setRoyaltyBps(_x57) {\n      return _setRoyaltyBps.apply(this, arguments);\n    }\n\n    return setRoyaltyBps;\n  }();\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee29$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context29.sent;\n              _context29.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context29.abrupt(\"return\", _context29.sent);\n\n            case 6:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee29, this);\n    }));\n\n    function setModuleMetadata(_x58) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }()\n  /**\r\n   * `getOwned` is a convenience method for getting all owned tokens\r\n   * for a particular wallet.\r\n   *\r\n   * @param _address - The address to check for token ownership\r\n   * @returns An array of BundleMetadata objects that are owned by the address\r\n   */\n  ;\n\n  _proto.getOwned = /*#__PURE__*/function () {\n    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(_address) {\n      var _this3 = this;\n\n      var address, maxId, balances, ownedBalances;\n      return runtime_1.wrap(function _callee31$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              if (!_address) {\n                _context31.next = 4;\n                break;\n              }\n\n              _context31.t0 = _address;\n              _context31.next = 7;\n              break;\n\n            case 4:\n              _context31.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context31.t0 = _context31.sent;\n\n            case 7:\n              address = _context31.t0;\n              _context31.next = 10;\n              return this.readOnlyContract.nextTokenId();\n\n            case 10:\n              maxId = _context31.sent;\n              _context31.next = 13;\n              return this.readOnlyContract.balanceOfBatch(Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys()));\n\n            case 13:\n              balances = _context31.sent;\n              ownedBalances = balances.map(function (b, i) {\n                return {\n                  tokenId: i,\n                  balance: b\n                };\n              }).filter(function (b) {\n                return b.balance.gt(0);\n              });\n              _context31.next = 17;\n              return Promise.all(ownedBalances.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(item) {\n                  var token;\n                  return runtime_1.wrap(function _callee30$(_context30) {\n                    while (1) {\n                      switch (_context30.prev = _context30.next) {\n                        case 0:\n                          _context30.next = 2;\n                          return _this3.get(item.tokenId.toString());\n\n                        case 2:\n                          token = _context30.sent;\n                          return _context30.abrupt(\"return\", _extends({}, token, {\n                            ownedByAddress: item.balance\n                          }));\n\n                        case 4:\n                        case \"end\":\n                          return _context30.stop();\n                      }\n                    }\n                  }, _callee30);\n                }));\n\n                return function (_x60) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n\n            case 17:\n              return _context31.abrupt(\"return\", _context31.sent);\n\n            case 18:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, _callee31, this);\n    }));\n\n    function getOwned(_x59) {\n      return _getOwned.apply(this, arguments);\n    }\n\n    return getOwned;\n  }()\n  /**\r\n   * Gets the royalty BPS (basis points) of the contract\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyBps = /*#__PURE__*/function () {\n    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32() {\n      return runtime_1.wrap(function _callee32$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return this.readOnlyContract.royaltyBps();\n\n            case 2:\n              return _context32.abrupt(\"return\", _context32.sent);\n\n            case 3:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, _callee32, this);\n    }));\n\n    function getRoyaltyBps() {\n      return _getRoyaltyBps.apply(this, arguments);\n    }\n\n    return getRoyaltyBps;\n  }()\n  /**\r\n   * Gets the address of the royalty recipient\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyRecipientAddress = /*#__PURE__*/function () {\n    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33() {\n      var _metadata$metadata;\n\n      var metadata;\n      return runtime_1.wrap(function _callee33$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return this.getMetadata();\n\n            case 2:\n              metadata = _context33.sent;\n\n              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {\n                _context33.next = 5;\n                break;\n              }\n\n              return _context33.abrupt(\"return\", metadata.metadata.fee_recipient);\n\n            case 5:\n              return _context33.abrupt(\"return\", \"\");\n\n            case 6:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, _callee33, this);\n    }));\n\n    function getRoyaltyRecipientAddress() {\n      return _getRoyaltyRecipientAddress.apply(this, arguments);\n    }\n\n    return getRoyaltyRecipientAddress;\n  }();\n\n  _proto.isTransferRestricted = /*#__PURE__*/function () {\n    var _isTransferRestricted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34() {\n      return runtime_1.wrap(function _callee34$(_context34) {\n        while (1) {\n          switch (_context34.prev = _context34.next) {\n            case 0:\n              return _context34.abrupt(\"return\", this.readOnlyContract.transfersRestricted());\n\n            case 1:\n            case \"end\":\n              return _context34.stop();\n          }\n        }\n      }, _callee34, this);\n    }));\n\n    function isTransferRestricted() {\n      return _isTransferRestricted.apply(this, arguments);\n    }\n\n    return isTransferRestricted;\n  }();\n\n  _proto.setRestrictedTransfer = /*#__PURE__*/function () {\n    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee35(restricted) {\n      return runtime_1.wrap(function _callee35$(_context35) {\n        while (1) {\n          switch (_context35.prev = _context35.next) {\n            case 0:\n              if (restricted === void 0) {\n                restricted = false;\n              }\n\n              _context35.t0 = this;\n              _context35.t1 = [\"admin\"];\n              _context35.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context35.t2 = _context35.sent;\n              _context35.next = 8;\n              return _context35.t0.onlyRoles.call(_context35.t0, _context35.t1, _context35.t2);\n\n            case 8:\n              _context35.next = 10;\n              return this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n\n            case 10:\n              return _context35.abrupt(\"return\", _context35.sent);\n\n            case 11:\n            case \"end\":\n              return _context35.stop();\n          }\n        }\n      }, _callee35, this);\n    }));\n\n    function setRestrictedTransfer(_x61) {\n      return _setRestrictedTransfer.apply(this, arguments);\n    }\n\n    return setRestrictedTransfer;\n  }();\n\n  return BundleModule;\n}(ModuleWithRoles);\n\nBundleModule.moduleType = ModuleType.BUNDLE;\nBundleModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];\n/**\r\n * @internal\r\n */\n\nfunction isMetadataEqual(old, changed) {\n  if (typeof old === \"object\" && typeof changed === \"object\") {\n    var oldKeys = Object.keys(old).sort();\n    var changedKeys = Object.keys(changed).sort();\n\n    if (oldKeys === changedKeys) {\n      for (var i = 0; i < oldKeys.length; i++) {\n        if (!isMetadataEqual(old[oldKeys[i]], changed[changedKeys[i]])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return old === changed;\n}\n\nvar ListingType;\n\n(function (ListingType) {\n  ListingType[ListingType[\"Direct\"] = 0] = \"Direct\";\n  ListingType[ListingType[\"Auction\"] = 1] = \"Auction\";\n})(ListingType || (ListingType = {}));\n\nvar ClaimConditionType;\n\n(function (ClaimConditionType) {\n  ClaimConditionType[ClaimConditionType[\"StartTime\"] = 0] = \"StartTime\";\n  ClaimConditionType[ClaimConditionType[\"LimitPerWallet\"] = 1] = \"LimitPerWallet\";\n  ClaimConditionType[ClaimConditionType[\"MerkleRoot\"] = 2] = \"MerkleRoot\";\n  ClaimConditionType[ClaimConditionType[\"WaitTimeBetweenClaims\"] = 3] = \"WaitTimeBetweenClaims\";\n})(ClaimConditionType || (ClaimConditionType = {}));\n\nvar ProposalState;\n\n(function (ProposalState) {\n  ProposalState[ProposalState[\"Pending\"] = 0] = \"Pending\";\n  ProposalState[ProposalState[\"Active\"] = 1] = \"Active\";\n  ProposalState[ProposalState[\"Canceled\"] = 2] = \"Canceled\";\n  ProposalState[ProposalState[\"Defeated\"] = 3] = \"Defeated\";\n  ProposalState[ProposalState[\"Succeeded\"] = 4] = \"Succeeded\";\n  ProposalState[ProposalState[\"Queued\"] = 5] = \"Queued\";\n  ProposalState[ProposalState[\"Expired\"] = 6] = \"Expired\";\n  ProposalState[ProposalState[\"Executed\"] = 7] = \"Executed\";\n})(ProposalState || (ProposalState = {}));\n\nvar VoteType;\n\n(function (VoteType) {\n  VoteType[VoteType[\"Against\"] = 0] = \"Against\";\n  VoteType[VoteType[\"For\"] = 1] = \"For\";\n  VoteType[VoteType[\"Abstain\"] = 2] = \"Abstain\";\n})(VoteType || (VoteType = {}));\n\nvar ClaimEligibility;\n\n(function (ClaimEligibility) {\n  ClaimEligibility[\"NotEnoughSupply\"] = \"There is not enough supply to claim.\";\n  ClaimEligibility[\"AddressNotAllowed\"] = \"This address is not on the allowlist.\";\n  ClaimEligibility[\"WaitBeforeNextClaimTransaction\"] = \"Not enough time since last claim transaction. Please wait.\";\n  ClaimEligibility[\"AlreadyClaimed\"] = \"You have already claimed the token.\";\n  ClaimEligibility[\"NotEnoughTokens\"] = \"There are not enough tokens in the wallet to pay for the claim.\";\n  ClaimEligibility[\"NoActiveClaimPhase\"] = \"There is no active claim phase at the moment. Please check back in later.\";\n})(ClaimEligibility || (ClaimEligibility = {}));\n\nvar ClaimConditionPhase = /*#__PURE__*/function () {\n  // In seconds\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  function ClaimConditionPhase(createSnapshotFunc) {\n    this._conditionStartTime = Math.floor(Date.now() / 1000);\n    this._currencyAddress = \"\";\n    this._price = 0;\n    this._maxQuantity = BigNumber.from(0);\n    this._quantityLimitPerTransaction = ethers.constants.MaxUint256;\n    this._merkleRootHash = hexZeroPad([0], 32);\n    this._merkleCondition = undefined;\n    this._snapshot = undefined;\n    this.createSnapshot = void 0;\n    this._waitInSeconds = 0;\n    this.createSnapshot = createSnapshotFunc;\n  }\n  /**\r\n   * Set the price claim condition for the drop.\r\n   *\r\n   * @param price - The price of the currency in wei. Must be >= 0.\r\n   * @param tokenAddress - The address of an ERC20 contract to use as the currency for the claim. By default this is the native currency address which is 0x0000000000000000000000000000000000000000 address.\r\n   */\n\n\n  var _proto = ClaimConditionPhase.prototype;\n\n  _proto.setPrice = function setPrice(price, tokenAddress) {\n    if (tokenAddress === void 0) {\n      tokenAddress = AddressZero;\n    }\n\n    if (!isAddress$1(tokenAddress)) {\n      throw new InvalidAddressError(tokenAddress);\n    }\n\n    !(price >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Price cannot be negative\") : invariant(false) : void 0;\n    this._price = price;\n    this._currencyAddress = tokenAddress;\n    return this;\n  }\n  /**\r\n   * Set the start time for the claim condition.\r\n   *\r\n   * @param startTime - The start time for the claim condition. Can be a Date object or a number of seconds since the epoch.\r\n   */\n  ;\n\n  _proto.setConditionStartTime = function setConditionStartTime(when) {\n    if (typeof when === \"number\") {\n      this._conditionStartTime = Math.floor(when);\n    } else {\n      // if its starting in the past, just set it to now\n      this._conditionStartTime = Math.floor(when.getTime() / 1000);\n    }\n\n    return this;\n  }\n  /**\r\n   * Override the maxQuantity for the claim condition after creating the phase.\r\n   *\r\n   * @param maxQuantity - The max quantity NFTs that can be claimed in this phase.\r\n   */\n  ;\n\n  _proto.setMaxQuantity = function setMaxQuantity(maxQuantity) {\n    this._maxQuantity = maxQuantity;\n    return this;\n  }\n  /**\r\n   * The max quantity of NFTs that can be claimed in a single transaction.\r\n   *\r\n   * @param max - The max quantity NFTs that can be claimed in a single transaction.\r\n   */\n  ;\n\n  _proto.setMaxQuantityPerTransaction = function setMaxQuantityPerTransaction(max) {\n    var maxQuantity = BigNumber.from(max);\n    !maxQuantity.gte(1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Max quantity per transaction must be > 0\") : invariant(false) : void 0;\n    this._quantityLimitPerTransaction = maxQuantity;\n    return this;\n  }\n  /**\r\n   * Sets a merkle root hash for the claim condition.\r\n   *\r\n   * @param root - The merkle root hash\r\n   */\n  ;\n\n  _proto.setMerkleRoot = function setMerkleRoot(root) {\n    this._merkleRootHash = root;\n    return this;\n  }\n  /**\r\n   * Sets a snapshot for the claim condition. You can use a snapshot\r\n   * to verify a merkle tree condition.\r\n   *\r\n   * @param root - The merkle root hash\r\n   */\n  ;\n\n  _proto.setSnapshot = function setSnapshot(addresses) {\n    this._snapshot = addresses;\n    return this;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getSnapshot = function getSnapshot() {\n    return this._merkleCondition;\n  }\n  /**\r\n   * Helper method that provides defaults for each claim condition.\r\n   * @internal\r\n   */\n  ;\n\n  _proto.buildPublicClaimCondition = /*#__PURE__*/function () {\n    var _buildPublicClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n      var _this$_merkleConditio;\n\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this._snapshot) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 3;\n              return this.createSnapshot(this._snapshot);\n\n            case 3:\n              this._merkleCondition = _context.sent;\n\n            case 4:\n              return _context.abrupt(\"return\", {\n                startTimestamp: BigNumber.from(this._conditionStartTime.toString()),\n                pricePerToken: this._price,\n                currency: this._currencyAddress || AddressZero,\n                maxMintSupply: this._maxQuantity,\n                waitTimeSecondsLimitPerTransaction: this._waitInSeconds,\n                quantityLimitPerTransaction: this._quantityLimitPerTransaction,\n                currentMintSupply: 0,\n                merkleRoot: (_this$_merkleConditio = this._merkleCondition) != null && _this$_merkleConditio.merkleRoot ? this._merkleCondition.merkleRoot : this._merkleRootHash\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function buildPublicClaimCondition() {\n      return _buildPublicClaimCondition.apply(this, arguments);\n    }\n\n    return buildPublicClaimCondition;\n  }()\n  /**\r\n   * Wait time enforced after calling `claim` before the next `claim` can be called.\r\n   *\r\n   * @param waitInSeconds - The wait time in seconds.\r\n   */\n  ;\n\n  _proto.setWaitTimeBetweenClaims = function setWaitTimeBetweenClaims(waitInSeconds) {\n    this._waitInSeconds = waitInSeconds;\n    return this;\n  };\n\n  return ClaimConditionPhase;\n}();\n\nvar ClaimConditionFactory = /*#__PURE__*/function () {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  function ClaimConditionFactory(createSnapshotFunc) {\n    this.phases = [];\n    this.createSnapshot = void 0;\n    this.createSnapshot = createSnapshotFunc;\n  }\n  /**\r\n   * Used internally when creating a drop module/updating\r\n   * the claim conditions of a drop module.\r\n   *\r\n   * @internal\r\n   *\r\n   * @returns - The claim conditions that will be used when validating a users claim transaction.\r\n   */\n\n\n  var _proto = ClaimConditionFactory.prototype;\n\n  _proto.buildConditions = /*#__PURE__*/function () {\n    var _buildConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n      var sorted;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              sorted = [];\n              _context.next = 3;\n              return Promise.all(this.phases.map(function (c) {\n                return c.buildPublicClaimCondition();\n              })).then(function (publicClaimConditions) {\n                // TODO: write test to ensure they're sorted by start time, earliest first\n                sorted = publicClaimConditions.sort(function (a, b) {\n                  if (a.startTimestamp.eq(b.startTimestamp)) {\n                    return 0;\n                  } else if (a.startTimestamp.gt(b.startTimestamp)) {\n                    return 1;\n                  } else {\n                    return -1;\n                  }\n                });\n              });\n\n            case 3:\n              return _context.abrupt(\"return\", sorted);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function buildConditions() {\n      return _buildConditions.apply(this, arguments);\n    }\n\n    return buildConditions;\n  }()\n  /**\r\n   * Used internally when creating a drop module/updating\r\n   * the claim conditions of a drop module.\r\n   *\r\n   * @internal\r\n   *\r\n   * @returns - The claim conditions that will be used when validating a users claim transaction.\r\n   */\n  ;\n\n  _proto.buildConditionsForDropV1 = /*#__PURE__*/function () {\n    var _buildConditionsForDropV = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {\n      var conditions, sorted;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Promise.all(this.phases.map(function (c) {\n                return c.buildPublicClaimCondition();\n              }));\n\n            case 2:\n              conditions = _context2.sent;\n              conditions = conditions.map(function (c) {\n                var now = Math.floor(Date.now() / 1000);\n                return _extends({}, c, {\n                  startTimestamp: c.startTimestamp.lt(now) ? BigNumber.from(0) : c.startTimestamp.sub(now)\n                });\n              }); // TODO: write test to ensure they're sorted by start time, earliest first\n\n              sorted = conditions.sort(function (a, b) {\n                if (a.startTimestamp.eq(b.startTimestamp)) {\n                  return 0;\n                } else if (a.startTimestamp.gt(b.startTimestamp)) {\n                  return 1;\n                } else {\n                  return -1;\n                }\n              });\n              return _context2.abrupt(\"return\", sorted);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function buildConditionsForDropV1() {\n      return _buildConditionsForDropV.apply(this, arguments);\n    }\n\n    return buildConditionsForDropV1;\n  }()\n  /**\r\n   * Converts a set of generic `PublicClaimCondition`s into a `ClaimConditionFactory`\r\n   *\r\n   * @param conditions - The conditions to load, should be returned directly from the contract.\r\n   * @returns - The loaded claim condition factory.\r\n   */\n  ;\n\n  _proto.fromPublicClaimConditions = function fromPublicClaimConditions(conditions) {\n    var phases = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(conditions), _step; !(_step = _iterator()).done;) {\n      var condition = _step.value;\n      var phase = new ClaimConditionPhase(this.createSnapshot); // If there's a price, there must also be an associated currency\n\n      if (condition.currency) {\n        phase.setPrice(condition.pricePerToken, condition.currency);\n      }\n\n      if (condition.maxMintSupply) {\n        phase.setMaxQuantity(condition.maxMintSupply);\n      }\n\n      phase.setConditionStartTime(new Date(condition.startTimestamp.toNumber() * 1000));\n      phases.push(phase);\n    }\n\n    this.phases = phases;\n    return this;\n  }\n  /**\r\n   * Creates a new claim 'phase' with its own set of claim conditions\r\n   *\r\n   * @param startTime - The start time of the phase in epoch seconds or a `Date` object.\r\n   * @param maxQuantity - The max quantity of the phase. By default, this is set to be infinite. In most cases, if your drop only\r\n   has a single phase, you don't need to override this value. If your drop has multiple phases, you should override this value and specify how many tokens are available for each specific phase.\r\n    * @param maxQuantityPerTransaction - The maximum number of claims that can be made in a single transaction. By default, this is set to infinite which means that there is no limit.\r\n   *\r\n   * @returns - The claim condition builder.\r\n   */\n  ;\n\n  _proto.newClaimPhase = function newClaimPhase(_ref) {\n    var startTime = _ref.startTime,\n        _ref$maxQuantity = _ref.maxQuantity,\n        maxQuantity = _ref$maxQuantity === void 0 ? ethers.constants.MaxUint256 : _ref$maxQuantity,\n        _ref$maxQuantityPerTr = _ref.maxQuantityPerTransaction,\n        maxQuantityPerTransaction = _ref$maxQuantityPerTr === void 0 ? ethers.constants.MaxUint256 : _ref$maxQuantityPerTr;\n    var condition = new ClaimConditionPhase(this.createSnapshot);\n    condition.setConditionStartTime(startTime);\n    condition.setMaxQuantity(BigNumber.from(maxQuantity));\n    condition.setMaxQuantityPerTransaction(BigNumber.from(maxQuantityPerTransaction));\n    this.phases.push(condition);\n    return condition;\n  }\n  /**\r\n   * Removes a claim condition phase from the factory.\r\n   *\r\n   * @param phase - The phase to remove\r\n   */\n  ;\n\n  _proto.deleteClaimPhase = /*#__PURE__*/function () {\n    var _deleteClaimPhase = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(index) {\n      var sorted, cleared;\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(index < 0 || index >= this.phases.length)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              _context3.next = 4;\n              return this.buildConditions();\n\n            case 4:\n              sorted = _context3.sent;\n              cleared = sorted.splice(index - 1, 1);\n              this.fromPublicClaimConditions(cleared);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function deleteClaimPhase(_x) {\n      return _deleteClaimPhase.apply(this, arguments);\n    }\n\n    return deleteClaimPhase;\n  }()\n  /**\r\n   * @deprecated - Use {@link ClaimConditionFactory.deleteClaimPhase} instead.\r\n   */\n  ;\n\n  _proto.removeClaimPhase = function removeClaimPhase(_index) {\n    throw new FunctionDeprecatedError(\"deleteClaimPhase\");\n  }\n  /**\r\n   * Helper method fetches all snapshots from a factory.\r\n   *\r\n   * @returns - All snapshots in the condition factory.\r\n   */\n  ;\n\n  _proto.allSnapshots = function allSnapshots() {\n    return this.phases.filter(function (p) {\n      return p.getSnapshot() !== undefined;\n    }).map(function (p) {\n      return p.getSnapshot();\n    });\n  };\n\n  return ClaimConditionFactory;\n}();\n/**\r\n * The model for a claim proof. Currently we support only an address\r\n * in the leaf of the merkle tree.\r\n */\n\n\nvar ClaimProof = function ClaimProof() {\n  this.address = \"\";\n  this.proof = [];\n};\n\n__decorate([JsonProperty(\"address\", String)], ClaimProof.prototype, \"address\", void 0);\n\n__decorate([JsonProperty(\"proof\", [String])], ClaimProof.prototype, \"proof\", void 0);\n\nClaimProof = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"ClaimProof\")], ClaimProof);\n\nvar Snapshot = function Snapshot() {\n  this.merkleRoot = \"\";\n  this.claims = [];\n};\n\n__decorate([JsonProperty(\"merkleRoot\", String)], Snapshot.prototype, \"merkleRoot\", void 0);\n\n__decorate([JsonProperty(\"claims\", [ClaimProof])], Snapshot.prototype, \"claims\", void 0);\n\nSnapshot = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject(\"Snapshot\")], Snapshot);\n/**\r\n * @internal\r\n */\n\nvar OLD_CLAIM_ABI = [{\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"_tokenId\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint256\",\n    name: \"_quantity\",\n    type: \"uint256\"\n  }, {\n    internalType: \"bytes32[]\",\n    name: \"_proofs\",\n    type: \"bytes32[]\"\n  }],\n  name: \"claim\",\n  outputs: [],\n  stateMutability: \"payable\",\n  type: \"function\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"uint256\",\n    name: \"claimConditionIndex\",\n    type: \"uint256\"\n  }, {\n    indexed: true,\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"claimer\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"quantityClaimed\",\n    type: \"uint256\"\n  }],\n  name: \"ClaimedTokens\",\n  type: \"event\"\n}];\n/**\r\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getBundleDropModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar BundleDropModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(BundleDropModule, _ModuleWithRoles);\n\n  function BundleDropModule() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ModuleWithRoles.call.apply(_ModuleWithRoles, [this].concat(args)) || this;\n    _this._shouldCheckVersion = true;\n    _this._isNewClaim = false;\n    return _this;\n  }\n\n  var _proto = BundleDropModule.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return BundleDropModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return LazyMintERC1155__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return BundleDropModule.moduleType;\n  };\n\n  _proto.transformResultToClaimCondition = /*#__PURE__*/function () {\n    var _transformResultToClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(pm) {\n      var cv;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getCurrencyValue(this.providerOrSigner, pm.currency, pm.pricePerToken);\n\n            case 2:\n              cv = _context.sent;\n              return _context.abrupt(\"return\", {\n                startTimestamp: new Date(BigNumber.from(pm.startTimestamp).toNumber() * 1000),\n                maxMintSupply: pm.maxClaimableSupply.toString(),\n                currentMintSupply: pm.supplyClaimed.toString(),\n                availableSupply: BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed).toString(),\n                quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n                waitTimeSecondsLimitPerTransaction: pm.waitTimeInSecondsBetweenClaims.toString(),\n                price: BigNumber.from(pm.pricePerToken),\n                pricePerToken: BigNumber.from(pm.pricePerToken),\n                currency: pm.currency,\n                currencyContract: pm.currency,\n                currencyMetadata: cv,\n                merkleRoot: pm.merkleRoot\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function transformResultToClaimCondition(_x) {\n      return _transformResultToClaimCondition.apply(this, arguments);\n    }\n\n    return transformResultToClaimCondition;\n  }();\n\n  _proto.getTokenMetadata = /*#__PURE__*/function () {\n    var _getTokenMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(tokenId) {\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage());\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getTokenMetadata$1(_x2) {\n      return _getTokenMetadata2.apply(this, arguments);\n    }\n\n    return getTokenMetadata$1;\n  }();\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(tokenId) {\n      var _yield$Promise$all, supply, metadata;\n\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Promise.all([this.readOnlyContract.totalSupply(tokenId)[\"catch\"](function () {\n                return BigNumber.from(0);\n              }), this.getTokenMetadata(tokenId)]);\n\n            case 2:\n              _yield$Promise$all = _context3.sent;\n              supply = _yield$Promise$all[0];\n              metadata = _yield$Promise$all[1];\n              return _context3.abrupt(\"return\", {\n                supply: supply,\n                metadata: metadata\n              });\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function get(_x3) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * Get NFT Data\r\n   *\r\n   * @remarks Get data associated with NFTs in this module.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Get data associated with every NFT in the module\r\n   * const nfts = await module.getAll();\r\n   * console.log(nfts);\r\n   * ```\r\n   *\r\n   * @returns The NFT metadata for all NFTs in the module.\r\n   */\n  ;\n\n  _proto.getAll = /*#__PURE__*/function () {\n    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {\n      var _this2 = this;\n\n      var maxId;\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 2:\n              maxId = _context4.sent.toNumber();\n              _context4.next = 5;\n              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {\n                return _this2.get(i.toString());\n              }));\n\n            case 5:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getAll() {\n      return _getAll.apply(this, arguments);\n    }\n\n    return getAll;\n  }()\n  /**\r\n   * `getOwned` is a convenience method for getting all owned tokens\r\n   * for a particular wallet.\r\n   *\r\n   * @param _address - The address to check for token ownership\r\n   * @returns An array of BundleMetadata objects that are owned by the address\r\n   */\n  ;\n\n  _proto.getOwned = /*#__PURE__*/function () {\n    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(_address) {\n      var _this3 = this;\n\n      var address, maxId, balances, ownedBalances;\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!_address) {\n                _context6.next = 4;\n                break;\n              }\n\n              _context6.t0 = _address;\n              _context6.next = 7;\n              break;\n\n            case 4:\n              _context6.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context6.t0 = _context6.sent;\n\n            case 7:\n              address = _context6.t0;\n              _context6.next = 10;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 10:\n              maxId = _context6.sent;\n              _context6.next = 13;\n              return this.readOnlyContract.balanceOfBatch(Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys()));\n\n            case 13:\n              balances = _context6.sent;\n              ownedBalances = balances.map(function (b, i) {\n                return {\n                  tokenId: i,\n                  balance: b\n                };\n              }).filter(function (b) {\n                return b.balance.gt(0);\n              });\n              _context6.next = 17;\n              return Promise.all(ownedBalances.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(b) {\n                  return runtime_1.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return _this3.get(b.tokenId.toString());\n\n                        case 2:\n                          return _context5.abrupt(\"return\", _context5.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x5) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n\n            case 17:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 18:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function getOwned(_x4) {\n      return _getOwned.apply(this, arguments);\n    }\n\n    return getOwned;\n  }();\n\n  _proto.getActiveClaimCondition = /*#__PURE__*/function () {\n    var _getActiveClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(tokenId) {\n      var index;\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.readOnlyContract.getIndexOfActiveCondition(tokenId);\n\n            case 2:\n              index = _context7.sent;\n              _context7.t0 = this;\n              _context7.next = 6;\n              return this.readOnlyContract.getClaimConditionAtIndex(tokenId, index);\n\n            case 6:\n              _context7.t1 = _context7.sent;\n              return _context7.abrupt(\"return\", _context7.t0.transformResultToClaimCondition.call(_context7.t0, _context7.t1));\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getActiveClaimCondition(_x6) {\n      return _getActiveClaimCondition.apply(this, arguments);\n    }\n\n    return getActiveClaimCondition;\n  }();\n\n  _proto.getAllClaimConditions = /*#__PURE__*/function () {\n    var _getAllClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(tokenId) {\n      var _this4 = this;\n\n      var claimCondition, count, conditions, i;\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.readOnlyContract.claimConditions(tokenId);\n\n            case 2:\n              claimCondition = _context8.sent;\n              count = claimCondition.totalConditionCount.toNumber();\n              conditions = [];\n              i = 0;\n\n            case 6:\n              if (!(i < count)) {\n                _context8.next = 15;\n                break;\n              }\n\n              _context8.t0 = conditions;\n              _context8.next = 10;\n              return this.readOnlyContract.getClaimConditionAtIndex(tokenId, i);\n\n            case 10:\n              _context8.t1 = _context8.sent;\n\n              _context8.t0.push.call(_context8.t0, _context8.t1);\n\n            case 12:\n              i++;\n              _context8.next = 6;\n              break;\n\n            case 15:\n              return _context8.abrupt(\"return\", Promise.all(conditions.map(function (c) {\n                return _this4.transformResultToClaimCondition(c);\n              })));\n\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getAllClaimConditions(_x7) {\n      return _getAllClaimConditions.apply(this, arguments);\n    }\n\n    return getAllClaimConditions;\n  }();\n\n  _proto.getDefaultSaleRecipient = /*#__PURE__*/function () {\n    var _getDefaultSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.readOnlyContract.defaultSaleRecipient();\n\n            case 2:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getDefaultSaleRecipient() {\n      return _getDefaultSaleRecipient.apply(this, arguments);\n    }\n\n    return getDefaultSaleRecipient;\n  }();\n\n  _proto.getSaleRecipient = /*#__PURE__*/function () {\n    var _getSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(tokenId) {\n      var saleRecipient;\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.readOnlyContract.saleRecipient(tokenId);\n\n            case 2:\n              saleRecipient = _context10.sent;\n\n              if (!(saleRecipient === AddressZero)) {\n                _context10.next = 5;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", this.readOnlyContract.defaultSaleRecipient());\n\n            case 5:\n              return _context10.abrupt(\"return\", saleRecipient);\n\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function getSaleRecipient(_x8) {\n      return _getSaleRecipient.apply(this, arguments);\n    }\n\n    return getSaleRecipient;\n  }()\n  /**\r\n   * Get NFT Balance\r\n   *\r\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check NFT balance\r\n   * const address = \"{{wallet_address}}\";\r\n   * // The token ID of the NFT you want to check the wallets balance of\r\n   * const tokenId = \"0\"\r\n   *\r\n   * const balance = await module.balanceOf(address, tokenId);\r\n   * console.log(balance);\r\n   * ```\r\n   */\n  ;\n\n  _proto.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(address, tokenId) {\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.readOnlyContract.balanceOf(address, tokenId);\n\n            case 2:\n              return _context11.abrupt(\"return\", _context11.sent);\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function balanceOf(_x9, _x10) {\n      return _balanceOf.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }();\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(tokenId) {\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.t0 = this;\n              _context12.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context12.t1 = _context12.sent;\n              _context12.t2 = tokenId;\n              _context12.next = 7;\n              return _context12.t0.balanceOf.call(_context12.t0, _context12.t1, _context12.t2);\n\n            case 7:\n              return _context12.abrupt(\"return\", _context12.sent);\n\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function balance(_x11) {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }();\n\n  _proto.isApproved = /*#__PURE__*/function () {\n    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(address, operator) {\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.readOnlyContract.isApprovedForAll(address, operator);\n\n            case 2:\n              return _context13.abrupt(\"return\", _context13.sent);\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function isApproved(_x12, _x13) {\n      return _isApproved.apply(this, arguments);\n    }\n\n    return isApproved;\n  }() // write functions\n\n  /*\r\n   *\r\n   * @deprecated - {@link BundleDropModule.mintBatch}\r\n   */\n  ;\n\n  _proto.lazyMintBatch = /*#__PURE__*/function () {\n    var _lazyMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(metadatas) {\n      var _this5 = this;\n\n      var tokenIds;\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.createBatch(metadatas);\n\n            case 2:\n              tokenIds = _context14.sent;\n              _context14.next = 5;\n              return Promise.all(tokenIds.map(function (t) {\n                return _this5.get(t.toString());\n              }));\n\n            case 5:\n              return _context14.abrupt(\"return\", _context14.sent);\n\n            case 6:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function lazyMintBatch(_x14) {\n      return _lazyMintBatch.apply(this, arguments);\n    }\n\n    return lazyMintBatch;\n  }()\n  /**\r\n   * Create Many NFTs\r\n   *\r\n   * @remarks Create and mint NFTs.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Custom metadata of the NFTs to create\r\n   * const metadatas = [{\r\n   *   name: \"Cool NFT\",\r\n   *   description: \"This is a cool NFT\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\r\n   * }, {\r\n   *   name: \"Cool NFT\",\r\n   *   description: \"This is a cool NFT\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\r\n   * }];\r\n   *\r\n   * await module.createBatch(metadatas);\r\n   * ```\r\n   */\n  ;\n\n  _proto.createBatch = /*#__PURE__*/function () {\n    var _createBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(metadatas) {\n      var startFileNumber, _yield$this$sdk$getSt, baseUri, receipt, event, startingIndex, endingIndex, tokenIds, i;\n\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 2:\n              startFileNumber = _context15.sent;\n              _context15.next = 5;\n              return this.sdk.getStorage().uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n\n            case 5:\n              _yield$this$sdk$getSt = _context15.sent;\n              baseUri = _yield$this$sdk$getSt.baseUri;\n              _context15.next = 9;\n              return this.sendTransaction(\"lazyMint\", [metadatas.length, \"\" + (baseUri.endsWith(\"/\") ? baseUri : baseUri + \"/\")]);\n\n            case 9:\n              receipt = _context15.sent;\n              event = this.parseEventLogs(\"LazyMintedTokens\", receipt == null ? void 0 : receipt.logs);\n              startingIndex = event[0], endingIndex = event[1];\n              tokenIds = [];\n\n              for (i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n                tokenIds.push(i.toString());\n              }\n\n              return _context15.abrupt(\"return\", tokenIds);\n\n            case 15:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function createBatch(_x15) {\n      return _createBatch.apply(this, arguments);\n    }\n\n    return createBatch;\n  }();\n\n  _proto.setSaleRecipient = /*#__PURE__*/function () {\n    var _setSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(tokenId, recipient) {\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              return _context16.abrupt(\"return\", this.sendTransaction(\"setSaleRecipient\", [tokenId, recipient]));\n\n            case 1:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function setSaleRecipient(_x16, _x17) {\n      return _setSaleRecipient.apply(this, arguments);\n    }\n\n    return setSaleRecipient;\n  }();\n\n  _proto.setDefaultSaleRecipient = /*#__PURE__*/function () {\n    var _setDefaultSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(recipient) {\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              return _context17.abrupt(\"return\", this.sendTransaction(\"setDefaultSaleRecipient\", [recipient]));\n\n            case 1:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function setDefaultSaleRecipient(_x18) {\n      return _setDefaultSaleRecipient.apply(this, arguments);\n    }\n\n    return setDefaultSaleRecipient;\n  }();\n\n  _proto.setApproval = /*#__PURE__*/function () {\n    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(operator, approved) {\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              if (approved === void 0) {\n                approved = true;\n              }\n\n              _context18.next = 3;\n              return this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n\n            case 3:\n              return _context18.abrupt(\"return\", _context18.sent);\n\n            case 4:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function setApproval(_x19, _x20) {\n      return _setApproval.apply(this, arguments);\n    }\n\n    return setApproval;\n  }()\n  /**\r\n   * Transfer NFT\r\n   *\r\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the NFT to\r\n   * const toAddress = \"0x...\";\r\n   *\r\n   * // The token ID of the NFT you want to send\r\n   * const tokenId = \"0\";\r\n   *\r\n   * // The number of NFTs you want to send\r\n   * const amount = 1;\r\n   *\r\n   * await module.transfer(toAddress, tokenId, amount);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transfer = /*#__PURE__*/function () {\n    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(to, tokenId, amount, data) {\n      var from;\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              _context19.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              from = _context19.sent;\n              _context19.next = 6;\n              return this.sendTransaction(\"safeTransferFrom\", [from, to, tokenId, amount, data]);\n\n            case 6:\n              return _context19.abrupt(\"return\", _context19.sent);\n\n            case 7:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function transfer(_x21, _x22, _x23, _x24) {\n      return _transfer.apply(this, arguments);\n    }\n\n    return transfer;\n  }()\n  /**\r\n   * Sets public claim conditions for the next minting using the\r\n   * claim condition factory.\r\n   *\r\n   * @param factory - The claim condition factory.\r\n   */\n  ;\n\n  _proto.setClaimCondition = /*#__PURE__*/function () {\n    var _setClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(tokenId, factory) {\n      var conditions, merkleInfo, _yield$this$getMetada, metadata, oldMerkle, existingMerkle, _i, _Object$keys, key, encoded, metadataUri;\n\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return factory.buildConditions();\n\n            case 2:\n              conditions = _context20.sent.map(function (c) {\n                return {\n                  startTimestamp: c.startTimestamp,\n                  maxClaimableSupply: c.maxMintSupply,\n                  supplyClaimed: 0,\n                  quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n                  waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n                  pricePerToken: c.pricePerToken,\n                  currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n                  merkleRoot: c.merkleRoot\n                };\n              });\n              merkleInfo = {};\n              factory.allSnapshots().forEach(function (s) {\n                merkleInfo[s.merkleRoot] = s.snapshotUri;\n              });\n              _context20.next = 7;\n              return this.getMetadata(false);\n\n            case 7:\n              _yield$this$getMetada = _context20.sent;\n              metadata = _yield$this$getMetada.metadata;\n              !metadata ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Metadata is not set, this should never happen\") : invariant(false) : void 0;\n              oldMerkle = metadata[\"merkle\"];\n              existingMerkle = \"merkle\" in metadata ? metadata.merkle : {};\n\n              for (_i = 0, _Object$keys = Object.keys(existingMerkle); _i < _Object$keys.length; _i++) {\n                key = _Object$keys[_i];\n                merkleInfo[key] = existingMerkle[key];\n              }\n\n              metadata[\"merkle\"] = merkleInfo;\n              encoded = [];\n\n              if (isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n                _context20.next = 20;\n                break;\n              }\n\n              _context20.next = 18;\n              return this.sdk.getStorage().upload(JSON.stringify(metadata));\n\n            case 18:\n              metadataUri = _context20.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [metadataUri]));\n\n            case 20:\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setClaimConditions\", [tokenId, conditions]));\n              _context20.next = 23;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 23:\n              return _context20.abrupt(\"return\", _context20.sent);\n\n            case 24:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function setClaimCondition(_x25, _x26) {\n      return _setClaimCondition.apply(this, arguments);\n    }\n\n    return setClaimCondition;\n  }();\n\n  _proto.updateClaimConditions = /*#__PURE__*/function () {\n    var _updateClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(tokenId, factory) {\n      var conditions, merkleInfo, _yield$this$getMetada2, metadata, oldMerkle, existingMerkle, _i2, _Object$keys2, key, encoded, metadataUri;\n\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return factory.buildConditions();\n\n            case 2:\n              conditions = _context21.sent.map(function (c) {\n                return {\n                  startTimestamp: c.startTimestamp,\n                  maxClaimableSupply: c.maxMintSupply,\n                  supplyClaimed: 0,\n                  quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n                  waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n                  pricePerToken: c.pricePerToken,\n                  currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n                  merkleRoot: c.merkleRoot\n                };\n              });\n              merkleInfo = {};\n              factory.allSnapshots().forEach(function (s) {\n                merkleInfo[s.merkleRoot] = s.snapshotUri;\n              });\n              _context21.next = 7;\n              return this.getMetadata(false);\n\n            case 7:\n              _yield$this$getMetada2 = _context21.sent;\n              metadata = _yield$this$getMetada2.metadata;\n              !metadata ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Metadata is not set, this should never happen\") : invariant(false) : void 0;\n              oldMerkle = metadata[\"merkle\"];\n              existingMerkle = \"merkle\" in metadata ? metadata.merkle : {};\n\n              for (_i2 = 0, _Object$keys2 = Object.keys(existingMerkle); _i2 < _Object$keys2.length; _i2++) {\n                key = _Object$keys2[_i2];\n                merkleInfo[key] = existingMerkle[key];\n              }\n\n              metadata[\"merkle\"] = merkleInfo;\n              encoded = [];\n\n              if (isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n                _context21.next = 20;\n                break;\n              }\n\n              _context21.next = 18;\n              return this.sdk.getStorage().upload(JSON.stringify(metadata));\n\n            case 18:\n              metadataUri = _context21.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [metadataUri]));\n\n            case 20:\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"updateClaimConditions\", [tokenId, conditions]));\n              _context21.next = 23;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 23:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 24:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function updateClaimConditions(_x27, _x28) {\n      return _updateClaimConditions.apply(this, arguments);\n    }\n\n    return updateClaimConditions;\n  }()\n  /**\r\n   * Creates a claim condition factory\r\n   *\r\n   * @returns - A new claim condition factory\r\n   */\n  ;\n\n  _proto.getClaimConditionFactory = function getClaimConditionFactory() {\n    var createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    var factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n  /**\r\n   * @deprecated - Use the ClaimConditionFactory instead.\r\n   */\n  ;\n\n  _proto.setPublicClaimConditions = /*#__PURE__*/function () {\n    var _setPublicClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(tokenId, conditions) {\n      var _conditions;\n\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _conditions = conditions.map(function (c) {\n                return {\n                  startTimestamp: c.startTimestamp || 0,\n                  maxClaimableSupply: c.maxClaimableSupply,\n                  supplyClaimed: 0,\n                  quantityLimitPerTransaction: c.quantityLimitPerTransaction || c.maxClaimableSupply,\n                  waitTimeInSecondsBetweenClaims: c.waitTimeInSecondsBetweenClaims || 0,\n                  pricePerToken: c.pricePerToken || 0,\n                  currency: c.currency || AddressZero,\n                  merkleRoot: c.merkleRoot || hexZeroPad([0], 32)\n                };\n              });\n              _context22.next = 3;\n              return this.sendTransaction(\"setClaimConditions\", [tokenId, _conditions]);\n\n            case 3:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function setPublicClaimConditions(_x29, _x30) {\n      return _setPublicClaimConditions.apply(this, arguments);\n    }\n\n    return setPublicClaimConditions;\n  }()\n  /**\r\n   * Returns proofs and the overrides required for the transaction.\r\n   *\r\n   * @returns - `overrides` and `proofs` as an object.\r\n   */\n  ;\n\n  _proto.prepareClaim = /*#__PURE__*/function () {\n    var _prepareClaim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(tokenId, quantity, proofs) {\n      var mintCondition, overrides, addressToClaim, _yield$this$getMetada3, metadata, snapshot, jsonConvert, snapshotData, item, erc20, owner, spender, allowance, totalPrice;\n\n      return runtime_1.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              if (proofs === void 0) {\n                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];\n              }\n\n              _context23.next = 3;\n              return this.getActiveClaimCondition(tokenId);\n\n            case 3:\n              mintCondition = _context23.sent;\n              _context23.next = 6;\n              return this.getCallOverrides();\n\n            case 6:\n              _context23.t0 = _context23.sent;\n\n              if (_context23.t0) {\n                _context23.next = 9;\n                break;\n              }\n\n              _context23.t0 = {};\n\n            case 9:\n              overrides = _context23.t0;\n              _context23.next = 12;\n              return this.getSignerAddress();\n\n            case 12:\n              addressToClaim = _context23.sent;\n              _context23.next = 15;\n              return this.getMetadata();\n\n            case 15:\n              _yield$this$getMetada3 = _context23.sent;\n              metadata = _yield$this$getMetada3.metadata;\n\n              if (mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n                _context23.next = 27;\n                break;\n              }\n\n              _context23.next = 20;\n              return this.sdk.getStorage().get(metadata == null ? void 0 : metadata.merkle[mintCondition.merkleRoot.toString()]);\n\n            case 20:\n              snapshot = _context23.sent;\n              jsonConvert = new JsonConvert();\n              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);\n              item = snapshotData.claims.find(function (c) {\n                return c.address.toLowerCase() === (addressToClaim == null ? void 0 : addressToClaim.toLowerCase());\n              });\n\n              if (!(item === undefined)) {\n                _context23.next = 26;\n                break;\n              }\n\n              throw new Error(\"No claim found for this address\");\n\n            case 26:\n              proofs = item.proof;\n\n            case 27:\n              if (!mintCondition.pricePerToken.gt(0)) {\n                _context23.next = 44;\n                break;\n              }\n\n              if (!isNativeToken(mintCondition.currency)) {\n                _context23.next = 32;\n                break;\n              }\n\n              overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);\n              _context23.next = 44;\n              break;\n\n            case 32:\n              erc20 = ERC20__factory.connect(mintCondition.currency, this.providerOrSigner);\n              _context23.next = 35;\n              return this.getSignerAddress();\n\n            case 35:\n              owner = _context23.sent;\n              spender = this.address;\n              _context23.next = 39;\n              return erc20.allowance(owner, spender);\n\n            case 39:\n              allowance = _context23.sent;\n              totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(BigNumber.from(quantity));\n\n              if (!allowance.lt(totalPrice)) {\n                _context23.next = 44;\n                break;\n              }\n\n              _context23.next = 44;\n              return this.sendContractTransaction(erc20, \"approve\", [spender, allowance.add(totalPrice)]);\n\n            case 44:\n              return _context23.abrupt(\"return\", {\n                overrides: overrides,\n                proofs: proofs\n              });\n\n            case 45:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function prepareClaim(_x31, _x32, _x33) {\n      return _prepareClaim.apply(this, arguments);\n    }\n\n    return prepareClaim;\n  }()\n  /**\r\n   * Claim a token to yourself\r\n   *\r\n   * @param tokenId - Id of the token you want to claim\r\n   * @param quantity - Quantity of the tokens you want to claim\r\n   * @param proofs - Array of proofs\r\n   *\r\n   * @returns - Receipt for the transaction\r\n   */\n  ;\n\n  _proto.claim = /*#__PURE__*/function () {\n    var _claim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(tokenId, quantity, proofs) {\n      var claimData;\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              if (proofs === void 0) {\n                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];\n              }\n\n              _context24.next = 3;\n              return this.prepareClaim(tokenId, quantity, proofs);\n\n            case 3:\n              claimData = _context24.sent;\n              _context24.next = 6;\n              return this.isNewClaim();\n\n            case 6:\n              if (!_context24.sent) {\n                _context24.next = 21;\n                break;\n              }\n\n              _context24.t0 = this;\n              _context24.next = 10;\n              return this.getSignerAddress();\n\n            case 10:\n              _context24.t1 = _context24.sent;\n              _context24.t2 = tokenId;\n              _context24.t3 = quantity;\n              _context24.t4 = claimData.proofs;\n              _context24.t5 = [_context24.t1, _context24.t2, _context24.t3, _context24.t4];\n              _context24.t6 = claimData.overrides;\n              _context24.next = 18;\n              return _context24.t0.sendTransaction.call(_context24.t0, \"claim\", _context24.t5, _context24.t6);\n\n            case 18:\n              return _context24.abrupt(\"return\", _context24.sent);\n\n            case 21:\n              _context24.next = 23;\n              return this.sendContractTransaction(new Contract$1(this.address, OLD_CLAIM_ABI, this.providerOrSigner), \"claim\", [tokenId, quantity, claimData.proofs], claimData.overrides);\n\n            case 23:\n              return _context24.abrupt(\"return\", _context24.sent);\n\n            case 24:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this);\n    }));\n\n    function claim(_x34, _x35, _x36) {\n      return _claim.apply(this, arguments);\n    }\n\n    return claim;\n  }()\n  /**\r\n   * Claim NFTs to Wallet\r\n   *\r\n   * @remarks Let the a specified wallet claim NFTs.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to claim the NFTs\r\n   * const address = \"{{wallet_address}}\";\r\n   *\r\n   * // The number of NFTs to claim\r\n   * const quantity = 1;\r\n   *\r\n   * // The token ID of the NFT you want to claim\r\n   * const tokenId = \"0\"\r\n   *\r\n   * await module.claimTo(tokenId, quantity, address);\r\n   * ```\r\n   *\r\n   * @param tokenId - Id of the token you want to claim\r\n   * @param quantity - Quantity of the tokens you want to claim\r\n   * @param addressToClaim - Address you want to send the token to\r\n   * @param proofs - Array of proofs\r\n   *\r\n   * @returns - Receipt for the transaction\r\n   */\n  ;\n\n  _proto.claimTo = /*#__PURE__*/function () {\n    var _claimTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(tokenId, quantity, addressToClaim, proofs) {\n      var claimData, encoded;\n      return runtime_1.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              if (proofs === void 0) {\n                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];\n              }\n\n              _context25.next = 3;\n              return this.prepareClaim(tokenId, quantity, proofs);\n\n            case 3:\n              claimData = _context25.sent;\n              _context25.next = 6;\n              return this.isNewClaim();\n\n            case 6:\n              if (!_context25.sent) {\n                _context25.next = 10;\n                break;\n              }\n\n              _context25.next = 9;\n              return this.sendTransaction(\"claim\", [addressToClaim, tokenId, quantity, claimData.proofs], claimData.overrides);\n\n            case 9:\n              return _context25.abrupt(\"return\", _context25.sent);\n\n            case 10:\n              encoded = []; // forcing it old version of claim params\n\n              encoded.push(new Contract$1(this.address, OLD_CLAIM_ABI, this.providerOrSigner)[\"interface\"].encodeFunctionData(\"claim\", [tokenId, quantity, claimData.proofs]));\n              _context25.t0 = encoded;\n              _context25.t1 = this.contract[\"interface\"];\n              _context25.next = 16;\n              return this.getSignerAddress();\n\n            case 16:\n              _context25.t2 = _context25.sent;\n              _context25.t3 = addressToClaim;\n              _context25.t4 = tokenId;\n              _context25.t5 = quantity;\n              _context25.t6 = [0];\n              _context25.t7 = [_context25.t2, _context25.t3, _context25.t4, _context25.t5, _context25.t6];\n              _context25.t8 = _context25.t1.encodeFunctionData.call(_context25.t1, \"safeTransferFrom\", _context25.t7);\n\n              _context25.t0.push.call(_context25.t0, _context25.t8);\n\n              _context25.next = 26;\n              return this.sendTransaction(\"multicall\", [encoded], claimData.overrides);\n\n            case 26:\n              return _context25.abrupt(\"return\", _context25.sent);\n\n            case 27:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25, this);\n    }));\n\n    function claimTo(_x37, _x38, _x39, _x40) {\n      return _claimTo.apply(this, arguments);\n    }\n\n    return claimTo;\n  }();\n\n  _proto.burn = /*#__PURE__*/function () {\n    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(tokenId, amount) {\n      var account;\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return this.getSignerAddress();\n\n            case 2:\n              account = _context26.sent;\n              _context26.next = 5;\n              return this.sendTransaction(\"burn\", [account, tokenId, amount]);\n\n            case 5:\n              return _context26.abrupt(\"return\", _context26.sent);\n\n            case 6:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26, this);\n    }));\n\n    function burn(_x41, _x42) {\n      return _burn.apply(this, arguments);\n    }\n\n    return burn;\n  }();\n\n  _proto.transferFrom = /*#__PURE__*/function () {\n    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(from, to, tokenId, amount, data) {\n      return runtime_1.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              _context27.next = 3;\n              return this.sendTransaction(\"safeTransferFrom\", [from, to, tokenId, amount, data]);\n\n            case 3:\n              return _context27.abrupt(\"return\", _context27.sent);\n\n            case 4:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27, this);\n    }));\n\n    function transferFrom(_x43, _x44, _x45, _x46, _x47) {\n      return _transferFrom.apply(this, arguments);\n    }\n\n    return transferFrom;\n  }() // owner functions\n  ;\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context28.sent;\n              _context28.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context28.abrupt(\"return\", _context28.sent);\n\n            case 6:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28, this);\n    }));\n\n    function setModuleMetadata(_x48) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }();\n\n  _proto.setRoyaltyBps = /*#__PURE__*/function () {\n    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(amount) {\n      var _yield$this$getMetada4, metadata, encoded, uri;\n\n      return runtime_1.wrap(function _callee29$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return this.getMetadata(false);\n\n            case 2:\n              _yield$this$getMetada4 = _context29.sent;\n              metadata = _yield$this$getMetada4.metadata;\n              encoded = [];\n\n              if (metadata) {\n                _context29.next = 7;\n                break;\n              }\n\n              throw new Error(\"No metadata found, this module might be invalid!\");\n\n            case 7:\n              metadata.seller_fee_basis_points = amount;\n              _context29.t0 = this.sdk.getStorage();\n              _context29.t1 = _extends({}, metadata);\n              _context29.t2 = this.address;\n              _context29.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context29.t3 = _context29.sent;\n              _context29.next = 16;\n              return _context29.t0.uploadMetadata.call(_context29.t0, _context29.t1, _context29.t2, _context29.t3);\n\n            case 16:\n              uri = _context29.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setRoyaltyBps\", [amount]));\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [uri]));\n              _context29.next = 21;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 21:\n              return _context29.abrupt(\"return\", _context29.sent);\n\n            case 22:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee29, this);\n    }));\n\n    function setRoyaltyBps(_x49) {\n      return _setRoyaltyBps.apply(this, arguments);\n    }\n\n    return setRoyaltyBps;\n  }()\n  /**\r\n   * Gets the royalty BPS (basis points) of the contract\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyBps = /*#__PURE__*/function () {\n    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30() {\n      return runtime_1.wrap(function _callee30$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return this.readOnlyContract.royaltyBps();\n\n            case 2:\n              return _context30.abrupt(\"return\", _context30.sent);\n\n            case 3:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, _callee30, this);\n    }));\n\n    function getRoyaltyBps() {\n      return _getRoyaltyBps.apply(this, arguments);\n    }\n\n    return getRoyaltyBps;\n  }()\n  /**\r\n   * Gets the address of the royalty recipient\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyRecipientAddress = /*#__PURE__*/function () {\n    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31() {\n      var _metadata$metadata;\n\n      var metadata;\n      return runtime_1.wrap(function _callee31$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              _context31.next = 2;\n              return this.getMetadata();\n\n            case 2:\n              metadata = _context31.sent;\n\n              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {\n                _context31.next = 5;\n                break;\n              }\n\n              return _context31.abrupt(\"return\", metadata.metadata.fee_recipient);\n\n            case 5:\n              return _context31.abrupt(\"return\", \"\");\n\n            case 6:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, _callee31, this);\n    }));\n\n    function getRoyaltyRecipientAddress() {\n      return _getRoyaltyRecipientAddress.apply(this, arguments);\n    }\n\n    return getRoyaltyRecipientAddress;\n  }();\n\n  _proto.getClaimConditionsFactory = function getClaimConditionsFactory() {\n    var createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    var factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n  /**\r\n   * Returns the total supply of a specific token\r\n   *\r\n   * @param tokenId - The token ID to get the total supply of\r\n   */\n  ;\n\n  _proto.totalSupply = /*#__PURE__*/function () {\n    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(tokenId) {\n      return runtime_1.wrap(function _callee32$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return this.readOnlyContract.totalSupply(tokenId);\n\n            case 2:\n              return _context32.abrupt(\"return\", _context32.sent);\n\n            case 3:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, _callee32, this);\n    }));\n\n    function totalSupply(_x50) {\n      return _totalSupply.apply(this, arguments);\n    }\n\n    return totalSupply;\n  }()\n  /**\r\n   * Pulls the list of all addresses that have claimed a particular token\r\n   *\r\n   * @beta - This can be very slow for large numbers of token holders\r\n   *\r\n   * @param tokenId - The token id to get the claimers of\r\n   * @returns - A unique list of addresses that claimed the token\r\n   */\n  ;\n\n  _proto.getAllClaimerAddresses = /*#__PURE__*/function () {\n    var _getAllClaimerAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(tokenId) {\n      var a;\n      return runtime_1.wrap(function _callee33$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return this.contract.queryFilter(this.contract.filters.ClaimedTokens(null, BigNumber.from(tokenId)));\n\n            case 2:\n              a = _context33.sent;\n              return _context33.abrupt(\"return\", Array.from(new Set(a.map(function (b) {\n                return b.args.claimer;\n              }))));\n\n            case 4:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, _callee33, this);\n    }));\n\n    function getAllClaimerAddresses(_x51) {\n      return _getAllClaimerAddresses.apply(this, arguments);\n    }\n\n    return getAllClaimerAddresses;\n  }()\n  /**\r\n   * For any claim conditions that a particular wallet is violating,\r\n   * this function returns human readable information about the\r\n   * breaks in the condition that can be used to inform the user.\r\n   *\r\n   * @param tokenId - The token id that would be claimed.\r\n   * @param quantity - The desired quantity that would be claimed.\r\n   * @param addressToCheck - The address that would be claiming the token.\r\n   */\n  ;\n\n  _proto.getClaimIneligibilityReasons = /*#__PURE__*/function () {\n    var _getClaimIneligibilityReasons = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34(tokenId, quantity, addressToCheck) {\n      var reasons, activeConditionIndex, claimCondition, _yield$Promise$all2, merkleRootArray, merkleLower, proofs, hashedAddress, timestampForNextClaim, now, balance, totalPrice, provider, _balance2, _provider, _balance3;\n\n      return runtime_1.wrap(function _callee34$(_context34) {\n        while (1) {\n          switch (_context34.prev = _context34.next) {\n            case 0:\n              reasons = [];\n\n              if (!(addressToCheck === undefined)) {\n                _context34.next = 3;\n                break;\n              }\n\n              throw new Error(\"addressToCheck is required\");\n\n            case 3:\n              _context34.prev = 3;\n              _context34.next = 6;\n              return Promise.all([this.readOnlyContract.getIndexOfActiveCondition(tokenId), this.getActiveClaimCondition(tokenId)]);\n\n            case 6:\n              _yield$Promise$all2 = _context34.sent;\n              activeConditionIndex = _yield$Promise$all2[0];\n              claimCondition = _yield$Promise$all2[1];\n              _context34.next = 18;\n              break;\n\n            case 11:\n              _context34.prev = 11;\n              _context34.t0 = _context34[\"catch\"](3);\n\n              if (!_context34.t0.message.includes(\"no public mint condition.\")) {\n                _context34.next = 16;\n                break;\n              }\n\n              reasons.push(ClaimEligibility.NoActiveClaimPhase);\n              return _context34.abrupt(\"return\", reasons);\n\n            case 16:\n              console.error(\"Failed to get active claim condition\", _context34.t0);\n              throw new Error(\"Failed to get active claim condition\");\n\n            case 18:\n              if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n                reasons.push(ClaimEligibility.NotEnoughSupply);\n              } // check for merkle root inclusion\n\n\n              merkleRootArray = ethers.utils.stripZeros(claimCondition.merkleRoot);\n\n              if (!(merkleRootArray.length > 0)) {\n                _context34.next = 26;\n                break;\n              }\n\n              merkleLower = claimCondition.merkleRoot.toString();\n              _context34.next = 24;\n              return this.getClaimerProofs(merkleLower, addressToCheck);\n\n            case 24:\n              proofs = _context34.sent;\n\n              if (proofs.length === 0) {\n                hashedAddress = ethers.utils.keccak256(addressToCheck).toLowerCase();\n\n                if (hashedAddress !== merkleLower) {\n                  reasons.push(ClaimEligibility.AddressNotAllowed);\n                }\n              }\n\n            // TODO: compute proofs to root, need browser compatibility\n\n            case 26:\n              _context34.next = 28;\n              return this.readOnlyContract.getTimestampForNextValidClaim(tokenId, activeConditionIndex, addressToCheck);\n\n            case 28:\n              timestampForNextClaim = _context34.sent;\n              now = BigNumber.from(Date.now()).div(1000);\n\n              if (!now.lt(timestampForNextClaim)) {\n                _context34.next = 39;\n                break;\n              }\n\n              if (!BigNumber.from(claimCondition.waitTimeSecondsLimitPerTransaction).eq(timestampForNextClaim)) {\n                _context34.next = 38;\n                break;\n              }\n\n              _context34.next = 34;\n              return this.readOnlyContract.balanceOf(addressToCheck, tokenId);\n\n            case 34:\n              balance = _context34.sent;\n\n              if (balance.gte(1)) {\n                reasons.push(ClaimEligibility.AlreadyClaimed);\n              }\n\n              _context34.next = 39;\n              break;\n\n            case 38:\n              reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n\n            case 39:\n              if (!claimCondition.pricePerToken.gt(0)) {\n                _context34.next = 58;\n                break;\n              }\n\n              totalPrice = claimCondition.pricePerToken.mul(quantity);\n\n              if (!isNativeToken(claimCondition.currency)) {\n                _context34.next = 51;\n                break;\n              }\n\n              _context34.next = 44;\n              return this.getProvider();\n\n            case 44:\n              provider = _context34.sent;\n              _context34.next = 47;\n              return provider.getBalance(addressToCheck);\n\n            case 47:\n              _balance2 = _context34.sent;\n\n              if (_balance2.lt(totalPrice)) {\n                reasons.push(ClaimEligibility.NotEnoughTokens);\n              }\n\n              _context34.next = 58;\n              break;\n\n            case 51:\n              _context34.next = 53;\n              return this.getProvider();\n\n            case 53:\n              _provider = _context34.sent;\n              _context34.next = 56;\n              return ERC20__factory.connect(claimCondition.currency, _provider).balanceOf(addressToCheck);\n\n            case 56:\n              _balance3 = _context34.sent;\n\n              if (_balance3.lt(totalPrice)) {\n                reasons.push(ClaimEligibility.NotEnoughTokens);\n              }\n\n            case 58:\n              return _context34.abrupt(\"return\", reasons);\n\n            case 59:\n            case \"end\":\n              return _context34.stop();\n          }\n        }\n      }, _callee34, this, [[3, 11]]);\n    }));\n\n    function getClaimIneligibilityReasons(_x52, _x53, _x54) {\n      return _getClaimIneligibilityReasons.apply(this, arguments);\n    }\n\n    return getClaimIneligibilityReasons;\n  }()\n  /*\r\n   * Checks to see if the current signer can claim the specified number of tokens.\r\n   *\r\n   * @param tokenId - The id of the token to check.\r\n   * @param quantity - The quantity of tokens to check.\r\n   * @param addressToCheck - The wallet address to check.\r\n   * @returns - True if the current signer can claim the specified number of tokens, false otherwise.\r\n   */\n  ;\n\n  _proto.canClaim = /*#__PURE__*/function () {\n    var _canClaim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee35(tokenId, quantity, addressToCheck) {\n      return runtime_1.wrap(function _callee35$(_context35) {\n        while (1) {\n          switch (_context35.prev = _context35.next) {\n            case 0:\n              if (addressToCheck) {\n                _context35.next = 4;\n                break;\n              }\n\n              _context35.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              addressToCheck = _context35.sent;\n\n            case 4:\n              _context35.next = 6;\n              return this.getClaimIneligibilityReasons(tokenId, quantity, addressToCheck);\n\n            case 6:\n              _context35.t0 = _context35.sent.length;\n              return _context35.abrupt(\"return\", _context35.t0 === 0);\n\n            case 8:\n            case \"end\":\n              return _context35.stop();\n          }\n        }\n      }, _callee35, this);\n    }));\n\n    function canClaim(_x55, _x56, _x57) {\n      return _canClaim.apply(this, arguments);\n    }\n\n    return canClaim;\n  }()\n  /**\r\n   * Fetches the proof for the current signer for a particular wallet.\r\n   *\r\n   * @param merkleRoot - The merkle root of the condition to check.\r\n   * @returns - The proof for the current signer for the specified condition.\r\n   */\n  ;\n\n  _proto.getClaimerProofs = /*#__PURE__*/function () {\n    var _getClaimerProofs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee36(merkleRoot, addressToClaim) {\n      var _yield$this$getMetada5, metadata, snapshot, jsonConvert, snapshotData, item;\n\n      return runtime_1.wrap(function _callee36$(_context36) {\n        while (1) {\n          switch (_context36.prev = _context36.next) {\n            case 0:\n              if (addressToClaim) {\n                _context36.next = 4;\n                break;\n              }\n\n              _context36.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              addressToClaim = _context36.sent;\n\n            case 4:\n              _context36.next = 6;\n              return this.getMetadata();\n\n            case 6:\n              _yield$this$getMetada5 = _context36.sent;\n              metadata = _yield$this$getMetada5.metadata;\n              _context36.next = 10;\n              return this.sdk.getStorage().get(metadata == null ? void 0 : metadata.merkle[merkleRoot]);\n\n            case 10:\n              snapshot = _context36.sent;\n              jsonConvert = new JsonConvert();\n              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);\n              item = snapshotData.claims.find(function (c) {\n                var _addressToClaim;\n\n                return c.address.toLowerCase() === ((_addressToClaim = addressToClaim) == null ? void 0 : _addressToClaim.toLowerCase());\n              });\n\n              if (!(item === undefined)) {\n                _context36.next = 16;\n                break;\n              }\n\n              return _context36.abrupt(\"return\", []);\n\n            case 16:\n              return _context36.abrupt(\"return\", item.proof);\n\n            case 17:\n            case \"end\":\n              return _context36.stop();\n          }\n        }\n      }, _callee36, this);\n    }));\n\n    function getClaimerProofs(_x58, _x59) {\n      return _getClaimerProofs.apply(this, arguments);\n    }\n\n    return getClaimerProofs;\n  }();\n\n  _proto.isTransferRestricted = /*#__PURE__*/function () {\n    var _isTransferRestricted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee37() {\n      return runtime_1.wrap(function _callee37$(_context37) {\n        while (1) {\n          switch (_context37.prev = _context37.next) {\n            case 0:\n              return _context37.abrupt(\"return\", this.readOnlyContract.transfersRestricted());\n\n            case 1:\n            case \"end\":\n              return _context37.stop();\n          }\n        }\n      }, _callee37, this);\n    }));\n\n    function isTransferRestricted() {\n      return _isTransferRestricted.apply(this, arguments);\n    }\n\n    return isTransferRestricted;\n  }();\n\n  _proto.setRestrictedTransfer = /*#__PURE__*/function () {\n    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee38(restricted) {\n      return runtime_1.wrap(function _callee38$(_context38) {\n        while (1) {\n          switch (_context38.prev = _context38.next) {\n            case 0:\n              if (restricted === void 0) {\n                restricted = false;\n              }\n\n              _context38.t0 = this;\n              _context38.t1 = [\"admin\"];\n              _context38.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context38.t2 = _context38.sent;\n              _context38.next = 8;\n              return _context38.t0.onlyRoles.call(_context38.t0, _context38.t1, _context38.t2);\n\n            case 8:\n              _context38.next = 10;\n              return this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n\n            case 10:\n              return _context38.abrupt(\"return\", _context38.sent);\n\n            case 11:\n            case \"end\":\n              return _context38.stop();\n          }\n        }\n      }, _callee38, this);\n    }));\n\n    function setRestrictedTransfer(_x60) {\n      return _setRestrictedTransfer.apply(this, arguments);\n    }\n\n    return setRestrictedTransfer;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.isNewClaim = /*#__PURE__*/function () {\n    var _isNewClaim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee39() {\n      return runtime_1.wrap(function _callee39$(_context39) {\n        while (1) {\n          switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return this.checkVersion();\n\n            case 2:\n              return _context39.abrupt(\"return\", this._isNewClaim);\n\n            case 3:\n            case \"end\":\n              return _context39.stop();\n          }\n        }\n      }, _callee39, this);\n    }));\n\n    function isNewClaim() {\n      return _isNewClaim.apply(this, arguments);\n    }\n\n    return isNewClaim;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.checkVersion = /*#__PURE__*/function () {\n    var _checkVersion = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee40() {\n      return runtime_1.wrap(function _callee40$(_context40) {\n        while (1) {\n          switch (_context40.prev = _context40.next) {\n            case 0:\n              if (!this._shouldCheckVersion) {\n                _context40.next = 11;\n                break;\n              }\n\n              _context40.prev = 1;\n              _context40.next = 4;\n              return this.readOnlyContract.VERSION();\n\n            case 4:\n              this._isNewClaim = true;\n              _context40.next = 10;\n              break;\n\n            case 7:\n              _context40.prev = 7;\n              _context40.t0 = _context40[\"catch\"](1);\n              this._isNewClaim = false;\n\n            case 10:\n              this._shouldCheckVersion = false;\n\n            case 11:\n            case \"end\":\n              return _context40.stop();\n          }\n        }\n      }, _callee40, this, [[1, 7]]);\n    }));\n\n    function checkVersion() {\n      return _checkVersion.apply(this, arguments);\n    }\n\n    return checkVersion;\n  }();\n\n  return BundleDropModule;\n}(ModuleWithRoles);\n\nBundleDropModule.moduleType = ModuleType.BUNDLE_DROP;\nBundleDropModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.transfer];\n/**\r\n * Access this module by calling {@link ThirdwebSDK.getDatastoreModule}\r\n * @alpha\r\n */\n\nvar DatastoreModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(DatastoreModule, _ModuleWithRoles);\n\n  function DatastoreModule() {\n    return _ModuleWithRoles.apply(this, arguments) || this;\n  }\n\n  var _proto = DatastoreModule.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return DatastoreModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return DataStore__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return DatastoreModule.moduleType;\n  };\n\n  _proto.getUint = /*#__PURE__*/function () {\n    var _getUint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(key) {\n      var keyHash;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              keyHash = ethers.utils.id(key.toString());\n              _context.next = 3;\n              return this.readOnlyContract.getUint(keyHash);\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getUint(_x) {\n      return _getUint.apply(this, arguments);\n    }\n\n    return getUint;\n  }() // write functions\n  ;\n\n  _proto.setUint = /*#__PURE__*/function () {\n    var _setUint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(key, value) {\n      var keyHash;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              keyHash = ethers.utils.id(key.toString());\n              _context2.next = 3;\n              return this.sendTransaction(\"setUint\", [keyHash, value]);\n\n            case 3:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function setUint(_x2, _x3) {\n      return _setUint.apply(this, arguments);\n    }\n\n    return setUint;\n  }();\n\n  return DatastoreModule;\n}(ModuleWithRoles);\n\nDatastoreModule.moduleType = ModuleType.DATASTORE;\nDatastoreModule.roles = [RolesMap.admin, RolesMap.editor];\nvar DEFAULT_QUERY_ALL_COUNT = 100;\n/**\r\n * @internal\r\n */\n\nvar ABI_V1_22_0 = [{\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"uint256\",\n    name: \"claimConditionIndex\",\n    type: \"uint256\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"claimer\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"startTokenId\",\n    type: \"uint256\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"quantityClaimed\",\n    type: \"uint256\"\n  }],\n  name: \"ClaimedTokens\",\n  type: \"event\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"_quantity\",\n    type: \"uint256\"\n  }, {\n    internalType: \"bytes32[]\",\n    name: \"_proofs\",\n    type: \"bytes32[]\"\n  }],\n  name: \"claim\",\n  outputs: [],\n  stateMutability: \"payable\",\n  type: \"function\"\n}];\n/**\r\n * @internal\r\n */\n\nvar ABI_V1_24_0 = [{\n  anonymous: false,\n  inputs: [{\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"startTokenId\",\n    type: \"uint256\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"endTokenId\",\n    type: \"uint256\"\n  }, {\n    indexed: false,\n    internalType: \"string\",\n    name: \"baseURI\",\n    type: \"string\"\n  }],\n  name: \"LazyMintedTokens\",\n  type: \"event\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"_amount\",\n    type: \"uint256\"\n  }, {\n    internalType: \"string\",\n    name: \"_baseURIForTokens\",\n    type: \"string\"\n  }],\n  name: \"lazyMint\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}];\n/**\r\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getDropModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar DropModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(DropModule, _ModuleWithRoles);\n  /**\r\n   * @internal\r\n   */\n\n\n  function DropModule(providerOrSigner, address, options, sdk) {\n    var _this;\n\n    _this = _ModuleWithRoles.call(this, providerOrSigner, address, options, sdk) || this;\n    _this._shouldCheckVersion = true;\n    _this._isV0 = false;\n    _this._version = 0;\n    _this.v1Module = void 0;\n    _this.v1Module = new DropV1Module(providerOrSigner, address, options, sdk);\n    return _this;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  var _proto = DropModule.prototype;\n\n  _proto.setProviderOrSigner = function setProviderOrSigner(providerOrSigner) {\n    var _this$v1Module;\n\n    _ModuleWithRoles.prototype.setProviderOrSigner.call(this, providerOrSigner);\n\n    (_this$v1Module = this.v1Module) == null ? void 0 : _this$v1Module.setProviderOrSigner(providerOrSigner);\n  }\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return DropModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return LazyMintERC721__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return DropModule.moduleType;\n  };\n\n  _proto.getTokenMetadata = /*#__PURE__*/function () {\n    var _getTokenMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId) {\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage());\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getTokenMetadata$1(_x) {\n      return _getTokenMetadata2.apply(this, arguments);\n    }\n\n    return getTokenMetadata$1;\n  }();\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(tokenId) {\n      var _yield$Promise$all, owner, metadata;\n\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Promise.all([this.ownerOf(tokenId)[\"catch\"](function () {\n                return AddressZero;\n              }), this.getTokenMetadata(tokenId)]);\n\n            case 2:\n              _yield$Promise$all = _context2.sent;\n              owner = _yield$Promise$all[0];\n              metadata = _yield$Promise$all[1];\n              return _context2.abrupt(\"return\", {\n                owner: owner,\n                metadata: metadata\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function get(_x2) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * Get All NFTs\r\n   *\r\n   * @remarks Get all the data associated with every NFT in this module.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const nfts = await module.getAll();\r\n   * console.log(nfts);\r\n   * ```\r\n   *\r\n   * @returns The NFT metadata for all NFTs in the module.\r\n   */\n  ;\n\n  _proto.getAll = /*#__PURE__*/function () {\n    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(queryParams) {\n      var _this2 = this;\n\n      var start, count, maxId;\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context3.sent) {\n                _context3.next = 4;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", this.v1Module.getAll(queryParams));\n\n            case 4:\n              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();\n              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n              _context3.t0 = Math;\n              _context3.next = 9;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 9:\n              _context3.t1 = _context3.sent.toNumber();\n              _context3.t2 = start + count;\n              maxId = _context3.t0.min.call(_context3.t0, _context3.t1, _context3.t2);\n              _context3.next = 14;\n              return Promise.all(Array.from(Array(maxId - start).keys()).map(function (i) {\n                return _this2.get((start + i).toString());\n              }));\n\n            case 14:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getAll(_x3) {\n      return _getAll.apply(this, arguments);\n    }\n\n    return getAll;\n  }();\n\n  _proto.getAllUnclaimed = /*#__PURE__*/function () {\n    var _getAllUnclaimed = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(queryParams) {\n      var _this3 = this;\n\n      var start, count, maxId, unmintedId;\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context4.sent) {\n                _context4.next = 4;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", this.v1Module.getAllUnclaimed());\n\n            case 4:\n              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();\n              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n              _context4.t0 = BigNumber;\n              _context4.t1 = Math;\n              _context4.next = 10;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 10:\n              _context4.t2 = _context4.sent.toNumber();\n              _context4.t3 = start + count;\n              _context4.t4 = _context4.t1.min.call(_context4.t1, _context4.t2, _context4.t3);\n              maxId = _context4.t0.from.call(_context4.t0, _context4.t4);\n              _context4.next = 16;\n              return this.readOnlyContract.nextTokenIdToClaim();\n\n            case 16:\n              unmintedId = _context4.sent;\n              _context4.next = 19;\n              return Promise.all(Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map(function (i) {\n                return _this3.getTokenMetadata(unmintedId.add(i).toString());\n              }));\n\n            case 19:\n              return _context4.abrupt(\"return\", _context4.sent.map(function (metadata) {\n                return {\n                  owner: AddressZero,\n                  metadata: metadata\n                };\n              }));\n\n            case 20:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getAllUnclaimed(_x4) {\n      return _getAllUnclaimed.apply(this, arguments);\n    }\n\n    return getAllUnclaimed;\n  }();\n\n  _proto.getAllClaimed = /*#__PURE__*/function () {\n    var _getAllClaimed = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(queryParams) {\n      var _this4 = this;\n\n      var start, count, maxId;\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context5.sent) {\n                _context5.next = 4;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", this.v1Module.getAllClaimed());\n\n            case 4:\n              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();\n              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n              _context5.t0 = Math;\n              _context5.next = 9;\n              return this.readOnlyContract.nextTokenIdToClaim();\n\n            case 9:\n              _context5.t1 = _context5.sent.toNumber();\n              _context5.t2 = start + count;\n              maxId = _context5.t0.min.call(_context5.t0, _context5.t1, _context5.t2);\n              _context5.next = 14;\n              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {\n                return _this4.get(i.toString());\n              }));\n\n            case 14:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 15:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getAllClaimed(_x5) {\n      return _getAllClaimed.apply(this, arguments);\n    }\n\n    return getAllClaimed;\n  }();\n\n  _proto.ownerOf = /*#__PURE__*/function () {\n    var _ownerOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(tokenId) {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.readOnlyContract.ownerOf(tokenId);\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function ownerOf(_x6) {\n      return _ownerOf.apply(this, arguments);\n    }\n\n    return ownerOf;\n  }();\n\n  _proto.getDefaultSaleRecipient = /*#__PURE__*/function () {\n    var _getDefaultSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.readOnlyContract.defaultSaleRecipient();\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getDefaultSaleRecipient() {\n      return _getDefaultSaleRecipient.apply(this, arguments);\n    }\n\n    return getDefaultSaleRecipient;\n  }();\n\n  _proto.setDefaultSaleRecipient = /*#__PURE__*/function () {\n    var _setDefaultSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(recipient) {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.sendTransaction(\"setDefaultSaleRecipient\", [recipient]);\n\n            case 2:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function setDefaultSaleRecipient(_x7) {\n      return _setDefaultSaleRecipient.apply(this, arguments);\n    }\n\n    return setDefaultSaleRecipient;\n  }()\n  /**\r\n   * Get Owned NFTs\r\n   *\r\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to get the NFTs of\r\n   * const address = \"{{wallet_address}}\";\r\n   * const nfts = await module.getOwned(address);\r\n   * console.log(nfts);\r\n   * ```\r\n   *\r\n   * @returns The NFT metadata for all NFTs in the module.\r\n   */\n  ;\n\n  _proto.getOwned = /*#__PURE__*/function () {\n    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(_address) {\n      var _this5 = this;\n\n      var address, balance, indices, tokenIds;\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!_address) {\n                _context9.next = 4;\n                break;\n              }\n\n              _context9.t0 = _address;\n              _context9.next = 7;\n              break;\n\n            case 4:\n              _context9.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context9.t0 = _context9.sent;\n\n            case 7:\n              address = _context9.t0;\n              _context9.next = 10;\n              return this.readOnlyContract.balanceOf(address);\n\n            case 10:\n              balance = _context9.sent;\n              indices = Array.from(Array(balance.toNumber()).keys());\n              _context9.next = 14;\n              return Promise.all(indices.map(function (i) {\n                return _this5.readOnlyContract.tokenOfOwnerByIndex(address, i);\n              }));\n\n            case 14:\n              tokenIds = _context9.sent;\n              _context9.next = 17;\n              return Promise.all(tokenIds.map(function (tokenId) {\n                return _this5.get(tokenId.toString());\n              }));\n\n            case 17:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 18:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getOwned(_x8) {\n      return _getOwned.apply(this, arguments);\n    }\n\n    return getOwned;\n  }()\n  /**\r\n   * @deprecated - For backward compatibility reason\r\n   */\n  ;\n\n  _proto.transformResultToMintCondition = function transformResultToMintCondition(pm) {\n    return {\n      startTimestamp: pm.startTimestamp,\n      maxMintSupply: pm.maxClaimableSupply,\n      currentMintSupply: pm.supplyClaimed,\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction,\n      waitTimeSecondsLimitPerTransaction: pm.waitTimeInSecondsBetweenClaims,\n      pricePerToken: pm.pricePerToken,\n      currency: pm.currency,\n      merkleRoot: pm.merkleRoot\n    };\n  };\n\n  _proto.transformResultToClaimCondition = /*#__PURE__*/function () {\n    var _transformResultToClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(pm) {\n      var cv;\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return getCurrencyValue(this.providerOrSigner, pm.currency, pm.pricePerToken);\n\n            case 2:\n              cv = _context10.sent;\n              return _context10.abrupt(\"return\", {\n                startTimestamp: new Date(BigNumber.from(pm.startTimestamp).toNumber() * 1000),\n                maxMintSupply: pm.maxClaimableSupply.toString(),\n                currentMintSupply: pm.supplyClaimed.toString(),\n                availableSupply: BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed).toString(),\n                quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n                waitTimeSecondsLimitPerTransaction: pm.waitTimeInSecondsBetweenClaims.toString(),\n                price: BigNumber.from(pm.pricePerToken),\n                pricePerToken: BigNumber.from(pm.pricePerToken),\n                currency: pm.currency,\n                currencyContract: pm.currency,\n                currencyMetadata: cv,\n                merkleRoot: pm.merkleRoot\n              });\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function transformResultToClaimCondition(_x9) {\n      return _transformResultToClaimCondition.apply(this, arguments);\n    }\n\n    return transformResultToClaimCondition;\n  }()\n  /**\r\n   * @deprecated - Use {@link DropModule.getActiveClaimCondition} instead\r\n   */\n  ;\n\n  _proto.getActiveMintCondition = /*#__PURE__*/function () {\n    var _getActiveMintCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {\n      var index;\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context11.sent) {\n                _context11.next = 4;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", this.v1Module.getActiveMintCondition());\n\n            case 4:\n              _context11.next = 6;\n              return this.readOnlyContract.getIndexOfActiveCondition();\n\n            case 6:\n              index = _context11.sent;\n              _context11.t0 = this;\n              _context11.next = 10;\n              return this.readOnlyContract.getClaimConditionAtIndex(index);\n\n            case 10:\n              _context11.t1 = _context11.sent;\n              return _context11.abrupt(\"return\", _context11.t0.transformResultToMintCondition.call(_context11.t0, _context11.t1));\n\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function getActiveMintCondition() {\n      return _getActiveMintCondition.apply(this, arguments);\n    }\n\n    return getActiveMintCondition;\n  }();\n\n  _proto.getActiveClaimCondition = /*#__PURE__*/function () {\n    var _getActiveClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {\n      var index, mc;\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context12.sent) {\n                _context12.next = 4;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", this.v1Module.getActiveClaimCondition());\n\n            case 4:\n              _context12.next = 6;\n              return this.readOnlyContract.getIndexOfActiveCondition();\n\n            case 6:\n              index = _context12.sent;\n              _context12.next = 9;\n              return this.readOnlyContract.getClaimConditionAtIndex(index);\n\n            case 9:\n              mc = _context12.sent;\n              _context12.next = 12;\n              return this.transformResultToClaimCondition(mc);\n\n            case 12:\n              return _context12.abrupt(\"return\", _context12.sent);\n\n            case 13:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function getActiveClaimCondition() {\n      return _getActiveClaimCondition.apply(this, arguments);\n    }\n\n    return getActiveClaimCondition;\n  }()\n  /**\r\n   * @deprecated - Use {@link DropModule.getAllClaimConditions} instead\r\n   */\n  ;\n\n  _proto.getAllMintConditions = /*#__PURE__*/function () {\n    var _getAllMintConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {\n      var claimCondition, count, conditions, i;\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context13.sent) {\n                _context13.next = 4;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", this.v1Module.getAllMintConditions());\n\n            case 4:\n              _context13.next = 6;\n              return this.readOnlyContract.claimConditions();\n\n            case 6:\n              claimCondition = _context13.sent;\n              count = claimCondition.totalConditionCount.toNumber();\n              conditions = [];\n              i = 0;\n\n            case 10:\n              if (!(i < count)) {\n                _context13.next = 21;\n                break;\n              }\n\n              _context13.t0 = conditions;\n              _context13.t1 = this;\n              _context13.next = 15;\n              return this.readOnlyContract.getClaimConditionAtIndex(i);\n\n            case 15:\n              _context13.t2 = _context13.sent;\n              _context13.t3 = _context13.t1.transformResultToMintCondition.call(_context13.t1, _context13.t2);\n\n              _context13.t0.push.call(_context13.t0, _context13.t3);\n\n            case 18:\n              i++;\n              _context13.next = 10;\n              break;\n\n            case 21:\n              return _context13.abrupt(\"return\", conditions);\n\n            case 22:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getAllMintConditions() {\n      return _getAllMintConditions.apply(this, arguments);\n    }\n\n    return getAllMintConditions;\n  }();\n\n  _proto.getAllClaimConditions = /*#__PURE__*/function () {\n    var _getAllClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {\n      var _this6 = this;\n\n      var claimCondition, count, conditions, i;\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context14.sent) {\n                _context14.next = 4;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", this.v1Module.getAllClaimConditions());\n\n            case 4:\n              _context14.next = 6;\n              return this.readOnlyContract.claimConditions();\n\n            case 6:\n              claimCondition = _context14.sent;\n              count = claimCondition.totalConditionCount.toNumber();\n              conditions = [];\n              i = 0;\n\n            case 10:\n              if (!(i < count)) {\n                _context14.next = 19;\n                break;\n              }\n\n              _context14.t0 = conditions;\n              _context14.next = 14;\n              return this.readOnlyContract.getClaimConditionAtIndex(i);\n\n            case 14:\n              _context14.t1 = _context14.sent;\n\n              _context14.t0.push.call(_context14.t0, _context14.t1);\n\n            case 16:\n              i++;\n              _context14.next = 10;\n              break;\n\n            case 19:\n              return _context14.abrupt(\"return\", Promise.all(conditions.map(function (c) {\n                return _this6.transformResultToClaimCondition(c);\n              })));\n\n            case 20:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function getAllClaimConditions() {\n      return _getAllClaimConditions.apply(this, arguments);\n    }\n\n    return getAllClaimConditions;\n  }();\n\n  _proto.totalSupply = /*#__PURE__*/function () {\n    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15() {\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context15.sent) {\n                _context15.next = 4;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", this.v1Module.totalSupply());\n\n            case 4:\n              _context15.next = 6;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 6:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function totalSupply() {\n      return _totalSupply.apply(this, arguments);\n    }\n\n    return totalSupply;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.maxTotalSupply = /*#__PURE__*/function () {\n    var _maxTotalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16() {\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context16.sent) {\n                _context16.next = 4;\n                break;\n              }\n\n              return _context16.abrupt(\"return\", this.v1Module.maxTotalSupply());\n\n            case 4:\n              _context16.next = 6;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 6:\n              return _context16.abrupt(\"return\", _context16.sent);\n\n            case 7:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function maxTotalSupply() {\n      return _maxTotalSupply.apply(this, arguments);\n    }\n\n    return maxTotalSupply;\n  }();\n\n  _proto.totalUnclaimedSupply = /*#__PURE__*/function () {\n    var _totalUnclaimedSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17() {\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context17.sent) {\n                _context17.next = 4;\n                break;\n              }\n\n              return _context17.abrupt(\"return\", this.v1Module.totalUnclaimedSupply());\n\n            case 4:\n              _context17.next = 6;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 6:\n              _context17.t0 = _context17.sent;\n              _context17.next = 9;\n              return this.totalClaimedSupply();\n\n            case 9:\n              _context17.t1 = _context17.sent;\n              return _context17.abrupt(\"return\", _context17.t0.sub.call(_context17.t0, _context17.t1));\n\n            case 11:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function totalUnclaimedSupply() {\n      return _totalUnclaimedSupply.apply(this, arguments);\n    }\n\n    return totalUnclaimedSupply;\n  }();\n\n  _proto.totalClaimedSupply = /*#__PURE__*/function () {\n    var _totalClaimedSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18() {\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context18.sent) {\n                _context18.next = 4;\n                break;\n              }\n\n              return _context18.abrupt(\"return\", this.v1Module.totalClaimedSupply());\n\n            case 4:\n              _context18.next = 6;\n              return this.readOnlyContract.nextTokenIdToClaim();\n\n            case 6:\n              return _context18.abrupt(\"return\", _context18.sent);\n\n            case 7:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function totalClaimedSupply() {\n      return _totalClaimedSupply.apply(this, arguments);\n    }\n\n    return totalClaimedSupply;\n  }()\n  /**\r\n   * Get NFT Balance\r\n   *\r\n   * @remarks Get a wallets NFT balance (number of NFTs in this module owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check NFT balance\r\n   * const address = \"{{wallet_address}}\";\r\n   *\r\n   * const balance = await module.balanceOf(address);\r\n   * console.log(balance);\r\n   * ```\r\n   */\n  ;\n\n  _proto.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(address) {\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.readOnlyContract.balanceOf(address);\n\n            case 2:\n              return _context19.abrupt(\"return\", _context19.sent);\n\n            case 3:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function balanceOf(_x10) {\n      return _balanceOf.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }();\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20() {\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.t0 = this;\n              _context20.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context20.t1 = _context20.sent;\n              _context20.next = 6;\n              return _context20.t0.balanceOf.call(_context20.t0, _context20.t1);\n\n            case 6:\n              return _context20.abrupt(\"return\", _context20.sent);\n\n            case 7:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function balance() {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }();\n\n  _proto.isApproved = /*#__PURE__*/function () {\n    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(address, operator) {\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.readOnlyContract.isApprovedForAll(address, operator);\n\n            case 2:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 3:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function isApproved(_x11, _x12) {\n      return _isApproved.apply(this, arguments);\n    }\n\n    return isApproved;\n  }() // write functions\n  ;\n\n  _proto.setApproval = /*#__PURE__*/function () {\n    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(operator, approved) {\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              if (approved === void 0) {\n                approved = true;\n              }\n\n              _context22.next = 3;\n              return this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n\n            case 3:\n              return _context22.abrupt(\"return\", _context22.sent);\n\n            case 4:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function setApproval(_x13, _x14) {\n      return _setApproval.apply(this, arguments);\n    }\n\n    return setApproval;\n  }()\n  /**\r\n   * Transfer NFT\r\n   *\r\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the NFT to\r\n   * const toAddress = \"{{wallet_address}}\";\r\n   *\r\n   * // The token ID of the NFT you want to send\r\n   * const tokenId = \"0\";\r\n   *\r\n   * await module.transfer(toAddress, tokenId);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transfer = /*#__PURE__*/function () {\n    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(to, tokenId) {\n      var from;\n      return runtime_1.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return this.getSignerAddress();\n\n            case 2:\n              from = _context23.sent;\n              _context23.next = 5;\n              return this.sendTransaction(\"safeTransferFrom(address,address,uint256)\", [from, to, tokenId]);\n\n            case 5:\n              return _context23.abrupt(\"return\", _context23.sent);\n\n            case 6:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function transfer(_x15, _x16) {\n      return _transfer.apply(this, arguments);\n    }\n\n    return transfer;\n  }()\n  /**\r\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\r\n   */\n  ;\n\n  _proto.lazyMint = /*#__PURE__*/function () {\n    var _lazyMint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(metadata) {\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context24.sent) {\n                _context24.next = 6;\n                break;\n              }\n\n              _context24.next = 5;\n              return this.v1Module.lazyMint(metadata);\n\n            case 5:\n              return _context24.abrupt(\"return\");\n\n            case 6:\n              _context24.next = 8;\n              return this.createBatch([metadata]);\n\n            case 8:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this);\n    }));\n\n    function lazyMint(_x17) {\n      return _lazyMint.apply(this, arguments);\n    }\n\n    return lazyMint;\n  }()\n  /**\r\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\r\n   */\n  ;\n\n  _proto.lazyMintBatch = /*#__PURE__*/function () {\n    var _lazyMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(metadatas) {\n      return runtime_1.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context25.sent) {\n                _context25.next = 6;\n                break;\n              }\n\n              _context25.next = 5;\n              return this.v1Module.lazyMintBatch(metadatas);\n\n            case 5:\n              return _context25.abrupt(\"return\");\n\n            case 6:\n              _context25.next = 8;\n              return this.createBatch(metadatas);\n\n            case 8:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25, this);\n    }));\n\n    function lazyMintBatch(_x18) {\n      return _lazyMintBatch.apply(this, arguments);\n    }\n\n    return lazyMintBatch;\n  }()\n  /**\r\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\r\n   */\n  ;\n\n  _proto.setMintConditions = /*#__PURE__*/function () {\n    var _setMintConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(factory) {\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context26.sent) {\n                _context26.next = 4;\n                break;\n              }\n\n              return _context26.abrupt(\"return\", this.v1Module.setMintConditions(factory));\n\n            case 4:\n              return _context26.abrupt(\"return\", this.setClaimCondition(factory));\n\n            case 5:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26, this);\n    }));\n\n    function setMintConditions(_x19) {\n      return _setMintConditions.apply(this, arguments);\n    }\n\n    return setMintConditions;\n  }()\n  /**\r\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\r\n   */\n  ;\n\n  _proto.setClaimConditions = /*#__PURE__*/function () {\n    var _setClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(factory) {\n      return runtime_1.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              return _context27.abrupt(\"return\", this.setClaimCondition(factory));\n\n            case 1:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27, this);\n    }));\n\n    function setClaimConditions(_x20) {\n      return _setClaimConditions.apply(this, arguments);\n    }\n\n    return setClaimConditions;\n  }()\n  /**\r\n   * Sets public mint conditions for the next minting using the\r\n   * claim condition factory.\r\n   *\r\n   * @param factory - The claim condition factory.\r\n   */\n  ;\n\n  _proto.setClaimCondition = /*#__PURE__*/function () {\n    var _setClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(factory) {\n      var conditions, merkleInfo, _yield$this$getMetada, metadata, oldMerkle, defaultMerkleRoot, encoded, metadataUri;\n\n      return runtime_1.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context28.sent) {\n                _context28.next = 4;\n                break;\n              }\n\n              return _context28.abrupt(\"return\", this.v1Module.setClaimCondition(factory));\n\n            case 4:\n              _context28.next = 6;\n              return factory.buildConditions();\n\n            case 6:\n              conditions = _context28.sent.map(function (c) {\n                return {\n                  startTimestamp: c.startTimestamp,\n                  maxClaimableSupply: c.maxMintSupply,\n                  supplyClaimed: 0,\n                  quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n                  waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n                  pricePerToken: c.pricePerToken,\n                  currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n                  merkleRoot: c.merkleRoot\n                };\n              });\n              merkleInfo = {};\n              factory.allSnapshots().forEach(function (s) {\n                merkleInfo[s.merkleRoot] = s.snapshotUri;\n              });\n              _context28.next = 11;\n              return this.getMetadata(false);\n\n            case 11:\n              _yield$this$getMetada = _context28.sent;\n              metadata = _yield$this$getMetada.metadata;\n              !metadata ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Metadata is not set, this should never happen\") : invariant(false) : void 0;\n              oldMerkle = metadata[\"merkle\"];\n              defaultMerkleRoot = hexZeroPad([0], 32).toString();\n\n              if (factory.allSnapshots().length > 0) {\n                metadata[\"merkle\"] = merkleInfo;\n              } else if (conditions.filter(function (c) {\n                return c.merkleRoot !== defaultMerkleRoot;\n              }).length === 0) {\n                metadata[\"merkle\"] = {};\n              }\n\n              encoded = [];\n\n              if (isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n                _context28.next = 23;\n                break;\n              }\n\n              _context28.next = 21;\n              return this.sdk.getStorage().upload(JSON.stringify(metadata));\n\n            case 21:\n              metadataUri = _context28.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [metadataUri]));\n\n            case 23:\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setClaimConditions\", [conditions]));\n              _context28.next = 26;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 26:\n              return _context28.abrupt(\"return\", _context28.sent);\n\n            case 27:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28, this);\n    }));\n\n    function setClaimCondition(_x21) {\n      return _setClaimCondition.apply(this, arguments);\n    }\n\n    return setClaimCondition;\n  }();\n\n  _proto.updateClaimConditions = /*#__PURE__*/function () {\n    var _updateClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(factory) {\n      var conditions, merkleInfo, encoded, _yield$this$getMetada2, metadata, oldMerkle, metadataUri;\n\n      return runtime_1.wrap(function _callee29$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context29.sent) {\n                _context29.next = 4;\n                break;\n              }\n\n              return _context29.abrupt(\"return\", this.v1Module.setClaimCondition(factory));\n\n            case 4:\n              _context29.next = 6;\n              return factory.buildConditions();\n\n            case 6:\n              conditions = _context29.sent.map(function (c) {\n                return {\n                  startTimestamp: c.startTimestamp,\n                  maxClaimableSupply: c.maxMintSupply,\n                  supplyClaimed: 0,\n                  quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n                  waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n                  pricePerToken: c.pricePerToken,\n                  currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n                  merkleRoot: c.merkleRoot\n                };\n              });\n              merkleInfo = {};\n              factory.allSnapshots().forEach(function (s) {\n                merkleInfo[s.merkleRoot] = s.snapshotUri;\n              });\n              encoded = [];\n              _context29.next = 12;\n              return this.getMetadata(false);\n\n            case 12:\n              _yield$this$getMetada2 = _context29.sent;\n              metadata = _yield$this$getMetada2.metadata;\n              !metadata ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Metadata is not set, this should never happen\") : invariant(false) : void 0;\n              oldMerkle = metadata[\"merkle\"];\n\n              if (factory.allSnapshots().length === 0 && \"merkle\" in metadata) {\n                metadata[\"merkle\"] = {};\n              } else {\n                metadata[\"merkle\"] = merkleInfo;\n              }\n\n              if (isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n                _context29.next = 22;\n                break;\n              }\n\n              _context29.next = 20;\n              return this.sdk.getStorage().upload(JSON.stringify(metadata));\n\n            case 20:\n              metadataUri = _context29.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [metadataUri]));\n\n            case 22:\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"updateClaimConditions\", [conditions]));\n              _context29.next = 25;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 25:\n              return _context29.abrupt(\"return\", _context29.sent);\n\n            case 26:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee29, this);\n    }));\n\n    function updateClaimConditions(_x22) {\n      return _updateClaimConditions.apply(this, arguments);\n    }\n\n    return updateClaimConditions;\n  }()\n  /**\r\n   * Creates a claim condition factory\r\n   *\r\n   * @returns - A new claim condition factory\r\n   */\n  ;\n\n  _proto.getClaimConditionsFactory = function getClaimConditionsFactory() {\n    var createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    var factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n  /**\r\n   * @deprecated - Use the {@link DropModule.getClaimConditionsFactory} instead.\r\n   */\n  ;\n\n  _proto.getMintConditionsFactory = function getMintConditionsFactory() {\n    return this.getClaimConditionsFactory();\n  }\n  /**\r\n   * @deprecated - Use the {@link DropModule.setClaimConditions} instead.\r\n   */\n  ;\n\n  _proto.setPublicMintConditions = /*#__PURE__*/function () {\n    var _setPublicMintConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(conditions) {\n      var now, _conditions;\n\n      return runtime_1.wrap(function _callee30$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context30.sent) {\n                _context30.next = 4;\n                break;\n              }\n\n              return _context30.abrupt(\"return\", this.v1Module.setPublicMintConditions(conditions));\n\n            case 4:\n              now = BigNumber.from(Date.now()).div(1000);\n              _conditions = conditions.map(function (c) {\n                return {\n                  startTimestamp: now.add(c.startTimestampInSeconds || 0),\n                  maxClaimableSupply: c.maxMintSupply,\n                  supplyClaimed: 0,\n                  quantityLimitPerTransaction: c.quantityLimitPerTransaction || c.maxMintSupply,\n                  waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction || 0,\n                  pricePerToken: c.pricePerToken || 0,\n                  currency: c.currency || AddressZero,\n                  merkleRoot: c.merkleRoot || hexZeroPad([0], 32)\n                };\n              });\n              _context30.next = 8;\n              return this.sendTransaction(\"setClaimConditions\", [_conditions]);\n\n            case 8:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, _callee30, this);\n    }));\n\n    function setPublicMintConditions(_x23) {\n      return _setPublicMintConditions.apply(this, arguments);\n    }\n\n    return setPublicMintConditions;\n  }()\n  /**\r\n   * For any claim conditions that a particular wallet is violating,\r\n   * this function returns human readable information about the\r\n   * breaks in the condition that can be used to inform the user.\r\n   *\r\n   * @param quantity - The desired quantity that would be claimed.\r\n   *\r\n   */\n  ;\n\n  _proto.getClaimIneligibilityReasons = /*#__PURE__*/function () {\n    var _getClaimIneligibilityReasons = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(quantity, addressToCheck) {\n      var reasons, activeConditionIndex, claimCondition, _yield$Promise$all2, merkleRootArray, merkleLower, proofs, hashedAddress, timestampForNextClaim, now, balance, totalPrice, provider, _balance2, _provider, _balance3;\n\n      return runtime_1.wrap(function _callee31$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              reasons = [];\n\n              if (!(addressToCheck === undefined)) {\n                _context31.next = 3;\n                break;\n              }\n\n              throw new Error(\"addressToCheck is required\");\n\n            case 3:\n              _context31.prev = 3;\n              _context31.next = 6;\n              return Promise.all([this.readOnlyContract.getIndexOfActiveCondition(), this.getActiveClaimCondition()]);\n\n            case 6:\n              _yield$Promise$all2 = _context31.sent;\n              activeConditionIndex = _yield$Promise$all2[0];\n              claimCondition = _yield$Promise$all2[1];\n              _context31.next = 18;\n              break;\n\n            case 11:\n              _context31.prev = 11;\n              _context31.t0 = _context31[\"catch\"](3);\n\n              if (!_context31.t0.message.includes(\"no public mint condition.\")) {\n                _context31.next = 16;\n                break;\n              }\n\n              reasons.push(ClaimEligibility.NoActiveClaimPhase);\n              return _context31.abrupt(\"return\", reasons);\n\n            case 16:\n              console.error(\"Failed to get active claim condition\", _context31.t0);\n              throw new Error(\"Failed to get active claim condition\");\n\n            case 18:\n              if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n                reasons.push(ClaimEligibility.NotEnoughSupply);\n              } // check for merkle root inclusion\n\n\n              merkleRootArray = ethers.utils.stripZeros(claimCondition.merkleRoot);\n\n              if (!(merkleRootArray.length > 0)) {\n                _context31.next = 26;\n                break;\n              }\n\n              merkleLower = claimCondition.merkleRoot.toString();\n              _context31.next = 24;\n              return this.getClaimerProofs(merkleLower, addressToCheck);\n\n            case 24:\n              proofs = _context31.sent;\n\n              if (proofs.length === 0) {\n                hashedAddress = ethers.utils.keccak256(addressToCheck).toLowerCase();\n\n                if (hashedAddress !== merkleLower) {\n                  reasons.push(ClaimEligibility.AddressNotAllowed);\n                }\n              }\n\n            // TODO: compute proofs to root, need browser compatibility\n\n            case 26:\n              _context31.next = 28;\n              return this.readOnlyContract.getTimestampForNextValidClaim(activeConditionIndex, addressToCheck);\n\n            case 28:\n              timestampForNextClaim = _context31.sent;\n              now = BigNumber.from(Date.now()).div(1000);\n\n              if (!now.lt(timestampForNextClaim)) {\n                _context31.next = 39;\n                break;\n              }\n\n              if (!BigNumber.from(claimCondition.waitTimeSecondsLimitPerTransaction).eq(timestampForNextClaim)) {\n                _context31.next = 38;\n                break;\n              }\n\n              _context31.next = 34;\n              return this.readOnlyContract.balanceOf(addressToCheck);\n\n            case 34:\n              balance = _context31.sent;\n\n              if (balance.gte(1)) {\n                reasons.push(ClaimEligibility.AlreadyClaimed);\n              }\n\n              _context31.next = 39;\n              break;\n\n            case 38:\n              reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n\n            case 39:\n              if (!claimCondition.pricePerToken.gt(0)) {\n                _context31.next = 58;\n                break;\n              }\n\n              totalPrice = claimCondition.pricePerToken.mul(quantity);\n\n              if (!isNativeToken(claimCondition.currency)) {\n                _context31.next = 51;\n                break;\n              }\n\n              _context31.next = 44;\n              return this.getProvider();\n\n            case 44:\n              provider = _context31.sent;\n              _context31.next = 47;\n              return provider.getBalance(addressToCheck);\n\n            case 47:\n              _balance2 = _context31.sent;\n\n              if (_balance2.lt(totalPrice)) {\n                reasons.push(ClaimEligibility.NotEnoughTokens);\n              }\n\n              _context31.next = 58;\n              break;\n\n            case 51:\n              _context31.next = 53;\n              return this.getProvider();\n\n            case 53:\n              _provider = _context31.sent;\n              _context31.next = 56;\n              return ERC20__factory.connect(claimCondition.currency, _provider).balanceOf(addressToCheck);\n\n            case 56:\n              _balance3 = _context31.sent;\n\n              if (_balance3.lt(totalPrice)) {\n                reasons.push(ClaimEligibility.NotEnoughTokens);\n              }\n\n            case 58:\n              return _context31.abrupt(\"return\", reasons);\n\n            case 59:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, _callee31, this, [[3, 11]]);\n    }));\n\n    function getClaimIneligibilityReasons(_x24, _x25) {\n      return _getClaimIneligibilityReasons.apply(this, arguments);\n    }\n\n    return getClaimIneligibilityReasons;\n  }()\n  /**\r\n   * Can Claim\r\n   *\r\n   * @remarks Check if the drop can currently be claimed.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Quantity of tokens to check if they are claimable\r\n   * const quantity = 1;\r\n   *\r\n   * await module.canClaim(quantity);\r\n   * ```\r\n   */\n  ;\n\n  _proto.canClaim = /*#__PURE__*/function () {\n    var _canClaim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(quantity, addressToCheck) {\n      return runtime_1.wrap(function _callee32$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              if (!(addressToCheck === undefined)) {\n                _context32.next = 4;\n                break;\n              }\n\n              _context32.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              addressToCheck = _context32.sent;\n\n            case 4:\n              _context32.next = 6;\n              return this.isV0();\n\n            case 6:\n              if (!_context32.sent) {\n                _context32.next = 8;\n                break;\n              }\n\n              return _context32.abrupt(\"return\", this.v1Module.canClaim(quantity, []));\n\n            case 8:\n              _context32.next = 10;\n              return this.getClaimIneligibilityReasons(quantity, addressToCheck);\n\n            case 10:\n              _context32.t0 = _context32.sent.length;\n              return _context32.abrupt(\"return\", _context32.t0 === 0);\n\n            case 12:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, _callee32, this);\n    }));\n\n    function canClaim(_x26, _x27) {\n      return _canClaim.apply(this, arguments);\n    }\n\n    return canClaim;\n  }()\n  /**\r\n   * Returns proofs and the overrides required for the transaction.\r\n   *\r\n   * @returns - `overrides` and `proofs` as an object.\r\n   */\n  ;\n\n  _proto.prepareClaim = /*#__PURE__*/function () {\n    var _prepareClaim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(quantity, proofs) {\n      var mintCondition, _yield$this$getMetada3, metadata, addressToClaim, snapshot, jsonConvert, snapshotData, item, overrides, erc20, owner, spender, allowance, totalPrice;\n\n      return runtime_1.wrap(function _callee33$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              if (proofs === void 0) {\n                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];\n              }\n\n              _context33.next = 3;\n              return this.getActiveClaimCondition();\n\n            case 3:\n              mintCondition = _context33.sent;\n              _context33.next = 6;\n              return this.getMetadata();\n\n            case 6:\n              _yield$this$getMetada3 = _context33.sent;\n              metadata = _yield$this$getMetada3.metadata;\n              _context33.next = 10;\n              return this.getSignerAddress();\n\n            case 10:\n              addressToClaim = _context33.sent;\n\n              if (mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n                _context33.next = 21;\n                break;\n              }\n\n              _context33.next = 14;\n              return this.sdk.getStorage().get(metadata == null ? void 0 : metadata.merkle[mintCondition.merkleRoot.toString()]);\n\n            case 14:\n              snapshot = _context33.sent;\n              jsonConvert = new JsonConvert();\n              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);\n              item = snapshotData.claims.find(function (c) {\n                return c.address.toLowerCase() === addressToClaim.toLowerCase();\n              });\n\n              if (!(item === undefined)) {\n                _context33.next = 20;\n                break;\n              }\n\n              throw new Error(\"No claim found for this address\");\n\n            case 20:\n              proofs = item.proof;\n\n            case 21:\n              _context33.next = 23;\n              return this.getCallOverrides();\n\n            case 23:\n              _context33.t0 = _context33.sent;\n\n              if (_context33.t0) {\n                _context33.next = 26;\n                break;\n              }\n\n              _context33.t0 = {};\n\n            case 26:\n              overrides = _context33.t0;\n\n              if (!mintCondition.pricePerToken.gt(0)) {\n                _context33.next = 44;\n                break;\n              }\n\n              if (!isNativeToken(mintCondition.currency)) {\n                _context33.next = 32;\n                break;\n              }\n\n              overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);\n              _context33.next = 44;\n              break;\n\n            case 32:\n              erc20 = ERC20__factory.connect(mintCondition.currency, this.providerOrSigner);\n              _context33.next = 35;\n              return this.getSignerAddress();\n\n            case 35:\n              owner = _context33.sent;\n              spender = this.address;\n              _context33.next = 39;\n              return erc20.allowance(owner, spender);\n\n            case 39:\n              allowance = _context33.sent;\n              totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(BigNumber.from(quantity));\n\n              if (!allowance.lt(totalPrice)) {\n                _context33.next = 44;\n                break;\n              }\n\n              _context33.next = 44;\n              return this.sendContractTransaction(erc20, \"approve\", [spender, allowance.add(totalPrice)]);\n\n            case 44:\n              return _context33.abrupt(\"return\", {\n                overrides: overrides,\n                proofs: proofs\n              });\n\n            case 45:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, _callee33, this);\n    }));\n\n    function prepareClaim(_x28, _x29) {\n      return _prepareClaim.apply(this, arguments);\n    }\n\n    return prepareClaim;\n  }()\n  /**\r\n   * Claim NFTs to Wallet\r\n   *\r\n   * @remarks Let the a specified wallet claim NFTs.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to claim the NFTs\r\n   * const address = \"{{wallet_address}}\";\r\n   *\r\n   * // The number of NFTs to claim\r\n   * const quantity = 1;\r\n   *\r\n   * await module.claimTo(quantity, address);\r\n   * ```\r\n   *\r\n   * @param quantity - Quantity of the tokens you want to claim\r\n   * @param addressToClaim - Address you want to send the token to\r\n   * @param proofs - Array of proofs\r\n   *\r\n   * @returns - Receipt for the transaction\r\n   */\n  ;\n\n  _proto.claimTo = /*#__PURE__*/function () {\n    var _claimTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34(quantity, addressToClaim, proofs) {\n      var claimData, contract, receipt, encoded, events, startingIndex, endingIndex, i;\n      return runtime_1.wrap(function _callee34$(_context34) {\n        while (1) {\n          switch (_context34.prev = _context34.next) {\n            case 0:\n              if (proofs === void 0) {\n                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];\n              }\n\n              _context34.next = 3;\n              return this.prepareClaim(quantity, proofs);\n\n            case 3:\n              claimData = _context34.sent;\n              _context34.next = 6;\n              return this.isNewClaim();\n\n            case 6:\n              if (!_context34.sent) {\n                _context34.next = 10;\n                break;\n              }\n\n              _context34.next = 9;\n              return this.sendTransaction(\"claim\", [addressToClaim, quantity, claimData.proofs], claimData.overrides);\n\n            case 9:\n              return _context34.abrupt(\"return\", _context34.sent);\n\n            case 10:\n              // backward compatibility for < 1.22.0 claim\n              contract = new Contract$1(this.address, ABI_V1_22_0, this.providerOrSigner);\n              _context34.next = 13;\n              return this.sendContractTransaction(contract, \"claim\", [quantity, claimData.proofs], claimData.overrides);\n\n            case 13:\n              receipt = _context34.sent;\n              encoded = [];\n              events = this.parseLogs(\"ClaimedTokens\", receipt == null ? void 0 : receipt.logs, contract);\n              startingIndex = events[0].args.startTokenId;\n              endingIndex = startingIndex.add(quantity);\n              i = startingIndex;\n\n            case 19:\n              if (!i.lt(endingIndex)) {\n                _context34.next = 33;\n                break;\n              }\n\n              _context34.t0 = encoded;\n              _context34.t1 = this.contract[\"interface\"];\n              _context34.next = 24;\n              return this.getSignerAddress();\n\n            case 24:\n              _context34.t2 = _context34.sent;\n              _context34.t3 = addressToClaim;\n              _context34.t4 = i;\n              _context34.t5 = [_context34.t2, _context34.t3, _context34.t4];\n              _context34.t6 = _context34.t1.encodeFunctionData.call(_context34.t1, \"transferFrom\", _context34.t5);\n\n              _context34.t0.push.call(_context34.t0, _context34.t6);\n\n            case 30:\n              i = i.add(1);\n              _context34.next = 19;\n              break;\n\n            case 33:\n              _context34.next = 35;\n              return this.sendTransaction(\"multicall\", [encoded], claimData.overrides);\n\n            case 35:\n              return _context34.abrupt(\"return\", _context34.sent);\n\n            case 36:\n            case \"end\":\n              return _context34.stop();\n          }\n        }\n      }, _callee34, this);\n    }));\n\n    function claimTo(_x30, _x31, _x32) {\n      return _claimTo.apply(this, arguments);\n    }\n\n    return claimTo;\n  }()\n  /** Claim NFTs\r\n   *\r\n   * @param quantity - Quantity of the tokens you want to claim\r\n   * @param proofs - Array of proofs\r\n   *\r\n   * @returns - Receipt for the transaction\r\n   */\n  ;\n\n  _proto.claim = /*#__PURE__*/function () {\n    var _claim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee36(quantity, proofs) {\n      var _receipt,\n          _this7 = this;\n\n      var claimData, receipt, contract, events, startingIndex, endingIndex, tokenIds, i;\n      return runtime_1.wrap(function _callee36$(_context36) {\n        while (1) {\n          switch (_context36.prev = _context36.next) {\n            case 0:\n              if (proofs === void 0) {\n                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];\n              }\n\n              _context36.next = 3;\n              return this.isV0();\n\n            case 3:\n              if (!_context36.sent) {\n                _context36.next = 5;\n                break;\n              }\n\n              return _context36.abrupt(\"return\", this.v1Module.claim(quantity, proofs));\n\n            case 5:\n              _context36.next = 7;\n              return this.prepareClaim(quantity, proofs);\n\n            case 7:\n              claimData = _context36.sent;\n              contract = this.contract;\n              _context36.next = 11;\n              return this.isNewClaim();\n\n            case 11:\n              if (!_context36.sent) {\n                _context36.next = 25;\n                break;\n              }\n\n              _context36.t0 = this;\n              _context36.next = 15;\n              return this.getSignerAddress();\n\n            case 15:\n              _context36.t1 = _context36.sent;\n              _context36.t2 = quantity;\n              _context36.t3 = claimData.proofs;\n              _context36.t4 = [_context36.t1, _context36.t2, _context36.t3];\n              _context36.t5 = claimData.overrides;\n              _context36.next = 22;\n              return _context36.t0.sendTransaction.call(_context36.t0, \"claim\", _context36.t4, _context36.t5);\n\n            case 22:\n              receipt = _context36.sent;\n              _context36.next = 29;\n              break;\n\n            case 25:\n              // backward compatibility for < 1.22.0 claim\n              contract = new Contract$1(this.address, ABI_V1_22_0, this.providerOrSigner);\n              _context36.next = 28;\n              return this.sendContractTransaction(contract, \"claim\", [quantity, claimData.proofs], claimData.overrides);\n\n            case 28:\n              receipt = _context36.sent;\n\n            case 29:\n              events = this.parseLogs(\"ClaimedTokens\", (_receipt = receipt) == null ? void 0 : _receipt.logs, contract);\n              startingIndex = events[0].args.startTokenId;\n              endingIndex = startingIndex.add(quantity);\n              tokenIds = [];\n\n              for (i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n                tokenIds.push(BigNumber.from(i.toString()));\n              }\n\n              _context36.next = 36;\n              return Promise.all(tokenIds.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee35(t) {\n                  return runtime_1.wrap(function _callee35$(_context35) {\n                    while (1) {\n                      switch (_context35.prev = _context35.next) {\n                        case 0:\n                          _context35.next = 2;\n                          return _this7.get(t.toString());\n\n                        case 2:\n                          return _context35.abrupt(\"return\", _context35.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context35.stop();\n                      }\n                    }\n                  }, _callee35);\n                }));\n\n                return function (_x35) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n\n            case 36:\n              return _context36.abrupt(\"return\", _context36.sent);\n\n            case 37:\n            case \"end\":\n              return _context36.stop();\n          }\n        }\n      }, _callee36, this);\n    }));\n\n    function claim(_x33, _x34) {\n      return _claim.apply(this, arguments);\n    }\n\n    return claim;\n  }();\n\n  _proto.burn = /*#__PURE__*/function () {\n    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee37(tokenId) {\n      return runtime_1.wrap(function _callee37$(_context37) {\n        while (1) {\n          switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.next = 2;\n              return this.sendTransaction(\"burn\", [tokenId]);\n\n            case 2:\n              return _context37.abrupt(\"return\", _context37.sent);\n\n            case 3:\n            case \"end\":\n              return _context37.stop();\n          }\n        }\n      }, _callee37, this);\n    }));\n\n    function burn(_x36) {\n      return _burn.apply(this, arguments);\n    }\n\n    return burn;\n  }();\n\n  _proto.transferFrom = /*#__PURE__*/function () {\n    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee38(from, to, tokenId) {\n      return runtime_1.wrap(function _callee38$(_context38) {\n        while (1) {\n          switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.next = 2;\n              return this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n\n            case 2:\n              return _context38.abrupt(\"return\", _context38.sent);\n\n            case 3:\n            case \"end\":\n              return _context38.stop();\n          }\n        }\n      }, _callee38, this);\n    }));\n\n    function transferFrom(_x37, _x38, _x39) {\n      return _transferFrom.apply(this, arguments);\n    }\n\n    return transferFrom;\n  }() // owner functions\n  ;\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee39(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee39$(_context39) {\n        while (1) {\n          switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context39.sent;\n              _context39.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context39.abrupt(\"return\", _context39.sent);\n\n            case 6:\n            case \"end\":\n              return _context39.stop();\n          }\n        }\n      }, _callee39, this);\n    }));\n\n    function setModuleMetadata(_x40) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }();\n\n  _proto.setRoyaltyBps = /*#__PURE__*/function () {\n    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee40(amount) {\n      var _yield$this$getMetada4, metadata, encoded, uri;\n\n      return runtime_1.wrap(function _callee40$(_context40) {\n        while (1) {\n          switch (_context40.prev = _context40.next) {\n            case 0:\n              _context40.next = 2;\n              return this.getMetadata(false);\n\n            case 2:\n              _yield$this$getMetada4 = _context40.sent;\n              metadata = _yield$this$getMetada4.metadata;\n              encoded = [];\n\n              if (metadata) {\n                _context40.next = 7;\n                break;\n              }\n\n              throw new Error(\"No metadata found, this module might be invalid!\");\n\n            case 7:\n              metadata.seller_fee_basis_points = amount;\n              _context40.t0 = this.sdk.getStorage();\n              _context40.t1 = _extends({}, metadata);\n              _context40.t2 = this.address;\n              _context40.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context40.t3 = _context40.sent;\n              _context40.next = 16;\n              return _context40.t0.uploadMetadata.call(_context40.t0, _context40.t1, _context40.t2, _context40.t3);\n\n            case 16:\n              uri = _context40.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setRoyaltyBps\", [amount]));\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [uri]));\n              _context40.next = 21;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 21:\n              return _context40.abrupt(\"return\", _context40.sent);\n\n            case 22:\n            case \"end\":\n              return _context40.stop();\n          }\n        }\n      }, _callee40, this);\n    }));\n\n    function setRoyaltyBps(_x41) {\n      return _setRoyaltyBps.apply(this, arguments);\n    }\n\n    return setRoyaltyBps;\n  }()\n  /**\r\n   * Gets the royalty BPS (basis points) of the contract\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyBps = /*#__PURE__*/function () {\n    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee41() {\n      return runtime_1.wrap(function _callee41$(_context41) {\n        while (1) {\n          switch (_context41.prev = _context41.next) {\n            case 0:\n              _context41.next = 2;\n              return this.readOnlyContract.royaltyBps();\n\n            case 2:\n              return _context41.abrupt(\"return\", _context41.sent);\n\n            case 3:\n            case \"end\":\n              return _context41.stop();\n          }\n        }\n      }, _callee41, this);\n    }));\n\n    function getRoyaltyBps() {\n      return _getRoyaltyBps.apply(this, arguments);\n    }\n\n    return getRoyaltyBps;\n  }()\n  /**\r\n   * Gets the address of the royalty recipient\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyRecipientAddress = /*#__PURE__*/function () {\n    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee42() {\n      var _metadata$metadata;\n\n      var metadata;\n      return runtime_1.wrap(function _callee42$(_context42) {\n        while (1) {\n          switch (_context42.prev = _context42.next) {\n            case 0:\n              _context42.next = 2;\n              return this.getMetadata();\n\n            case 2:\n              metadata = _context42.sent;\n\n              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {\n                _context42.next = 5;\n                break;\n              }\n\n              return _context42.abrupt(\"return\", metadata.metadata.fee_recipient);\n\n            case 5:\n              return _context42.abrupt(\"return\", \"\");\n\n            case 6:\n            case \"end\":\n              return _context42.stop();\n          }\n        }\n      }, _callee42, this);\n    }));\n\n    function getRoyaltyRecipientAddress() {\n      return _getRoyaltyRecipientAddress.apply(this, arguments);\n    }\n\n    return getRoyaltyRecipientAddress;\n  }()\n  /**\r\n   * Create batch allows you to create a batch of tokens\r\n   * in one transaction. This function can only be called\r\n   * once per module at the moment.\r\n   *\r\n   * @beta\r\n   *\r\n   * @param metadatas - The metadata to include in the batch.\r\n   */\n  ;\n\n  _proto.createBatch = /*#__PURE__*/function () {\n    var _createBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee43(metadatas) {\n      var _receipt2;\n\n      var startFileNumber, _yield$this$sdk$getSt, baseUri, receipt, contract, events, _events$0$args, startingIndex, endingIndex, tokenIds, i;\n\n      return runtime_1.wrap(function _callee43$(_context43) {\n        while (1) {\n          switch (_context43.prev = _context43.next) {\n            case 0:\n              _context43.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context43.sent) {\n                _context43.next = 4;\n                break;\n              }\n\n              return _context43.abrupt(\"return\", this.v1Module.createBatch(metadatas));\n\n            case 4:\n              _context43.next = 6;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 6:\n              startFileNumber = _context43.sent;\n              _context43.next = 9;\n              return this.sdk.getStorage().uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n\n            case 9:\n              _yield$this$sdk$getSt = _context43.sent;\n              baseUri = _yield$this$sdk$getSt.baseUri;\n              contract = this.contract;\n              _context43.next = 14;\n              return this.hasDelayedReveal();\n\n            case 14:\n              if (!_context43.sent) {\n                _context43.next = 20;\n                break;\n              }\n\n              _context43.next = 17;\n              return this.sendTransaction(\"lazyMint\", [metadatas.length, baseUri.endsWith(\"/\") ? baseUri : baseUri + \"/\", ethers.utils.toUtf8Bytes(\"\")]);\n\n            case 17:\n              receipt = _context43.sent;\n              _context43.next = 24;\n              break;\n\n            case 20:\n              contract = new Contract$1(this.address, ABI_V1_24_0, this.providerOrSigner);\n              _context43.next = 23;\n              return this.sendContractTransaction(contract, \"lazyMint\", [metadatas.length, baseUri.endsWith(\"/\") ? baseUri : baseUri + \"/\"]);\n\n            case 23:\n              receipt = _context43.sent;\n\n            case 24:\n              events = this.parseLogs(\"LazyMintedTokens\", (_receipt2 = receipt) == null ? void 0 : _receipt2.logs, contract);\n              _events$0$args = events[0].args, startingIndex = _events$0$args[0], endingIndex = _events$0$args[1];\n              tokenIds = [];\n\n              for (i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n                tokenIds.push(i.toString());\n              }\n\n              return _context43.abrupt(\"return\", tokenIds);\n\n            case 29:\n            case \"end\":\n              return _context43.stop();\n          }\n        }\n      }, _callee43, this);\n    }));\n\n    function createBatch(_x42) {\n      return _createBatch.apply(this, arguments);\n    }\n\n    return createBatch;\n  }()\n  /**\r\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\r\n   *\r\n   * @internal\r\n   */\n  ;\n\n  _proto.hashDelayRevealPassword = /*#__PURE__*/function () {\n    var _hashDelayRevealPassword = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee44(batchTokenIndex, password) {\n      var chainId, contractAddress;\n      return runtime_1.wrap(function _callee44$(_context44) {\n        while (1) {\n          switch (_context44.prev = _context44.next) {\n            case 0:\n              _context44.next = 2;\n              return this.getChainID();\n\n            case 2:\n              chainId = _context44.sent;\n              contractAddress = this.address;\n              return _context44.abrupt(\"return\", ethers.utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchTokenIndex, contractAddress]));\n\n            case 5:\n            case \"end\":\n              return _context44.stop();\n          }\n        }\n      }, _callee44, this);\n    }));\n\n    function hashDelayRevealPassword(_x43, _x44) {\n      return _hashDelayRevealPassword.apply(this, arguments);\n    }\n\n    return hashDelayRevealPassword;\n  }()\n  /**\r\n   * Create batch allows you to create a batch of tokens\r\n   * in one transaction. This function can only be called\r\n   * once per module at the moment.\r\n   *\r\n   * @param metadatas - The metadata to include in the batch.\r\n   */\n  ;\n\n  _proto.createDelayedRevealBatch = /*#__PURE__*/function () {\n    var _createDelayedRevealBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee45(placeholder, metadatas, password) {\n      var _yield$this$sdk$getSt2, placeholderUri, startFileNumber, _yield$this$sdk$getSt3, baseUri, baseUriId, encryptedBaseUri, receipt, events, _events$0$args2, startingIndex, endingIndex, tokenIds, i;\n\n      return runtime_1.wrap(function _callee45$(_context45) {\n        while (1) {\n          switch (_context45.prev = _context45.next) {\n            case 0:\n              _context45.next = 2;\n              return this.hasDelayedReveal();\n\n            case 2:\n              if (_context45.sent) {\n                _context45.next = 4;\n                break;\n              }\n\n              throw new Error(\"delay reveal unsupported\");\n\n            case 4:\n              if (password) {\n                _context45.next = 6;\n                break;\n              }\n\n              throw new Error(\"Password is required\");\n\n            case 6:\n              _context45.next = 8;\n              return this.sdk.getStorage().uploadMetadataBatch([placeholder], this.address);\n\n            case 8:\n              _yield$this$sdk$getSt2 = _context45.sent;\n              placeholderUri = _yield$this$sdk$getSt2.baseUri;\n              _context45.next = 12;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 12:\n              startFileNumber = _context45.sent;\n              _context45.next = 15;\n              return this.sdk.getStorage().uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n\n            case 15:\n              _yield$this$sdk$getSt3 = _context45.sent;\n              baseUri = _yield$this$sdk$getSt3.baseUri;\n              _context45.next = 19;\n              return this.readOnlyContract.getBaseURICount();\n\n            case 19:\n              baseUriId = _context45.sent;\n              _context45.t0 = this.readOnlyContract;\n              _context45.t1 = ethers.utils.toUtf8Bytes(baseUri.endsWith(\"/\") ? baseUri : baseUri + \"/\");\n              _context45.next = 24;\n              return this.hashDelayRevealPassword(baseUriId, password);\n\n            case 24:\n              _context45.t2 = _context45.sent;\n              _context45.next = 27;\n              return _context45.t0.encryptDecrypt.call(_context45.t0, _context45.t1, _context45.t2);\n\n            case 27:\n              encryptedBaseUri = _context45.sent;\n              _context45.next = 30;\n              return this.sendTransaction(\"lazyMint\", [metadatas.length, placeholderUri.endsWith(\"/\") ? placeholderUri : placeholderUri + \"/\", encryptedBaseUri]);\n\n            case 30:\n              receipt = _context45.sent;\n              events = this.parseLogs(\"LazyMintedTokens\", receipt == null ? void 0 : receipt.logs);\n              _events$0$args2 = events[0].args, startingIndex = _events$0$args2[0], endingIndex = _events$0$args2[1];\n              tokenIds = [];\n\n              for (i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n                tokenIds.push(i.toString());\n              }\n\n              return _context45.abrupt(\"return\", tokenIds);\n\n            case 36:\n            case \"end\":\n              return _context45.stop();\n          }\n        }\n      }, _callee45, this);\n    }));\n\n    function createDelayedRevealBatch(_x45, _x46, _x47) {\n      return _createDelayedRevealBatch.apply(this, arguments);\n    }\n\n    return createDelayedRevealBatch;\n  }();\n\n  _proto.reveal = /*#__PURE__*/function () {\n    var _reveal = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee46(batchId, password) {\n      var key, decryptedUri;\n      return runtime_1.wrap(function _callee46$(_context46) {\n        while (1) {\n          switch (_context46.prev = _context46.next) {\n            case 0:\n              _context46.next = 2;\n              return this.hasDelayedReveal();\n\n            case 2:\n              if (_context46.sent) {\n                _context46.next = 4;\n                break;\n              }\n\n              throw new Error(\"delay reveal unsupported\");\n\n            case 4:\n              if (password) {\n                _context46.next = 6;\n                break;\n              }\n\n              throw new Error(\"Password is required\");\n\n            case 6:\n              _context46.next = 8;\n              return this.hashDelayRevealPassword(batchId, password);\n\n            case 8:\n              key = _context46.sent;\n              _context46.prev = 9;\n              _context46.next = 12;\n              return this.contract.callStatic.reveal(batchId, key);\n\n            case 12:\n              decryptedUri = _context46.sent;\n\n              if (!(!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\"))) {\n                _context46.next = 15;\n                break;\n              }\n\n              throw new Error(\"Error revealing batch \" + batchId + \" - make sure your password is correct\");\n\n            case 15:\n              _context46.next = 21;\n              break;\n\n            case 17:\n              _context46.prev = 17;\n              _context46.t0 = _context46[\"catch\"](9);\n              console.log(\"Error revealing batch \" + batchId, _context46.t0);\n              throw new Error(\"Error revealing batch \" + batchId + \" - make sure your password is correct\");\n\n            case 21:\n              _context46.next = 23;\n              return this.sendTransaction(\"reveal\", [batchId, key]);\n\n            case 23:\n            case \"end\":\n              return _context46.stop();\n          }\n        }\n      }, _callee46, this, [[9, 17]]);\n    }));\n\n    function reveal(_x48, _x49) {\n      return _reveal.apply(this, arguments);\n    }\n\n    return reveal;\n  }()\n  /**\r\n   * Gets a list of token uris that needs to be revealed.\r\n   */\n  ;\n\n  _proto.getBatchesToReveal = /*#__PURE__*/function () {\n    var _getBatchesToReveal = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee47() {\n      var _this8 = this;\n\n      var count, countRangeArray, uriIndices, uriIndicesWithZeroStart, tokenUris, tokenMetadatas, encryptedBaseUris;\n      return runtime_1.wrap(function _callee47$(_context47) {\n        while (1) {\n          switch (_context47.prev = _context47.next) {\n            case 0:\n              _context47.next = 2;\n              return this.hasDelayedReveal();\n\n            case 2:\n              if (_context47.sent) {\n                _context47.next = 4;\n                break;\n              }\n\n              throw new Error(\"Contract does not support delay reveal\");\n\n            case 4:\n              _context47.next = 6;\n              return this.readOnlyContract.getBaseURICount();\n\n            case 6:\n              count = _context47.sent;\n\n              if (!count.isZero()) {\n                _context47.next = 9;\n                break;\n              }\n\n              return _context47.abrupt(\"return\", []);\n\n            case 9:\n              countRangeArray = Array.from(Array(count.toNumber()).keys()); // map over to get the base uri indices, which should be the end token id of every batch\n\n              _context47.next = 12;\n              return Promise.all(countRangeArray.map(function (i) {\n                return _this8.readOnlyContract.baseURIIndices(i);\n              }));\n\n            case 12:\n              uriIndices = _context47.sent; // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n\n              uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1); // returns the token uri for each batches. first batch always starts from token id 0.\n\n              _context47.next = 16;\n              return Promise.all(Array.from([0].concat(uriIndicesWithZeroStart)).map(function (i) {\n                return _this8.readOnlyContract.tokenURI(i);\n              }));\n\n            case 16:\n              tokenUris = _context47.sent;\n              _context47.next = 19;\n              return Promise.all(Array.from([0].concat(uriIndicesWithZeroStart)).map(function (i) {\n                return _this8.getTokenMetadata(i.toString());\n              }));\n\n            case 19:\n              tokenMetadatas = _context47.sent;\n              _context47.next = 22;\n              return Promise.all(Array.from([].concat(uriIndices)).map(function (i) {\n                return _this8.readOnlyContract.encryptedBaseURI(i);\n              }));\n\n            case 22:\n              encryptedBaseUris = _context47.sent;\n              return _context47.abrupt(\"return\", tokenUris.map(function (uri, index) {\n                return {\n                  batchId: BigNumber.from(index),\n                  batchUri: uri,\n                  placeholderMetadata: tokenMetadatas[index]\n                };\n              }).filter(function (_, index) {\n                return ethers.utils.hexDataLength(encryptedBaseUris[index]) > 0;\n              }));\n\n            case 24:\n            case \"end\":\n              return _context47.stop();\n          }\n        }\n      }, _callee47, this);\n    }));\n\n    function getBatchesToReveal() {\n      return _getBatchesToReveal.apply(this, arguments);\n    }\n\n    return getBatchesToReveal;\n  }()\n  /**\r\n   * @internal\r\n   *\r\n   * @returns - True if the batch has been created, false otherwise.\r\n   */\n  ;\n\n  _proto.canCreateBatch = /*#__PURE__*/function () {\n    var _canCreateBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee48() {\n      return runtime_1.wrap(function _callee48$(_context48) {\n        while (1) {\n          switch (_context48.prev = _context48.next) {\n            case 0:\n              _context48.next = 2;\n              return this.isV0();\n\n            case 2:\n              if (!_context48.sent) {\n                _context48.next = 4;\n                break;\n              }\n\n              return _context48.abrupt(\"return\", this.v1Module.canCreateBatch());\n\n            case 4:\n              return _context48.abrupt(\"return\", true);\n\n            case 5:\n            case \"end\":\n              return _context48.stop();\n          }\n        }\n      }, _callee48, this);\n    }));\n\n    function canCreateBatch() {\n      return _canCreateBatch.apply(this, arguments);\n    }\n\n    return canCreateBatch;\n  }()\n  /**\r\n   * Check if contract is v0 or not. If the contract doesn't have nextTokenIdToMint = v0 contract.\r\n   * @internal\r\n   */\n  ;\n\n  _proto.isV0 = /*#__PURE__*/function () {\n    var _isV = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee49() {\n      return runtime_1.wrap(function _callee49$(_context49) {\n        while (1) {\n          switch (_context49.prev = _context49.next) {\n            case 0:\n              _context49.next = 2;\n              return this.checkVersion();\n\n            case 2:\n              return _context49.abrupt(\"return\", this._isV0);\n\n            case 3:\n            case \"end\":\n              return _context49.stop();\n          }\n        }\n      }, _callee49, this);\n    }));\n\n    function isV0() {\n      return _isV.apply(this, arguments);\n    }\n\n    return isV0;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.isNewClaim = /*#__PURE__*/function () {\n    var _isNewClaim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee50() {\n      return runtime_1.wrap(function _callee50$(_context50) {\n        while (1) {\n          switch (_context50.prev = _context50.next) {\n            case 0:\n              _context50.next = 2;\n              return this.checkVersion();\n\n            case 2:\n              return _context50.abrupt(\"return\", this._version >= 1);\n\n            case 3:\n            case \"end\":\n              return _context50.stop();\n          }\n        }\n      }, _callee50, this);\n    }));\n\n    function isNewClaim() {\n      return _isNewClaim.apply(this, arguments);\n    }\n\n    return isNewClaim;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.hasDelayedReveal = /*#__PURE__*/function () {\n    var _hasDelayedReveal = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee51() {\n      return runtime_1.wrap(function _callee51$(_context51) {\n        while (1) {\n          switch (_context51.prev = _context51.next) {\n            case 0:\n              _context51.next = 2;\n              return this.checkVersion();\n\n            case 2:\n              return _context51.abrupt(\"return\", this._version >= 2);\n\n            case 3:\n            case \"end\":\n              return _context51.stop();\n          }\n        }\n      }, _callee51, this);\n    }));\n\n    function hasDelayedReveal() {\n      return _hasDelayedReveal.apply(this, arguments);\n    }\n\n    return hasDelayedReveal;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.checkVersion = /*#__PURE__*/function () {\n    var _checkVersion = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee52() {\n      return runtime_1.wrap(function _callee52$(_context52) {\n        while (1) {\n          switch (_context52.prev = _context52.next) {\n            case 0:\n              if (!this._shouldCheckVersion) {\n                _context52.next = 20;\n                break;\n              }\n\n              _context52.prev = 1;\n              _context52.next = 4;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 4:\n              this._isV0 = false;\n              _context52.next = 10;\n              break;\n\n            case 7:\n              _context52.prev = 7;\n              _context52.t0 = _context52[\"catch\"](1);\n              this._isV0 = true;\n\n            case 10:\n              _context52.prev = 10;\n              _context52.next = 13;\n              return this.readOnlyContract.VERSION();\n\n            case 13:\n              this._version = _context52.sent.toNumber();\n              _context52.next = 19;\n              break;\n\n            case 16:\n              _context52.prev = 16;\n              _context52.t1 = _context52[\"catch\"](10);\n              this._version = 0;\n\n            case 19:\n              this._shouldCheckVersion = false;\n\n            case 20:\n            case \"end\":\n              return _context52.stop();\n          }\n        }\n      }, _callee52, this, [[1, 7], [10, 16]]);\n    }));\n\n    function checkVersion() {\n      return _checkVersion.apply(this, arguments);\n    }\n\n    return checkVersion;\n  }()\n  /**\r\n   * Fetches the proof for the current signer for a particular wallet.\r\n   *\r\n   * @param merkleRoot - The merkle root of the condition to check.\r\n   * @returns - The proof for the current signer for the specified condition.\r\n   */\n  ;\n\n  _proto.getClaimerProofs = /*#__PURE__*/function () {\n    var _getClaimerProofs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee53(merkleRoot, addressToClaim) {\n      var _yield$this$getMetada5, metadata, snapshot, jsonConvert, snapshotData, item;\n\n      return runtime_1.wrap(function _callee53$(_context53) {\n        while (1) {\n          switch (_context53.prev = _context53.next) {\n            case 0:\n              if (addressToClaim) {\n                _context53.next = 4;\n                break;\n              }\n\n              _context53.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              addressToClaim = _context53.sent;\n\n            case 4:\n              _context53.next = 6;\n              return this.getMetadata();\n\n            case 6:\n              _yield$this$getMetada5 = _context53.sent;\n              metadata = _yield$this$getMetada5.metadata;\n              _context53.next = 10;\n              return this.sdk.getStorage().get(metadata == null ? void 0 : metadata.merkle[merkleRoot]);\n\n            case 10:\n              snapshot = _context53.sent;\n              jsonConvert = new JsonConvert();\n              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);\n              item = snapshotData.claims.find(function (c) {\n                var _addressToClaim;\n\n                return c.address.toLowerCase() === ((_addressToClaim = addressToClaim) == null ? void 0 : _addressToClaim.toLowerCase());\n              });\n\n              if (!(item === undefined)) {\n                _context53.next = 16;\n                break;\n              }\n\n              return _context53.abrupt(\"return\", []);\n\n            case 16:\n              return _context53.abrupt(\"return\", item.proof);\n\n            case 17:\n            case \"end\":\n              return _context53.stop();\n          }\n        }\n      }, _callee53, this);\n    }));\n\n    function getClaimerProofs(_x50, _x51) {\n      return _getClaimerProofs.apply(this, arguments);\n    }\n\n    return getClaimerProofs;\n  }();\n\n  _proto.isTransferRestricted = /*#__PURE__*/function () {\n    var _isTransferRestricted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee54() {\n      return runtime_1.wrap(function _callee54$(_context54) {\n        while (1) {\n          switch (_context54.prev = _context54.next) {\n            case 0:\n              return _context54.abrupt(\"return\", this.readOnlyContract.transfersRestricted());\n\n            case 1:\n            case \"end\":\n              return _context54.stop();\n          }\n        }\n      }, _callee54, this);\n    }));\n\n    function isTransferRestricted() {\n      return _isTransferRestricted.apply(this, arguments);\n    }\n\n    return isTransferRestricted;\n  }();\n\n  _proto.setRestrictedTransfer = /*#__PURE__*/function () {\n    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee55(restricted) {\n      return runtime_1.wrap(function _callee55$(_context55) {\n        while (1) {\n          switch (_context55.prev = _context55.next) {\n            case 0:\n              if (restricted === void 0) {\n                restricted = false;\n              }\n\n              _context55.t0 = this;\n              _context55.t1 = [\"admin\"];\n              _context55.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context55.t2 = _context55.sent;\n              _context55.next = 8;\n              return _context55.t0.onlyRoles.call(_context55.t0, _context55.t1, _context55.t2);\n\n            case 8:\n              _context55.next = 10;\n              return this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n\n            case 10:\n              return _context55.abrupt(\"return\", _context55.sent);\n\n            case 11:\n            case \"end\":\n              return _context55.stop();\n          }\n        }\n      }, _callee55, this);\n    }));\n\n    function setRestrictedTransfer(_x52) {\n      return _setRestrictedTransfer.apply(this, arguments);\n    }\n\n    return setRestrictedTransfer;\n  }();\n\n  return DropModule;\n}(ModuleWithRoles);\n/**\r\n * @internal\r\n * @deprecated - Should use DropV2\r\n */\n\n\nDropModule.moduleType = ModuleType.DROP;\nDropModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.transfer];\n\nvar DropV1Module = /*#__PURE__*/function (_ModuleWithRoles2) {\n  _inheritsLoose(DropV1Module, _ModuleWithRoles2);\n\n  function DropV1Module() {\n    var _this9;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this9 = _ModuleWithRoles2.call.apply(_ModuleWithRoles2, [this].concat(args)) || this;\n    _this9.storage = _this9.sdk.getStorage();\n    return _this9;\n  }\n\n  var _proto2 = DropV1Module.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto2.getModuleRoles = function getModuleRoles() {\n    return DropModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto2.connectContract = function connectContract() {\n    return LazyNFT__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto2.getModuleType = function getModuleType() {\n    return DropModule.moduleType;\n  };\n\n  _proto2.getTokenMetadata = /*#__PURE__*/function () {\n    var _getTokenMetadata3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee56(tokenId) {\n      return runtime_1.wrap(function _callee56$(_context56) {\n        while (1) {\n          switch (_context56.prev = _context56.next) {\n            case 0:\n              _context56.next = 2;\n              return getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage());\n\n            case 2:\n              return _context56.abrupt(\"return\", _context56.sent);\n\n            case 3:\n            case \"end\":\n              return _context56.stop();\n          }\n        }\n      }, _callee56, this);\n    }));\n\n    function getTokenMetadata$1(_x53) {\n      return _getTokenMetadata3.apply(this, arguments);\n    }\n\n    return getTokenMetadata$1;\n  }();\n\n  _proto2.get = /*#__PURE__*/function () {\n    var _get2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee57(tokenId) {\n      var _yield$Promise$all3, owner, metadata;\n\n      return runtime_1.wrap(function _callee57$(_context57) {\n        while (1) {\n          switch (_context57.prev = _context57.next) {\n            case 0:\n              _context57.next = 2;\n              return Promise.all([this.ownerOf(tokenId)[\"catch\"](function () {\n                return AddressZero;\n              }), this.getTokenMetadata(tokenId)]);\n\n            case 2:\n              _yield$Promise$all3 = _context57.sent;\n              owner = _yield$Promise$all3[0];\n              metadata = _yield$Promise$all3[1];\n              return _context57.abrupt(\"return\", {\n                owner: owner,\n                metadata: metadata\n              });\n\n            case 6:\n            case \"end\":\n              return _context57.stop();\n          }\n        }\n      }, _callee57, this);\n    }));\n\n    function get(_x54) {\n      return _get2.apply(this, arguments);\n    }\n\n    return get;\n  }();\n\n  _proto2.getAll = /*#__PURE__*/function () {\n    var _getAll2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee58(queryParams) {\n      var _this10 = this;\n\n      var start, count, maxId;\n      return runtime_1.wrap(function _callee58$(_context58) {\n        while (1) {\n          switch (_context58.prev = _context58.next) {\n            case 0:\n              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();\n              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n              _context58.t0 = Math;\n              _context58.next = 5;\n              return this.readOnlyContract.nextTokenId();\n\n            case 5:\n              _context58.t1 = _context58.sent.toNumber();\n              _context58.t2 = start + count;\n              maxId = _context58.t0.min.call(_context58.t0, _context58.t1, _context58.t2);\n              _context58.next = 10;\n              return Promise.all(Array.from(Array(maxId - start).keys()).map(function (i) {\n                return _this10.get((start + i).toString());\n              }));\n\n            case 10:\n              return _context58.abrupt(\"return\", _context58.sent);\n\n            case 11:\n            case \"end\":\n              return _context58.stop();\n          }\n        }\n      }, _callee58, this);\n    }));\n\n    function getAll(_x55) {\n      return _getAll2.apply(this, arguments);\n    }\n\n    return getAll;\n  }();\n\n  _proto2.getAllUnclaimed = /*#__PURE__*/function () {\n    var _getAllUnclaimed2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee59(queryParams) {\n      var _this11 = this;\n\n      var start, count, maxId, unmintedId;\n      return runtime_1.wrap(function _callee59$(_context59) {\n        while (1) {\n          switch (_context59.prev = _context59.next) {\n            case 0:\n              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();\n              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n              _context59.t0 = BigNumber;\n              _context59.t1 = Math;\n              _context59.next = 6;\n              return this.readOnlyContract.nextTokenId();\n\n            case 6:\n              _context59.t2 = _context59.sent.toNumber();\n              _context59.t3 = start + count;\n              _context59.t4 = _context59.t1.min.call(_context59.t1, _context59.t2, _context59.t3);\n              maxId = _context59.t0.from.call(_context59.t0, _context59.t4);\n              _context59.next = 12;\n              return this.readOnlyContract.nextMintTokenId();\n\n            case 12:\n              unmintedId = _context59.sent;\n              _context59.next = 15;\n              return Promise.all(Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map(function (i) {\n                return _this11.getTokenMetadata(unmintedId.add(i).toString());\n              }));\n\n            case 15:\n              return _context59.abrupt(\"return\", _context59.sent.map(function (metadata) {\n                return {\n                  owner: AddressZero,\n                  metadata: metadata\n                };\n              }));\n\n            case 16:\n            case \"end\":\n              return _context59.stop();\n          }\n        }\n      }, _callee59, this);\n    }));\n\n    function getAllUnclaimed(_x56) {\n      return _getAllUnclaimed2.apply(this, arguments);\n    }\n\n    return getAllUnclaimed;\n  }();\n\n  _proto2.getAllClaimed = /*#__PURE__*/function () {\n    var _getAllClaimed2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee60(queryParams) {\n      var _this12 = this;\n\n      var start, count, maxId;\n      return runtime_1.wrap(function _callee60$(_context60) {\n        while (1) {\n          switch (_context60.prev = _context60.next) {\n            case 0:\n              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();\n              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n              _context60.t0 = Math;\n              _context60.next = 5;\n              return this.readOnlyContract.nextMintTokenId();\n\n            case 5:\n              _context60.t1 = _context60.sent.toNumber();\n              _context60.t2 = start + count;\n              maxId = _context60.t0.min.call(_context60.t0, _context60.t1, _context60.t2);\n              _context60.next = 10;\n              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {\n                return _this12.get(i.toString());\n              }));\n\n            case 10:\n              return _context60.abrupt(\"return\", _context60.sent);\n\n            case 11:\n            case \"end\":\n              return _context60.stop();\n          }\n        }\n      }, _callee60, this);\n    }));\n\n    function getAllClaimed(_x57) {\n      return _getAllClaimed2.apply(this, arguments);\n    }\n\n    return getAllClaimed;\n  }();\n\n  _proto2.ownerOf = /*#__PURE__*/function () {\n    var _ownerOf2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee61(tokenId) {\n      return runtime_1.wrap(function _callee61$(_context61) {\n        while (1) {\n          switch (_context61.prev = _context61.next) {\n            case 0:\n              _context61.next = 2;\n              return this.readOnlyContract.ownerOf(tokenId);\n\n            case 2:\n              return _context61.abrupt(\"return\", _context61.sent);\n\n            case 3:\n            case \"end\":\n              return _context61.stop();\n          }\n        }\n      }, _callee61, this);\n    }));\n\n    function ownerOf(_x58) {\n      return _ownerOf2.apply(this, arguments);\n    }\n\n    return ownerOf;\n  }();\n\n  _proto2.getOwned = /*#__PURE__*/function () {\n    var _getOwned2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee62(_address) {\n      var _this13 = this;\n\n      var address, balance, indices, tokenIds;\n      return runtime_1.wrap(function _callee62$(_context62) {\n        while (1) {\n          switch (_context62.prev = _context62.next) {\n            case 0:\n              if (!_address) {\n                _context62.next = 4;\n                break;\n              }\n\n              _context62.t0 = _address;\n              _context62.next = 7;\n              break;\n\n            case 4:\n              _context62.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context62.t0 = _context62.sent;\n\n            case 7:\n              address = _context62.t0;\n              _context62.next = 10;\n              return this.readOnlyContract.balanceOf(address);\n\n            case 10:\n              balance = _context62.sent;\n              indices = Array.from(Array(balance.toNumber()).keys());\n              _context62.next = 14;\n              return Promise.all(indices.map(function (i) {\n                return _this13.readOnlyContract.tokenOfOwnerByIndex(address, i);\n              }));\n\n            case 14:\n              tokenIds = _context62.sent;\n              _context62.next = 17;\n              return Promise.all(tokenIds.map(function (tokenId) {\n                return _this13.get(tokenId.toString());\n              }));\n\n            case 17:\n              return _context62.abrupt(\"return\", _context62.sent);\n\n            case 18:\n            case \"end\":\n              return _context62.stop();\n          }\n        }\n      }, _callee62, this);\n    }));\n\n    function getOwned(_x59) {\n      return _getOwned2.apply(this, arguments);\n    }\n\n    return getOwned;\n  }();\n\n  _proto2.transformResultToClaimCondition = /*#__PURE__*/function () {\n    var _transformResultToClaimCondition2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee63(pm) {\n      var cv;\n      return runtime_1.wrap(function _callee63$(_context63) {\n        while (1) {\n          switch (_context63.prev = _context63.next) {\n            case 0:\n              _context63.next = 2;\n              return getCurrencyValue(this.providerOrSigner, pm.currency, pm.pricePerToken);\n\n            case 2:\n              cv = _context63.sent;\n              return _context63.abrupt(\"return\", {\n                startTimestamp: new Date(BigNumber.from(pm.startTimestamp).toNumber() * 1000),\n                maxMintSupply: pm.maxMintSupply.toString(),\n                currentMintSupply: pm.currentMintSupply.toString(),\n                availableSupply: BigNumber.from(pm.maxMintSupply).sub(pm.currentMintSupply).toString(),\n                quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n                waitTimeSecondsLimitPerTransaction: pm.waitTimeSecondsLimitPerTransaction.toString(),\n                price: BigNumber.from(pm.pricePerToken),\n                pricePerToken: BigNumber.from(pm.pricePerToken),\n                currency: pm.currency,\n                currencyContract: pm.currency,\n                currencyMetadata: cv,\n                merkleRoot: pm.merkleRoot\n              });\n\n            case 4:\n            case \"end\":\n              return _context63.stop();\n          }\n        }\n      }, _callee63, this);\n    }));\n\n    function transformResultToClaimCondition(_x60) {\n      return _transformResultToClaimCondition2.apply(this, arguments);\n    }\n\n    return transformResultToClaimCondition;\n  }()\n  /**\r\n   * @deprecated - Use {@link DropModule.getActiveClaimCondition} instead\r\n   */\n  ;\n\n  _proto2.getActiveMintCondition = /*#__PURE__*/function () {\n    var _getActiveMintCondition2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee64() {\n      var index;\n      return runtime_1.wrap(function _callee64$(_context64) {\n        while (1) {\n          switch (_context64.prev = _context64.next) {\n            case 0:\n              _context64.next = 2;\n              return this.readOnlyContract.getLastStartedMintConditionIndex();\n\n            case 2:\n              index = _context64.sent;\n              _context64.next = 5;\n              return this.readOnlyContract.mintConditions(index);\n\n            case 5:\n              return _context64.abrupt(\"return\", _context64.sent);\n\n            case 6:\n            case \"end\":\n              return _context64.stop();\n          }\n        }\n      }, _callee64, this);\n    }));\n\n    function getActiveMintCondition() {\n      return _getActiveMintCondition2.apply(this, arguments);\n    }\n\n    return getActiveMintCondition;\n  }();\n\n  _proto2.getActiveClaimCondition = /*#__PURE__*/function () {\n    var _getActiveClaimCondition2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee65() {\n      var index, mc;\n      return runtime_1.wrap(function _callee65$(_context65) {\n        while (1) {\n          switch (_context65.prev = _context65.next) {\n            case 0:\n              _context65.next = 2;\n              return this.readOnlyContract.getLastStartedMintConditionIndex();\n\n            case 2:\n              index = _context65.sent;\n              _context65.next = 5;\n              return this.readOnlyContract.mintConditions(index);\n\n            case 5:\n              mc = _context65.sent;\n              _context65.next = 8;\n              return this.transformResultToClaimCondition(mc);\n\n            case 8:\n              return _context65.abrupt(\"return\", _context65.sent);\n\n            case 9:\n            case \"end\":\n              return _context65.stop();\n          }\n        }\n      }, _callee65, this);\n    }));\n\n    function getActiveClaimCondition() {\n      return _getActiveClaimCondition2.apply(this, arguments);\n    }\n\n    return getActiveClaimCondition;\n  }()\n  /**\r\n   * @deprecated - Use {@link DropModule.getAllClaimConditions} instead\r\n   */\n  ;\n\n  _proto2.getAllMintConditions = /*#__PURE__*/function () {\n    var _getAllMintConditions2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee66() {\n      var conditions, i;\n      return runtime_1.wrap(function _callee66$(_context66) {\n        while (1) {\n          switch (_context66.prev = _context66.next) {\n            case 0:\n              conditions = [];\n              i = 0;\n\n            case 2:\n              _context66.prev = 2;\n              _context66.t0 = conditions;\n              _context66.next = 6;\n              return this.readOnlyContract.mintConditions(i);\n\n            case 6:\n              _context66.t1 = _context66.sent;\n\n              _context66.t0.push.call(_context66.t0, _context66.t1);\n\n              _context66.next = 13;\n              break;\n\n            case 10:\n              _context66.prev = 10;\n              _context66.t2 = _context66[\"catch\"](2);\n              return _context66.abrupt(\"break\", 16);\n\n            case 13:\n              i++;\n              _context66.next = 2;\n              break;\n\n            case 16:\n              return _context66.abrupt(\"return\", conditions);\n\n            case 17:\n            case \"end\":\n              return _context66.stop();\n          }\n        }\n      }, _callee66, this, [[2, 10]]);\n    }));\n\n    function getAllMintConditions() {\n      return _getAllMintConditions2.apply(this, arguments);\n    }\n\n    return getAllMintConditions;\n  }();\n\n  _proto2.getAllClaimConditions = /*#__PURE__*/function () {\n    var _getAllClaimConditions2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee67() {\n      var conditions, i, mc;\n      return runtime_1.wrap(function _callee67$(_context67) {\n        while (1) {\n          switch (_context67.prev = _context67.next) {\n            case 0:\n              conditions = [];\n              i = 0;\n\n            case 2:\n              _context67.prev = 2;\n              _context67.next = 5;\n              return this.readOnlyContract.mintConditions(i);\n\n            case 5:\n              mc = _context67.sent;\n              _context67.t0 = conditions;\n              _context67.next = 9;\n              return this.transformResultToClaimCondition(mc);\n\n            case 9:\n              _context67.t1 = _context67.sent;\n\n              _context67.t0.push.call(_context67.t0, _context67.t1);\n\n              _context67.next = 16;\n              break;\n\n            case 13:\n              _context67.prev = 13;\n              _context67.t2 = _context67[\"catch\"](2);\n              return _context67.abrupt(\"break\", 19);\n\n            case 16:\n              i++;\n              _context67.next = 2;\n              break;\n\n            case 19:\n              return _context67.abrupt(\"return\", conditions);\n\n            case 20:\n            case \"end\":\n              return _context67.stop();\n          }\n        }\n      }, _callee67, this, [[2, 13]]);\n    }));\n\n    function getAllClaimConditions() {\n      return _getAllClaimConditions2.apply(this, arguments);\n    }\n\n    return getAllClaimConditions;\n  }();\n\n  _proto2.totalSupply = /*#__PURE__*/function () {\n    var _totalSupply2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee68() {\n      return runtime_1.wrap(function _callee68$(_context68) {\n        while (1) {\n          switch (_context68.prev = _context68.next) {\n            case 0:\n              _context68.next = 2;\n              return this.readOnlyContract.nextTokenId();\n\n            case 2:\n              return _context68.abrupt(\"return\", _context68.sent);\n\n            case 3:\n            case \"end\":\n              return _context68.stop();\n          }\n        }\n      }, _callee68, this);\n    }));\n\n    function totalSupply() {\n      return _totalSupply2.apply(this, arguments);\n    }\n\n    return totalSupply;\n  }();\n\n  _proto2.maxTotalSupply = /*#__PURE__*/function () {\n    var _maxTotalSupply2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee69() {\n      return runtime_1.wrap(function _callee69$(_context69) {\n        while (1) {\n          switch (_context69.prev = _context69.next) {\n            case 0:\n              _context69.next = 2;\n              return this.readOnlyContract.maxTotalSupply();\n\n            case 2:\n              return _context69.abrupt(\"return\", _context69.sent);\n\n            case 3:\n            case \"end\":\n              return _context69.stop();\n          }\n        }\n      }, _callee69, this);\n    }));\n\n    function maxTotalSupply() {\n      return _maxTotalSupply2.apply(this, arguments);\n    }\n\n    return maxTotalSupply;\n  }();\n\n  _proto2.totalUnclaimedSupply = /*#__PURE__*/function () {\n    var _totalUnclaimedSupply2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee70() {\n      return runtime_1.wrap(function _callee70$(_context70) {\n        while (1) {\n          switch (_context70.prev = _context70.next) {\n            case 0:\n              _context70.next = 2;\n              return this.readOnlyContract.nextTokenId();\n\n            case 2:\n              _context70.t0 = _context70.sent;\n              _context70.next = 5;\n              return this.totalClaimedSupply();\n\n            case 5:\n              _context70.t1 = _context70.sent;\n              return _context70.abrupt(\"return\", _context70.t0.sub.call(_context70.t0, _context70.t1));\n\n            case 7:\n            case \"end\":\n              return _context70.stop();\n          }\n        }\n      }, _callee70, this);\n    }));\n\n    function totalUnclaimedSupply() {\n      return _totalUnclaimedSupply2.apply(this, arguments);\n    }\n\n    return totalUnclaimedSupply;\n  }();\n\n  _proto2.totalClaimedSupply = /*#__PURE__*/function () {\n    var _totalClaimedSupply2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee71() {\n      return runtime_1.wrap(function _callee71$(_context71) {\n        while (1) {\n          switch (_context71.prev = _context71.next) {\n            case 0:\n              _context71.next = 2;\n              return this.readOnlyContract.nextMintTokenId();\n\n            case 2:\n              return _context71.abrupt(\"return\", _context71.sent);\n\n            case 3:\n            case \"end\":\n              return _context71.stop();\n          }\n        }\n      }, _callee71, this);\n    }));\n\n    function totalClaimedSupply() {\n      return _totalClaimedSupply2.apply(this, arguments);\n    }\n\n    return totalClaimedSupply;\n  }();\n\n  _proto2.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee72(address) {\n      return runtime_1.wrap(function _callee72$(_context72) {\n        while (1) {\n          switch (_context72.prev = _context72.next) {\n            case 0:\n              _context72.next = 2;\n              return this.readOnlyContract.balanceOf(address);\n\n            case 2:\n              return _context72.abrupt(\"return\", _context72.sent);\n\n            case 3:\n            case \"end\":\n              return _context72.stop();\n          }\n        }\n      }, _callee72, this);\n    }));\n\n    function balanceOf(_x61) {\n      return _balanceOf2.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }();\n\n  _proto2.balance = /*#__PURE__*/function () {\n    var _balance4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee73() {\n      return runtime_1.wrap(function _callee73$(_context73) {\n        while (1) {\n          switch (_context73.prev = _context73.next) {\n            case 0:\n              _context73.t0 = this;\n              _context73.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context73.t1 = _context73.sent;\n              _context73.next = 6;\n              return _context73.t0.balanceOf.call(_context73.t0, _context73.t1);\n\n            case 6:\n              return _context73.abrupt(\"return\", _context73.sent);\n\n            case 7:\n            case \"end\":\n              return _context73.stop();\n          }\n        }\n      }, _callee73, this);\n    }));\n\n    function balance() {\n      return _balance4.apply(this, arguments);\n    }\n\n    return balance;\n  }();\n\n  _proto2.isApproved = /*#__PURE__*/function () {\n    var _isApproved2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee74(address, operator) {\n      return runtime_1.wrap(function _callee74$(_context74) {\n        while (1) {\n          switch (_context74.prev = _context74.next) {\n            case 0:\n              _context74.next = 2;\n              return this.readOnlyContract.isApprovedForAll(address, operator);\n\n            case 2:\n              return _context74.abrupt(\"return\", _context74.sent);\n\n            case 3:\n            case \"end\":\n              return _context74.stop();\n          }\n        }\n      }, _callee74, this);\n    }));\n\n    function isApproved(_x62, _x63) {\n      return _isApproved2.apply(this, arguments);\n    }\n\n    return isApproved;\n  }() // write functions\n  ;\n\n  _proto2.setApproval = /*#__PURE__*/function () {\n    var _setApproval2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee75(operator, approved) {\n      return runtime_1.wrap(function _callee75$(_context75) {\n        while (1) {\n          switch (_context75.prev = _context75.next) {\n            case 0:\n              if (approved === void 0) {\n                approved = true;\n              }\n\n              _context75.next = 3;\n              return this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n\n            case 3:\n              return _context75.abrupt(\"return\", _context75.sent);\n\n            case 4:\n            case \"end\":\n              return _context75.stop();\n          }\n        }\n      }, _callee75, this);\n    }));\n\n    function setApproval(_x64, _x65) {\n      return _setApproval2.apply(this, arguments);\n    }\n\n    return setApproval;\n  }();\n\n  _proto2.transfer = /*#__PURE__*/function () {\n    var _transfer2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee76(to, tokenId) {\n      var from;\n      return runtime_1.wrap(function _callee76$(_context76) {\n        while (1) {\n          switch (_context76.prev = _context76.next) {\n            case 0:\n              _context76.next = 2;\n              return this.getSignerAddress();\n\n            case 2:\n              from = _context76.sent;\n              _context76.next = 5;\n              return this.sendTransaction(\"safeTransferFrom(address,address,uint256)\", [from, to, tokenId]);\n\n            case 5:\n              return _context76.abrupt(\"return\", _context76.sent);\n\n            case 6:\n            case \"end\":\n              return _context76.stop();\n          }\n        }\n      }, _callee76, this);\n    }));\n\n    function transfer(_x66, _x67) {\n      return _transfer2.apply(this, arguments);\n    }\n\n    return transfer;\n  }()\n  /**\r\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\r\n   */\n  ;\n\n  _proto2.lazyMint = /*#__PURE__*/function () {\n    var _lazyMint2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee77(metadata) {\n      return runtime_1.wrap(function _callee77$(_context77) {\n        while (1) {\n          switch (_context77.prev = _context77.next) {\n            case 0:\n              _context77.next = 2;\n              return this.lazyMintBatch([metadata]);\n\n            case 2:\n            case \"end\":\n              return _context77.stop();\n          }\n        }\n      }, _callee77, this);\n    }));\n\n    function lazyMint(_x68) {\n      return _lazyMint2.apply(this, arguments);\n    }\n\n    return lazyMint;\n  }();\n\n  _proto2.pinToIpfs = /*#__PURE__*/function () {\n    var _pinToIpfs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee78(files) {\n      return runtime_1.wrap(function _callee78$(_context78) {\n        while (1) {\n          switch (_context78.prev = _context78.next) {\n            case 0:\n              _context78.next = 2;\n              return this.storage.uploadBatch(files, this.address);\n\n            case 2:\n              return _context78.abrupt(\"return\", _context78.sent);\n\n            case 3:\n            case \"end\":\n              return _context78.stop();\n          }\n        }\n      }, _callee78, this);\n    }));\n\n    function pinToIpfs(_x69) {\n      return _pinToIpfs.apply(this, arguments);\n    }\n\n    return pinToIpfs;\n  }()\n  /**\r\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\r\n   */\n  ;\n\n  _proto2.lazyMintBatch = /*#__PURE__*/function () {\n    var _lazyMintBatch2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee79(metadatas) {\n      var _yield$this$sdk$getSt4, baseUri, uris;\n\n      return runtime_1.wrap(function _callee79$(_context79) {\n        while (1) {\n          switch (_context79.prev = _context79.next) {\n            case 0:\n              _context79.next = 2;\n              return this.sdk.getStorage().uploadMetadataBatch(metadatas);\n\n            case 2:\n              _yield$this$sdk$getSt4 = _context79.sent;\n              baseUri = _yield$this$sdk$getSt4.baseUri;\n              uris = Array.from(Array(metadatas.length).keys()).map(function (i) {\n                return \"\" + baseUri + i + \"/\";\n              });\n              _context79.next = 7;\n              return this.sendTransaction(\"lazyMintBatch\", [uris]);\n\n            case 7:\n            case \"end\":\n              return _context79.stop();\n          }\n        }\n      }, _callee79, this);\n    }));\n\n    function lazyMintBatch(_x70) {\n      return _lazyMintBatch2.apply(this, arguments);\n    }\n\n    return lazyMintBatch;\n  }()\n  /**\r\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\r\n   */\n  ;\n\n  _proto2.lazyMintAmount = /*#__PURE__*/function () {\n    var _lazyMintAmount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee80(amount) {\n      return runtime_1.wrap(function _callee80$(_context80) {\n        while (1) {\n          switch (_context80.prev = _context80.next) {\n            case 0:\n              _context80.next = 2;\n              return this.sendTransaction(\"lazyMintAmount\", [amount]);\n\n            case 2:\n            case \"end\":\n              return _context80.stop();\n          }\n        }\n      }, _callee80, this);\n    }));\n\n    function lazyMintAmount(_x71) {\n      return _lazyMintAmount.apply(this, arguments);\n    }\n\n    return lazyMintAmount;\n  }()\n  /**\r\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\r\n   */\n  ;\n\n  _proto2.setMintConditions = /*#__PURE__*/function () {\n    var _setMintConditions2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee81(factory) {\n      return runtime_1.wrap(function _callee81$(_context81) {\n        while (1) {\n          switch (_context81.prev = _context81.next) {\n            case 0:\n              return _context81.abrupt(\"return\", this.setClaimCondition(factory));\n\n            case 1:\n            case \"end\":\n              return _context81.stop();\n          }\n        }\n      }, _callee81, this);\n    }));\n\n    function setMintConditions(_x72) {\n      return _setMintConditions2.apply(this, arguments);\n    }\n\n    return setMintConditions;\n  }()\n  /**\r\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\r\n   */\n  ;\n\n  _proto2.setClaimConditions = /*#__PURE__*/function () {\n    var _setClaimConditions2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee82(factory) {\n      return runtime_1.wrap(function _callee82$(_context82) {\n        while (1) {\n          switch (_context82.prev = _context82.next) {\n            case 0:\n              return _context82.abrupt(\"return\", this.setClaimCondition(factory));\n\n            case 1:\n            case \"end\":\n              return _context82.stop();\n          }\n        }\n      }, _callee82, this);\n    }));\n\n    function setClaimConditions(_x73) {\n      return _setClaimConditions2.apply(this, arguments);\n    }\n\n    return setClaimConditions;\n  }()\n  /**\r\n   * Sets public mint conditions for the next minting using the\r\n   * claim condition factory.\r\n   *\r\n   * @param factory - The claim condition factory.\r\n   */\n  ;\n\n  _proto2.setClaimCondition = /*#__PURE__*/function () {\n    var _setClaimCondition2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee83(factory) {\n      var conditions, merkleInfo, _yield$this$getMetada6, metadata, metatdataUri, encoded;\n\n      return runtime_1.wrap(function _callee83$(_context83) {\n        while (1) {\n          switch (_context83.prev = _context83.next) {\n            case 0:\n              _context83.next = 2;\n              return factory.buildConditionsForDropV1();\n\n            case 2:\n              conditions = _context83.sent;\n              merkleInfo = {};\n              factory.allSnapshots().forEach(function (s) {\n                merkleInfo[s.merkleRoot] = s.snapshotUri;\n              });\n              _context83.next = 7;\n              return this.getMetadata(false);\n\n            case 7:\n              _yield$this$getMetada6 = _context83.sent;\n              metadata = _yield$this$getMetada6.metadata;\n              !metadata ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Metadata is not set, this should never happen\") : invariant(false) : void 0;\n\n              if (factory.allSnapshots().length === 0 && \"merkle\" in metadata) {\n                metadata[\"merkle\"] = {};\n              } else {\n                metadata[\"merkle\"] = merkleInfo;\n              }\n\n              _context83.next = 13;\n              return this.storage.upload(JSON.stringify(metadata));\n\n            case 13:\n              metatdataUri = _context83.sent;\n              encoded = [this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [metatdataUri]), this.contract[\"interface\"].encodeFunctionData(\"setPublicMintConditions\", [conditions])];\n              _context83.next = 17;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 17:\n              return _context83.abrupt(\"return\", _context83.sent);\n\n            case 18:\n            case \"end\":\n              return _context83.stop();\n          }\n        }\n      }, _callee83, this);\n    }));\n\n    function setClaimCondition(_x74) {\n      return _setClaimCondition2.apply(this, arguments);\n    }\n\n    return setClaimCondition;\n  }()\n  /**\r\n   * Creates a claim condition factory\r\n   *\r\n   * @returns - A new claim condition factory\r\n   */\n  ;\n\n  _proto2.getClaimConditionsFactory = function getClaimConditionsFactory() {\n    var createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    var factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n  /**\r\n   * @deprecated - Use the {@link DropModule.getClaimConditionsFactory} instead.\r\n   */\n  ;\n\n  _proto2.getMintConditionsFactory = function getMintConditionsFactory() {\n    return this.getClaimConditionsFactory();\n  }\n  /**\r\n   * @deprecated - Use the {@link DropModule.setClaimConditions} instead.\r\n   */\n  ;\n\n  _proto2.setPublicMintConditions = /*#__PURE__*/function () {\n    var _setPublicMintConditions2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee84(conditions) {\n      var _conditions;\n\n      return runtime_1.wrap(function _callee84$(_context84) {\n        while (1) {\n          switch (_context84.prev = _context84.next) {\n            case 0:\n              _conditions = conditions.map(function (c) {\n                return {\n                  startTimestamp: c.startTimestampInSeconds || 0,\n                  maxMintSupply: c.maxMintSupply,\n                  currentMintSupply: 0,\n                  quantityLimitPerTransaction: c.quantityLimitPerTransaction || c.maxMintSupply,\n                  waitTimeSecondsLimitPerTransaction: c.waitTimeSecondsLimitPerTransaction || 0,\n                  pricePerToken: c.pricePerToken || 0,\n                  currency: c.currency || AddressZero,\n                  merkleRoot: c.merkleRoot || hexZeroPad([0], 32)\n                };\n              });\n              _context84.next = 3;\n              return this.sendTransaction(\"setPublicMintConditions\", [_conditions]);\n\n            case 3:\n            case \"end\":\n              return _context84.stop();\n          }\n        }\n      }, _callee84, this);\n    }));\n\n    function setPublicMintConditions(_x75) {\n      return _setPublicMintConditions2.apply(this, arguments);\n    }\n\n    return setPublicMintConditions;\n  }();\n\n  _proto2.canClaim = /*#__PURE__*/function () {\n    var _canClaim2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee85(quantity, proofs) {\n      var mintCondition, overrides, owner, erc20, spender, allowance, totalPrice;\n      return runtime_1.wrap(function _callee85$(_context85) {\n        while (1) {\n          switch (_context85.prev = _context85.next) {\n            case 0:\n              if (proofs === void 0) {\n                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];\n              }\n\n              _context85.prev = 1;\n              _context85.next = 4;\n              return this.getActiveClaimCondition();\n\n            case 4:\n              mintCondition = _context85.sent;\n              _context85.next = 7;\n              return this.getCallOverrides();\n\n            case 7:\n              _context85.t0 = _context85.sent;\n\n              if (_context85.t0) {\n                _context85.next = 10;\n                break;\n              }\n\n              _context85.t0 = {};\n\n            case 10:\n              overrides = _context85.t0;\n              _context85.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              owner = _context85.sent;\n\n              if (!mintCondition.merkleRoot) {\n                _context85.next = 18;\n                break;\n              }\n\n              _context85.next = 17;\n              return this.getClaimerProofs(mintCondition == null ? void 0 : mintCondition.merkleRoot, owner);\n\n            case 17:\n              proofs = _context85.sent;\n\n            case 18:\n              if (!mintCondition.pricePerToken.gt(0)) {\n                _context85.next = 30;\n                break;\n              }\n\n              if (!(mintCondition.currency === AddressZero)) {\n                _context85.next = 23;\n                break;\n              }\n\n              overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);\n              _context85.next = 30;\n              break;\n\n            case 23:\n              erc20 = ERC20__factory.connect(mintCondition.currency, this.providerOrSigner);\n              spender = this.address;\n              _context85.next = 27;\n              return erc20.allowance(owner, spender);\n\n            case 27:\n              allowance = _context85.sent;\n              totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(BigNumber.from(quantity));\n              if (allowance.lt(totalPrice)) ;\n\n            case 30:\n              _context85.next = 32;\n              return this.contract.callStatic.claim(quantity, proofs, overrides);\n\n            case 32:\n              return _context85.abrupt(\"return\", true);\n\n            case 35:\n              _context85.prev = 35;\n              _context85.t1 = _context85[\"catch\"](1);\n              return _context85.abrupt(\"return\", false);\n\n            case 38:\n            case \"end\":\n              return _context85.stop();\n          }\n        }\n      }, _callee85, this, [[1, 35]]);\n    }));\n\n    function canClaim(_x76, _x77) {\n      return _canClaim2.apply(this, arguments);\n    }\n\n    return canClaim;\n  }()\n  /**\r\n   * Fetches the proof for the current signer for a particular wallet.\r\n   *\r\n   * @param merkleRoot - The merkle root of the condition to check.\r\n   * @returns - The proof for the current signer for the specified condition.\r\n   */\n  ;\n\n  _proto2.getClaimerProofs = /*#__PURE__*/function () {\n    var _getClaimerProofs2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee86(merkleRoot, addressToClaim) {\n      var _yield$this$getMetada7, metadata, snapshot, jsonConvert, snapshotData, item;\n\n      return runtime_1.wrap(function _callee86$(_context86) {\n        while (1) {\n          switch (_context86.prev = _context86.next) {\n            case 0:\n              if (addressToClaim) {\n                _context86.next = 4;\n                break;\n              }\n\n              _context86.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              addressToClaim = _context86.sent;\n\n            case 4:\n              _context86.next = 6;\n              return this.getMetadata();\n\n            case 6:\n              _yield$this$getMetada7 = _context86.sent;\n              metadata = _yield$this$getMetada7.metadata;\n              _context86.next = 10;\n              return this.storage.get(metadata == null ? void 0 : metadata.merkle[merkleRoot]);\n\n            case 10:\n              snapshot = _context86.sent;\n              jsonConvert = new JsonConvert();\n              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);\n              item = snapshotData.claims.find(function (c) {\n                var _addressToClaim2;\n\n                return c.address.toLowerCase() === ((_addressToClaim2 = addressToClaim) == null ? void 0 : _addressToClaim2.toLowerCase());\n              });\n\n              if (!(item === undefined)) {\n                _context86.next = 16;\n                break;\n              }\n\n              return _context86.abrupt(\"return\", []);\n\n            case 16:\n              return _context86.abrupt(\"return\", item.proof);\n\n            case 17:\n            case \"end\":\n              return _context86.stop();\n          }\n        }\n      }, _callee86, this);\n    }));\n\n    function getClaimerProofs(_x78, _x79) {\n      return _getClaimerProofs2.apply(this, arguments);\n    }\n\n    return getClaimerProofs;\n  }();\n\n  _proto2.claim = /*#__PURE__*/function () {\n    var _claim2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee88(quantity, proofs) {\n      var _this14 = this;\n\n      var mintCondition, _yield$this$getMetada8, metadata, addressToClaim, snapshot, jsonConvert, snapshotData, item, overrides, erc20, owner, spender, allowance, totalPrice, receipt, event, startingIndex, endingIndex, tokenIds, i;\n\n      return runtime_1.wrap(function _callee88$(_context88) {\n        while (1) {\n          switch (_context88.prev = _context88.next) {\n            case 0:\n              if (proofs === void 0) {\n                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];\n              }\n\n              _context88.next = 3;\n              return this.getActiveClaimCondition();\n\n            case 3:\n              mintCondition = _context88.sent;\n              _context88.next = 6;\n              return this.getMetadata();\n\n            case 6:\n              _yield$this$getMetada8 = _context88.sent;\n              metadata = _yield$this$getMetada8.metadata;\n              _context88.next = 10;\n              return this.getSignerAddress();\n\n            case 10:\n              addressToClaim = _context88.sent;\n\n              if (mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n                _context88.next = 21;\n                break;\n              }\n\n              _context88.next = 14;\n              return this.storage.get(metadata == null ? void 0 : metadata.merkle[mintCondition.merkleRoot.toString()]);\n\n            case 14:\n              snapshot = _context88.sent;\n              jsonConvert = new JsonConvert();\n              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);\n              item = snapshotData.claims.find(function (c) {\n                return c.address.toLowerCase() === addressToClaim.toLowerCase();\n              });\n\n              if (!(item === undefined)) {\n                _context88.next = 20;\n                break;\n              }\n\n              throw new Error(\"No claim found for this address\");\n\n            case 20:\n              proofs = item.proof;\n\n            case 21:\n              _context88.next = 23;\n              return this.getCallOverrides();\n\n            case 23:\n              _context88.t0 = _context88.sent;\n\n              if (_context88.t0) {\n                _context88.next = 26;\n                break;\n              }\n\n              _context88.t0 = {};\n\n            case 26:\n              overrides = _context88.t0;\n\n              if (!mintCondition.pricePerToken.gt(0)) {\n                _context88.next = 44;\n                break;\n              }\n\n              if (!(mintCondition.currency === AddressZero)) {\n                _context88.next = 32;\n                break;\n              }\n\n              overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);\n              _context88.next = 44;\n              break;\n\n            case 32:\n              erc20 = ERC20__factory.connect(mintCondition.currency, this.providerOrSigner);\n              _context88.next = 35;\n              return this.getSignerAddress();\n\n            case 35:\n              owner = _context88.sent;\n              spender = this.address;\n              _context88.next = 39;\n              return erc20.allowance(owner, spender);\n\n            case 39:\n              allowance = _context88.sent;\n              totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(BigNumber.from(quantity));\n\n              if (!allowance.lt(totalPrice)) {\n                _context88.next = 44;\n                break;\n              }\n\n              _context88.next = 44;\n              return this.sendContractTransaction(erc20, \"approve\", [spender, allowance.add(totalPrice)]);\n\n            case 44:\n              _context88.next = 46;\n              return this.sendTransaction(\"claim\", [quantity, proofs], overrides);\n\n            case 46:\n              receipt = _context88.sent;\n              event = this.parseEventLogs(\"Claimed\", receipt == null ? void 0 : receipt.logs);\n              startingIndex = event.startTokenId;\n              endingIndex = startingIndex.add(quantity);\n              tokenIds = [];\n\n              for (i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n                tokenIds.push(BigNumber.from(i.toString()));\n              }\n\n              _context88.next = 54;\n              return Promise.all(tokenIds.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee87(t) {\n                  return runtime_1.wrap(function _callee87$(_context87) {\n                    while (1) {\n                      switch (_context87.prev = _context87.next) {\n                        case 0:\n                          _context87.next = 2;\n                          return _this14.get(t.toString());\n\n                        case 2:\n                          return _context87.abrupt(\"return\", _context87.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context87.stop();\n                      }\n                    }\n                  }, _callee87);\n                }));\n\n                return function (_x82) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 54:\n              return _context88.abrupt(\"return\", _context88.sent);\n\n            case 55:\n            case \"end\":\n              return _context88.stop();\n          }\n        }\n      }, _callee88, this);\n    }));\n\n    function claim(_x80, _x81) {\n      return _claim2.apply(this, arguments);\n    }\n\n    return claim;\n  }();\n\n  _proto2.burn = /*#__PURE__*/function () {\n    var _burn2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee89(tokenId) {\n      return runtime_1.wrap(function _callee89$(_context89) {\n        while (1) {\n          switch (_context89.prev = _context89.next) {\n            case 0:\n              _context89.next = 2;\n              return this.sendTransaction(\"burn\", [tokenId]);\n\n            case 2:\n              return _context89.abrupt(\"return\", _context89.sent);\n\n            case 3:\n            case \"end\":\n              return _context89.stop();\n          }\n        }\n      }, _callee89, this);\n    }));\n\n    function burn(_x83) {\n      return _burn2.apply(this, arguments);\n    }\n\n    return burn;\n  }();\n\n  _proto2.transferFrom = /*#__PURE__*/function () {\n    var _transferFrom2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee90(from, to, tokenId) {\n      return runtime_1.wrap(function _callee90$(_context90) {\n        while (1) {\n          switch (_context90.prev = _context90.next) {\n            case 0:\n              _context90.next = 2;\n              return this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n\n            case 2:\n              return _context90.abrupt(\"return\", _context90.sent);\n\n            case 3:\n            case \"end\":\n              return _context90.stop();\n          }\n        }\n      }, _callee90, this);\n    }));\n\n    function transferFrom(_x84, _x85, _x86) {\n      return _transferFrom2.apply(this, arguments);\n    }\n\n    return transferFrom;\n  }() // owner functions\n  ;\n\n  _proto2.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee91(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee91$(_context91) {\n        while (1) {\n          switch (_context91.prev = _context91.next) {\n            case 0:\n              _context91.next = 2;\n              return this.storage.uploadMetadata(metadata);\n\n            case 2:\n              uri = _context91.sent;\n              _context91.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context91.abrupt(\"return\", _context91.sent);\n\n            case 6:\n            case \"end\":\n              return _context91.stop();\n          }\n        }\n      }, _callee91, this);\n    }));\n\n    function setModuleMetadata(_x87) {\n      return _setModuleMetadata2.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }();\n\n  _proto2.setRoyaltyBps = /*#__PURE__*/function () {\n    var _setRoyaltyBps2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee92(amount) {\n      var _yield$this$getMetada9, metadata, encoded, uri;\n\n      return runtime_1.wrap(function _callee92$(_context92) {\n        while (1) {\n          switch (_context92.prev = _context92.next) {\n            case 0:\n              _context92.next = 2;\n              return this.getMetadata();\n\n            case 2:\n              _yield$this$getMetada9 = _context92.sent;\n              metadata = _yield$this$getMetada9.metadata;\n              encoded = [];\n\n              if (metadata) {\n                _context92.next = 7;\n                break;\n              }\n\n              throw new Error(\"No metadata found, this module might be invalid!\");\n\n            case 7:\n              metadata.seller_fee_basis_points = amount;\n              _context92.t0 = this.storage;\n              _context92.t1 = _extends({}, metadata);\n              _context92.t2 = this.address;\n              _context92.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context92.t3 = _context92.sent;\n              _context92.next = 16;\n              return _context92.t0.uploadMetadata.call(_context92.t0, _context92.t1, _context92.t2, _context92.t3);\n\n            case 16:\n              uri = _context92.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setRoyaltyBps\", [amount]));\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [uri]));\n              _context92.next = 21;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 21:\n              return _context92.abrupt(\"return\", _context92.sent);\n\n            case 22:\n            case \"end\":\n              return _context92.stop();\n          }\n        }\n      }, _callee92, this);\n    }));\n\n    function setRoyaltyBps(_x88) {\n      return _setRoyaltyBps2.apply(this, arguments);\n    }\n\n    return setRoyaltyBps;\n  }();\n\n  _proto2.setBaseTokenUri = /*#__PURE__*/function () {\n    var _setBaseTokenUri = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee93(uri) {\n      return runtime_1.wrap(function _callee93$(_context93) {\n        while (1) {\n          switch (_context93.prev = _context93.next) {\n            case 0:\n              _context93.next = 2;\n              return this.sendTransaction(\"setBaseTokenURI\", [uri]);\n\n            case 2:\n              return _context93.abrupt(\"return\", _context93.sent);\n\n            case 3:\n            case \"end\":\n              return _context93.stop();\n          }\n        }\n      }, _callee93, this);\n    }));\n\n    function setBaseTokenUri(_x89) {\n      return _setBaseTokenUri.apply(this, arguments);\n    }\n\n    return setBaseTokenUri;\n  }();\n\n  _proto2.setMaxTotalSupply = /*#__PURE__*/function () {\n    var _setMaxTotalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee94(amount) {\n      return runtime_1.wrap(function _callee94$(_context94) {\n        while (1) {\n          switch (_context94.prev = _context94.next) {\n            case 0:\n              _context94.next = 2;\n              return this.sendTransaction(\"setMaxTotalSupply\", [amount]);\n\n            case 2:\n              return _context94.abrupt(\"return\", _context94.sent);\n\n            case 3:\n            case \"end\":\n              return _context94.stop();\n          }\n        }\n      }, _callee94, this);\n    }));\n\n    function setMaxTotalSupply(_x90) {\n      return _setMaxTotalSupply.apply(this, arguments);\n    }\n\n    return setMaxTotalSupply;\n  }()\n  /**\r\n   * Gets the royalty BPS (basis points) of the contract\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto2.getRoyaltyBps = /*#__PURE__*/function () {\n    var _getRoyaltyBps2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee95() {\n      return runtime_1.wrap(function _callee95$(_context95) {\n        while (1) {\n          switch (_context95.prev = _context95.next) {\n            case 0:\n              _context95.next = 2;\n              return this.readOnlyContract.royaltyBps();\n\n            case 2:\n              return _context95.abrupt(\"return\", _context95.sent);\n\n            case 3:\n            case \"end\":\n              return _context95.stop();\n          }\n        }\n      }, _callee95, this);\n    }));\n\n    function getRoyaltyBps() {\n      return _getRoyaltyBps2.apply(this, arguments);\n    }\n\n    return getRoyaltyBps;\n  }()\n  /**\r\n   * Gets the address of the royalty recipient\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto2.getRoyaltyRecipientAddress = /*#__PURE__*/function () {\n    var _getRoyaltyRecipientAddress2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee96() {\n      var _metadata$metadata2;\n\n      var metadata;\n      return runtime_1.wrap(function _callee96$(_context96) {\n        while (1) {\n          switch (_context96.prev = _context96.next) {\n            case 0:\n              _context96.next = 2;\n              return this.getMetadata();\n\n            case 2:\n              metadata = _context96.sent;\n\n              if (!(((_metadata$metadata2 = metadata.metadata) == null ? void 0 : _metadata$metadata2.fee_recipient) !== undefined)) {\n                _context96.next = 5;\n                break;\n              }\n\n              return _context96.abrupt(\"return\", metadata.metadata.fee_recipient);\n\n            case 5:\n              return _context96.abrupt(\"return\", \"\");\n\n            case 6:\n            case \"end\":\n              return _context96.stop();\n          }\n        }\n      }, _callee96, this);\n    }));\n\n    function getRoyaltyRecipientAddress() {\n      return _getRoyaltyRecipientAddress2.apply(this, arguments);\n    }\n\n    return getRoyaltyRecipientAddress;\n  }()\n  /**\r\n   * Create batch allows you to create a batch of tokens\r\n   * in one transaction. This function can only be called\r\n   * once per module at the moment.\r\n   *\r\n   * @beta\r\n   *\r\n   * @param metadatas - The metadata to include in the batch.\r\n   */\n  ;\n\n  _proto2.createBatch = /*#__PURE__*/function () {\n    var _createBatch2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee97(metadatas) {\n      var startFileNumber, _yield$this$storage$u, baseUri, encoded;\n\n      return runtime_1.wrap(function _callee97$(_context97) {\n        while (1) {\n          switch (_context97.prev = _context97.next) {\n            case 0:\n              _context97.next = 2;\n              return this.canCreateBatch();\n\n            case 2:\n              if (_context97.sent) {\n                _context97.next = 4;\n                break;\n              }\n\n              throw new Error(\"Batch already created!\");\n\n            case 4:\n              _context97.next = 6;\n              return this.readOnlyContract.nextMintTokenId();\n\n            case 6:\n              startFileNumber = _context97.sent;\n              _context97.next = 9;\n              return this.storage.uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n\n            case 9:\n              _yield$this$storage$u = _context97.sent;\n              baseUri = _yield$this$storage$u.baseUri;\n              encoded = [this.contract[\"interface\"].encodeFunctionData(\"setBaseTokenURI\", [baseUri]), this.contract[\"interface\"].encodeFunctionData(\"lazyMintAmount\", [metadatas.length])];\n              _context97.next = 14;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 14:\n              return _context97.abrupt(\"return\", []);\n\n            case 15:\n            case \"end\":\n              return _context97.stop();\n          }\n        }\n      }, _callee97, this);\n    }));\n\n    function createBatch(_x91) {\n      return _createBatch2.apply(this, arguments);\n    }\n\n    return createBatch;\n  }()\n  /**\r\n   * @internal\r\n   *\r\n   * @returns - True if the batch has been created, false otherwise.\r\n   */\n  ;\n\n  _proto2.canCreateBatch = /*#__PURE__*/function () {\n    var _canCreateBatch2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee98() {\n      return runtime_1.wrap(function _callee98$(_context98) {\n        while (1) {\n          switch (_context98.prev = _context98.next) {\n            case 0:\n              _context98.next = 2;\n              return this.readOnlyContract.nextTokenId();\n\n            case 2:\n              return _context98.abrupt(\"return\", _context98.sent.eq(0));\n\n            case 3:\n            case \"end\":\n              return _context98.stop();\n          }\n        }\n      }, _callee98, this);\n    }));\n\n    function canCreateBatch() {\n      return _canCreateBatch2.apply(this, arguments);\n    }\n\n    return canCreateBatch;\n  }();\n\n  _proto2.isTransferRestricted = /*#__PURE__*/function () {\n    var _isTransferRestricted2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee99() {\n      return runtime_1.wrap(function _callee99$(_context99) {\n        while (1) {\n          switch (_context99.prev = _context99.next) {\n            case 0:\n              return _context99.abrupt(\"return\", this.readOnlyContract.transfersRestricted());\n\n            case 1:\n            case \"end\":\n              return _context99.stop();\n          }\n        }\n      }, _callee99, this);\n    }));\n\n    function isTransferRestricted() {\n      return _isTransferRestricted2.apply(this, arguments);\n    }\n\n    return isTransferRestricted;\n  }();\n\n  _proto2.setRestrictedTransfer = /*#__PURE__*/function () {\n    var _setRestrictedTransfer2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee100(restricted) {\n      return runtime_1.wrap(function _callee100$(_context100) {\n        while (1) {\n          switch (_context100.prev = _context100.next) {\n            case 0:\n              if (restricted === void 0) {\n                restricted = false;\n              }\n\n              _context100.t0 = this;\n              _context100.t1 = [\"admin\"];\n              _context100.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context100.t2 = _context100.sent;\n              _context100.next = 8;\n              return _context100.t0.onlyRoles.call(_context100.t0, _context100.t1, _context100.t2);\n\n            case 8:\n              _context100.next = 10;\n              return this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n\n            case 10:\n              return _context100.abrupt(\"return\", _context100.sent);\n\n            case 11:\n            case \"end\":\n              return _context100.stop();\n          }\n        }\n      }, _callee100, this);\n    }));\n\n    function setRestrictedTransfer(_x92) {\n      return _setRestrictedTransfer2.apply(this, arguments);\n    }\n\n    return setRestrictedTransfer;\n  }();\n\n  return DropV1Module;\n}(ModuleWithRoles); // This is a deprecated class, DropV1, see above\n\n\nDropV1Module.moduleType = ModuleType.DROP;\nDropV1Module.roles = [RolesMap.admin, RolesMap.minter, RolesMap.transfer];\n/**\r\n * Access this module by calling {@link ThirdwebSDK.getMarketModule}\r\n * @public\r\n *\r\n * @deprecated\r\n */\n\nvar MarketModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(MarketModule, _ModuleWithRoles);\n\n  function MarketModule() {\n    return _ModuleWithRoles.apply(this, arguments) || this;\n  }\n\n  var _proto = MarketModule.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return MarketModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return Market__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return MarketModule.moduleType;\n  };\n\n  _proto.transformResultToListing = /*#__PURE__*/function () {\n    var _transformResultToListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(listing) {\n      var currency, metadata;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currency = null;\n              _context.prev = 1;\n              _context.next = 4;\n              return getCurrencyValue(this.providerOrSigner, listing.currency, listing.pricePerToken);\n\n            case 4:\n              currency = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 9:\n              metadata = undefined;\n              _context.prev = 10;\n              _context.next = 13;\n              return getMetadataWithoutContract(this.providerOrSigner, listing.assetContract, listing.tokenId.toString(), this.sdk.getStorage());\n\n            case 13:\n              metadata = _context.sent;\n              _context.next = 18;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t1 = _context[\"catch\"](10);\n\n            case 18:\n              return _context.abrupt(\"return\", {\n                id: listing.listingId.toString(),\n                seller: listing.seller,\n                tokenId: listing.tokenId.toString(),\n                tokenContract: listing.assetContract,\n                tokenMetadata: metadata,\n                quantity: listing.quantity,\n                price: listing.pricePerToken,\n                currencyContract: listing.currency,\n                tokensPerBuyer: listing.tokensPerBuyer,\n                currencyMetadata: currency,\n                saleStart: listing.saleStart.gt(0) ? new Date(listing.saleStart.toNumber() * 1000) : null,\n                saleEnd: listing.saleEnd.gt(0) && listing.saleEnd.lte(Number.MAX_SAFE_INTEGER - 1) ? new Date(listing.saleEnd.toNumber() * 1000) : null\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[1, 7], [10, 16]]);\n    }));\n\n    function transformResultToListing(_x) {\n      return _transformResultToListing.apply(this, arguments);\n    }\n\n    return transformResultToListing;\n  }()\n  /**\r\n   * @deprecated Use {@link MarketModule.get} instead.\r\n   */\n  ;\n\n  _proto.getListing = /*#__PURE__*/function () {\n    var _getListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(listingId) {\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.get(listingId);\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getListing(_x2) {\n      return _getListing.apply(this, arguments);\n    }\n\n    return getListing;\n  }()\n  /**\r\n   * @deprecated Use {@link MarketModule.getAll} instead.\r\n   */\n  ;\n\n  _proto.getAllListings = /*#__PURE__*/function () {\n    var _getAllListings = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(filter) {\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getAll(filter);\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getAllListings(_x3) {\n      return _getAllListings.apply(this, arguments);\n    }\n\n    return getAllListings;\n  }();\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(listingId) {\n      var listing;\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.readOnlyContract.listings(listingId);\n\n            case 2:\n              listing = _context4.sent;\n              _context4.next = 5;\n              return this.transformResultToListing(listing);\n\n            case 5:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function get(_x4) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }();\n\n  _proto.getAll = /*#__PURE__*/function () {\n    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(filter) {\n      var _this = this;\n\n      var listings;\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              listings = [];\n\n              if (filter) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.t0 = listings;\n              _context5.next = 5;\n              return this.readOnlyContract.getAllListings();\n\n            case 5:\n              _context5.t1 = _context5.sent;\n              listings = _context5.t0.concat.call(_context5.t0, _context5.t1);\n              _context5.next = 38;\n              break;\n\n            case 9:\n              if (!(filter.tokenContract && filter.tokenId)) {\n                _context5.next = 17;\n                break;\n              }\n\n              _context5.t2 = listings;\n              _context5.next = 13;\n              return this.readOnlyContract.getListingsByAsset(filter.tokenContract, filter.tokenId);\n\n            case 13:\n              _context5.t3 = _context5.sent;\n              listings = _context5.t2.concat.call(_context5.t2, _context5.t3);\n              _context5.next = 38;\n              break;\n\n            case 17:\n              if (!filter.seller) {\n                _context5.next = 25;\n                break;\n              }\n\n              _context5.t4 = listings;\n              _context5.next = 21;\n              return this.readOnlyContract.getListingsBySeller(filter.seller);\n\n            case 21:\n              _context5.t5 = _context5.sent;\n              listings = _context5.t4.concat.call(_context5.t4, _context5.t5);\n              _context5.next = 38;\n              break;\n\n            case 25:\n              if (!filter.tokenContract) {\n                _context5.next = 33;\n                break;\n              }\n\n              _context5.t6 = listings;\n              _context5.next = 29;\n              return this.readOnlyContract.getListingsByAssetContract(filter.tokenContract);\n\n            case 29:\n              _context5.t7 = _context5.sent;\n              listings = _context5.t6.concat.call(_context5.t6, _context5.t7);\n              _context5.next = 38;\n              break;\n\n            case 33:\n              _context5.t8 = listings;\n              _context5.next = 36;\n              return this.readOnlyContract.getAllListings();\n\n            case 36:\n              _context5.t9 = _context5.sent;\n              listings = _context5.t8.concat.call(_context5.t8, _context5.t9);\n\n            case 38:\n              listings = listings.filter(function (l) {\n                if (l.quantity.eq(0)) {\n                  return false;\n                }\n\n                if (filter) {\n                  var filterSeller = (filter == null ? void 0 : filter.seller) || \"\";\n                  var filterTokenContract = (filter == null ? void 0 : filter.tokenContract) || \"\";\n                  var filterTokenId = (filter == null ? void 0 : filter.tokenId) || \"\";\n\n                  if (filterSeller && filterSeller.toLowerCase() !== l.seller.toLowerCase()) {\n                    return false;\n                  }\n\n                  if (filterTokenContract && filterTokenContract.toLowerCase() !== l.assetContract.toLowerCase()) {\n                    return false;\n                  }\n\n                  if (filterTokenId && filterTokenId.toLowerCase() !== l.tokenId.toString().toLowerCase()) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }).map(function (l) {\n                return _this.transformResultToListing(l);\n              });\n              _context5.next = 41;\n              return Promise.all(listings);\n\n            case 41:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 42:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getAll(_x5) {\n      return _getAll.apply(this, arguments);\n    }\n\n    return getAll;\n  }();\n\n  _proto.getMarketFeeBps = /*#__PURE__*/function () {\n    var _getMarketFeeBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.readOnlyContract.marketFeeBps();\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function getMarketFeeBps() {\n      return _getMarketFeeBps.apply(this, arguments);\n    }\n\n    return getMarketFeeBps;\n  }() // write functions\n  ;\n\n  _proto.list = /*#__PURE__*/function () {\n    var _list = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(assetContract, tokenId, currencyContract, price, quantity, tokensPerBuyer, secondsUntilStart, secondsUntilEnd) {\n      var from, erc165, isERC721, asset, approved, isTokenApproved, _asset, _approved, receipt, event, listing, signer;\n\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (tokensPerBuyer === void 0) {\n                tokensPerBuyer = 0;\n              }\n\n              if (secondsUntilStart === void 0) {\n                secondsUntilStart = 0;\n              }\n\n              if (secondsUntilEnd === void 0) {\n                secondsUntilEnd = 0;\n              }\n\n              _context7.prev = 3;\n              _context7.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              from = _context7.sent;\n              erc165 = ERC165__factory.connect(assetContract, this.providerOrSigner);\n              !(quantity > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"quantity must be greater than 0\") : invariant(false) : void 0; // check for token approval\n\n              _context7.next = 11;\n              return erc165.supportsInterface(InterfaceId_IERC721);\n\n            case 11:\n              isERC721 = _context7.sent;\n\n              if (!isERC721) {\n                _context7.next = 28;\n                break;\n              }\n\n              asset = ERC721__factory.connect(assetContract, this.providerOrSigner);\n              _context7.next = 16;\n              return asset.isApprovedForAll(from, this.address);\n\n            case 16:\n              approved = _context7.sent;\n\n              if (approved) {\n                _context7.next = 26;\n                break;\n              }\n\n              _context7.next = 20;\n              return asset.getApproved(tokenId);\n\n            case 20:\n              _context7.t0 = _context7.sent.toLowerCase();\n              _context7.t1 = this.address.toLowerCase();\n              isTokenApproved = _context7.t0 === _context7.t1;\n\n              if (isTokenApproved) {\n                _context7.next = 26;\n                break;\n              }\n\n              _context7.next = 26;\n              return this.sendContractTransaction(asset, \"setApprovalForAll\", [this.address, true]);\n\n            case 26:\n              _context7.next = 35;\n              break;\n\n            case 28:\n              _asset = ERC1155__factory.connect(assetContract, this.providerOrSigner);\n              _context7.next = 31;\n              return _asset.isApprovedForAll(from, this.address);\n\n            case 31:\n              _approved = _context7.sent;\n\n              if (_approved) {\n                _context7.next = 35;\n                break;\n              }\n\n              _context7.next = 35;\n              return this.sendContractTransaction(_asset, \"setApprovalForAll\", [this.address, true]);\n\n            case 35:\n              _context7.next = 37;\n              return this.sendTransaction(\"list\", [assetContract, tokenId, currencyContract, price, quantity, tokensPerBuyer, secondsUntilStart, secondsUntilEnd]);\n\n            case 37:\n              receipt = _context7.sent;\n              event = this.parseEventLogs(\"NewListing\", receipt == null ? void 0 : receipt.logs);\n              listing = event == null ? void 0 : event.listing;\n              _context7.next = 42;\n              return this.transformResultToListing(listing);\n\n            case 42:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 45:\n              _context7.prev = 45;\n              _context7.t2 = _context7[\"catch\"](3);\n              _context7.next = 49;\n              return this.getSignerAddress();\n\n            case 49:\n              signer = _context7.sent;\n              _context7.next = 52;\n              return this.sdk.getNFTModule(assetContract).ownerOf(tokenId);\n\n            case 52:\n              _context7.t3 = _context7.sent;\n              _context7.t4 = signer;\n\n              if (!(_context7.t3 !== _context7.t4)) {\n                _context7.next = 58;\n                break;\n              }\n\n              throw new MissingOwnerRoleError();\n\n            case 58:\n              _context7.next = 60;\n              return this.readOnlyContract.restrictedListerRoleOnly();\n\n            case 60:\n              _context7.t6 = _context7.sent;\n\n              if (!_context7.t6) {\n                _context7.next = 67;\n                break;\n              }\n\n              _context7.t7 = signer;\n              _context7.next = 65;\n              return this.getRoleMembers(\"lister\");\n\n            case 65:\n              _context7.t8 = _context7.sent;\n              _context7.t6 = !(_context7.t7 in _context7.t8);\n\n            case 67:\n              _context7.t5 = _context7.t6;\n\n              if (!_context7.t5) {\n                _context7.next = 74;\n                break;\n              }\n\n              _context7.t9 = signer;\n              _context7.next = 72;\n              return this.getRoleMembers(\"admin\");\n\n            case 72:\n              _context7.t10 = _context7.sent;\n              _context7.t5 = !(_context7.t9 in _context7.t10);\n\n            case 74:\n              if (!_context7.t5) {\n                _context7.next = 76;\n                break;\n              }\n\n              throw new MissingRoleError(signer, \"lister\");\n\n            case 76:\n              throw _context7.t2;\n\n            case 77:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this, [[3, 45]]);\n    }));\n\n    function list(_x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13) {\n      return _list.apply(this, arguments);\n    }\n\n    return list;\n  }();\n\n  _proto.unlistAll = /*#__PURE__*/function () {\n    var _unlistAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(listingId) {\n      var maxQuantity;\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.get(listingId);\n\n            case 2:\n              maxQuantity = _context8.sent.quantity;\n              _context8.next = 5;\n              return this.unlist(listingId, maxQuantity);\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function unlistAll(_x14) {\n      return _unlistAll.apply(this, arguments);\n    }\n\n    return unlistAll;\n  }();\n\n  _proto.unlist = /*#__PURE__*/function () {\n    var _unlist = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(listingId, quantity) {\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.sendTransaction(\"unlist\", [listingId, quantity]);\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function unlist(_x15, _x16) {\n      return _unlist.apply(this, arguments);\n    }\n\n    return unlist;\n  }();\n\n  _proto.setRestrictedListerRoleOnly = /*#__PURE__*/function () {\n    var _setRestrictedListerRoleOnly = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(restricted) {\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.sendTransaction(\"setRestrictedListerRoleOnly\", [restricted]);\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function setRestrictedListerRoleOnly(_x17) {\n      return _setRestrictedListerRoleOnly.apply(this, arguments);\n    }\n\n    return setRestrictedListerRoleOnly;\n  }();\n\n  _proto.buy = /*#__PURE__*/function () {\n    var _buy = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(listingId, quantity) {\n      var listing, owner, spender, totalPrice, erc20, allowance, receipt, event, tokensPerBuyer;\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return this.get(listingId);\n\n            case 3:\n              listing = _context11.sent;\n              _context11.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              owner = _context11.sent;\n              spender = this.address;\n              totalPrice = listing.price.mul(BigNumber.from(quantity));\n\n              if (!(listing.currencyContract && listing.currencyContract !== AddressZero)) {\n                _context11.next = 17;\n                break;\n              }\n\n              erc20 = ERC20__factory.connect(listing.currencyContract, this.providerOrSigner);\n              _context11.next = 13;\n              return erc20.allowance(owner, spender);\n\n            case 13:\n              allowance = _context11.sent;\n\n              if (!allowance.lt(totalPrice)) {\n                _context11.next = 17;\n                break;\n              }\n\n              _context11.next = 17;\n              return this.sendContractTransaction(erc20, \"approve\", [spender, allowance.add(totalPrice)]);\n\n            case 17:\n              _context11.next = 19;\n              return this.sendTransaction(\"buy\", [listingId, quantity]);\n\n            case 19:\n              receipt = _context11.sent;\n              event = this.parseEventLogs(\"NewSale\", receipt == null ? void 0 : receipt.logs);\n              _context11.next = 23;\n              return this.transformResultToListing(event == null ? void 0 : event.listing);\n\n            case 23:\n              return _context11.abrupt(\"return\", _context11.sent);\n\n            case 26:\n              _context11.prev = 26;\n              _context11.t0 = _context11[\"catch\"](0);\n              _context11.next = 30;\n              return this.get(listingId);\n\n            case 30:\n              tokensPerBuyer = _context11.sent.tokensPerBuyer.toNumber();\n\n              if (!(quantity > tokensPerBuyer)) {\n                _context11.next = 33;\n                break;\n              }\n\n              throw new QuantityAboveLimitError(tokensPerBuyer.toString());\n\n            case 33:\n              throw _context11.t0;\n\n            case 34:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this, [[0, 26]]);\n    }));\n\n    function buy(_x18, _x19) {\n      return _buy.apply(this, arguments);\n    }\n\n    return buy;\n  }() // owner functions\n  ;\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context12.sent;\n              _context12.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context12.abrupt(\"return\", _context12.sent);\n\n            case 6:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function setModuleMetadata(_x20) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }();\n\n  _proto.setMarketFeeBps = /*#__PURE__*/function () {\n    var _setMarketFeeBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(fee) {\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.sendTransaction(\"setMarketFeeBps\", [fee]);\n\n            case 2:\n              return _context13.abrupt(\"return\", _context13.sent);\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function setMarketFeeBps(_x21) {\n      return _setMarketFeeBps.apply(this, arguments);\n    }\n\n    return setMarketFeeBps;\n  }();\n\n  return MarketModule;\n}(ModuleWithRoles);\n\nMarketModule.moduleType = ModuleType.MARKET;\nMarketModule.roles = [RolesMap.admin, RolesMap.lister, RolesMap.pauser];\nvar MAX_BPS = 10000;\n/**\r\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getMarketplaceModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar MarketplaceModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(MarketplaceModule, _ModuleWithRoles);\n\n  function MarketplaceModule() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ModuleWithRoles.call.apply(_ModuleWithRoles, [this].concat(args)) || this;\n    _this._shouldCheckVersion = true;\n    _this._isNewBuy = false;\n    return _this;\n  }\n\n  var _proto = MarketplaceModule.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return MarketplaceModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return Marketplace__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return MarketplaceModule.moduleType;\n  }\n  /**\r\n   * Create Direct Listing\r\n   *\r\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data of the listing you want to create\r\n   * const listing = {\r\n   *   // address of the contract the asset you want to list is on\r\n   *   assetContractAddress: \"0x...\",\r\n   *   // token ID of the asset you want to list\r\n   *   tokenId: \"0\",\r\n   *   // in how many seconds with the listing open up\r\n   *   startTimeInSeconds: 0,\r\n   *   // how long the listing will be open for\r\n   *   listingDurationInSeconds: 86400,\r\n   *   // how many of the asset you want to list\r\n   *   quantity: 1,\r\n   *   // address of the currency contract that will be used to pay for the listing\r\n   *   currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\r\n   *   // how much the asset will be sold for\r\n   *   buyoutPricePerToken: \"1\",\r\n   * }\r\n   *\r\n   * await module.createDirectListing(listing);\r\n   * ```\r\n   */\n  ;\n\n  _proto.createDirectListing = /*#__PURE__*/function () {\n    var _createDirectListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(listing) {\n      var receipt, event;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.validateNewListingParam(listing);\n              _context.t0 = this;\n              _context.t1 = listing.assetContractAddress;\n              _context.t2 = listing.tokenId;\n              _context.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context.t3 = _context.sent;\n              _context.next = 9;\n              return _context.t0.handleTokenApproval.call(_context.t0, _context.t1, _context.t2, _context.t3);\n\n            case 9:\n              _context.next = 11;\n              return this.sendTransaction(\"createListing\", [{\n                assetContract: listing.assetContractAddress,\n                tokenId: listing.tokenId,\n                buyoutPricePerToken: listing.buyoutPricePerToken,\n                currencyToAccept: listing.currencyContractAddress,\n                listingType: ListingType.Direct,\n                quantityToList: listing.quantity,\n                reservePricePerToken: listing.buyoutPricePerToken,\n                secondsUntilEndTime: listing.listingDurationInSeconds,\n                startTime: listing.startTimeInSeconds\n              }]);\n\n            case 11:\n              receipt = _context.sent;\n              event = this.parseEventLogs(\"NewListing\", receipt == null ? void 0 : receipt.logs);\n              return _context.abrupt(\"return\", event.listingId);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function createDirectListing(_x) {\n      return _createDirectListing.apply(this, arguments);\n    }\n\n    return createDirectListing;\n  }()\n  /**\r\n   * Create Auction\r\n   *\r\n   * @remarks Create a new auction where people can bid on an asset.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data of the auction you want to create\r\n   * const auction = {\r\n   *   // address of the contract the asset you want to list is on\r\n   *   assetContractAddress: \"0x...\",\r\n   *   // token ID of the asset you want to list\r\n   *   tokenId: \"0\",\r\n   *   // in how many seconds with the listing open up\r\n   *   startTimeInSeconds: 0,\r\n   *   // how long the listing will be open for\r\n   *   listingDurationInSeconds: 86400,\r\n   *   // how many of the asset you want to list\r\n   *   quantity: 1,\r\n   *   // address of the currency contract that will be used to pay for the listing\r\n   *   currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\r\n   *   // how much people would have to bid to instantly buy the asset\r\n   *   buyoutPricePerToken: \"10\",\r\n   *   // the minimum bid that will be accepted for the token\r\n   *   reservePricePerToken: \"1\",\r\n   * }\r\n   *\r\n   * await module.createAuctionListing(auction);\r\n   * ```\r\n   */\n  ;\n\n  _proto.createAuctionListing = /*#__PURE__*/function () {\n    var _createAuctionListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(listing) {\n      var receipt, event;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.validateNewListingParam(listing);\n              _context2.t0 = this;\n              _context2.t1 = listing.assetContractAddress;\n              _context2.t2 = listing.tokenId;\n              _context2.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context2.t3 = _context2.sent;\n              _context2.next = 9;\n              return _context2.t0.handleTokenApproval.call(_context2.t0, _context2.t1, _context2.t2, _context2.t3);\n\n            case 9:\n              _context2.next = 11;\n              return this.sendTransaction(\"createListing\", [{\n                assetContract: listing.assetContractAddress,\n                tokenId: listing.tokenId,\n                buyoutPricePerToken: listing.buyoutPricePerToken,\n                currencyToAccept: listing.currencyContractAddress,\n                listingType: ListingType.Auction,\n                quantityToList: listing.quantity,\n                reservePricePerToken: listing.reservePricePerToken,\n                secondsUntilEndTime: listing.listingDurationInSeconds,\n                startTime: listing.startTimeInSeconds\n              }]);\n\n            case 11:\n              receipt = _context2.sent;\n              event = this.parseEventLogs(\"NewListing\", receipt == null ? void 0 : receipt.logs);\n              return _context2.abrupt(\"return\", event.listingId);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function createAuctionListing(_x2) {\n      return _createAuctionListing.apply(this, arguments);\n    }\n\n    return createAuctionListing;\n  }();\n\n  _proto.makeDirectListingOffer = /*#__PURE__*/function () {\n    var _makeDirectListingOffer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(offer) {\n      var quantity, value, overrides;\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!isNativeToken(offer.currencyContractAddress)) {\n                _context3.next = 2;\n                break;\n              }\n\n              throw new Error(\"You must use the wrapped native token address when making an offer with a native token\");\n\n            case 2:\n              _context3.prev = 2;\n              _context3.next = 5;\n              return this.getDirectListing(offer.listingId);\n\n            case 5:\n              _context3.next = 11;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.error(\"Failed to get listing, err =\", _context3.t0);\n              throw new Error(\"Error getting the listing with id \" + offer.listingId);\n\n            case 11:\n              quantity = BigNumber.from(offer.quantityDesired);\n              value = BigNumber.from(offer.pricePerToken).mul(quantity);\n              _context3.next = 15;\n              return this.getCallOverrides();\n\n            case 15:\n              _context3.t1 = _context3.sent;\n\n              if (_context3.t1) {\n                _context3.next = 18;\n                break;\n              }\n\n              _context3.t1 = {};\n\n            case 18:\n              overrides = _context3.t1;\n              _context3.next = 21;\n              return this.setAllowance(value, offer.currencyContractAddress, overrides);\n\n            case 21:\n              _context3.next = 23;\n              return this.sendTransaction(\"offer\", [offer.listingId, offer.quantityDesired, offer.currencyContractAddress, offer.pricePerToken], overrides);\n\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[2, 7]]);\n    }));\n\n    function makeDirectListingOffer(_x3) {\n      return _makeDirectListingOffer.apply(this, arguments);\n    }\n\n    return makeDirectListingOffer;\n  }();\n\n  _proto.setAllowance = /*#__PURE__*/function () {\n    var _setAllowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(value, currencyAddress, overrides) {\n      var erc20, owner, spender, allowance;\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!isNativeToken(currencyAddress)) {\n                _context4.next = 4;\n                break;\n              }\n\n              overrides[\"value\"] = value;\n              _context4.next = 15;\n              break;\n\n            case 4:\n              erc20 = ERC20__factory.connect(currencyAddress, this.providerOrSigner);\n              _context4.next = 7;\n              return this.getSignerAddress();\n\n            case 7:\n              owner = _context4.sent;\n              spender = this.address;\n              _context4.next = 11;\n              return erc20.allowance(owner, spender);\n\n            case 11:\n              allowance = _context4.sent;\n\n              if (!allowance.lt(value)) {\n                _context4.next = 15;\n                break;\n              }\n\n              _context4.next = 15;\n              return this.sendContractTransaction(erc20, \"increaseAllowance\", [spender, value.sub(allowance)]);\n\n            case 15:\n              return _context4.abrupt(\"return\", overrides);\n\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function setAllowance(_x4, _x5, _x6) {\n      return _setAllowance.apply(this, arguments);\n    }\n\n    return setAllowance;\n  }()\n  /**\r\n   * Bid On Auction\r\n   *\r\n   * @remarks Make a bid on an auction listings\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the asset you want to bid on\r\n   * const listingId = 0;\r\n   * // The price you are willing to bid for a single token of the listing\r\n   * const pricePerToken = 1;\r\n   *\r\n   * await module.makeAuctionListingBid({ listingId, pricePerToken });\r\n   * ```\r\n   */\n  ;\n\n  _proto.makeAuctionListingBid = /*#__PURE__*/function () {\n    var _makeAuctionListingBid = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(bid) {\n      var listing, bidBuffer, winningBid, isWinningBid, pricePerToken, reservePrice, quantity, value, overrides;\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.validateAuctionListing(BigNumber.from(bid.listingId));\n\n            case 2:\n              listing = _context5.sent;\n              _context5.next = 5;\n              return this.getBidBufferBps();\n\n            case 5:\n              bidBuffer = _context5.sent;\n              _context5.next = 8;\n              return this.getWinningBid(bid.listingId);\n\n            case 8:\n              winningBid = _context5.sent;\n\n              if (!winningBid) {\n                _context5.next = 16;\n                break;\n              }\n\n              _context5.next = 12;\n              return this.isWinningBid(winningBid.pricePerToken, bid.pricePerToken, bidBuffer);\n\n            case 12:\n              isWinningBid = _context5.sent;\n              !isWinningBid ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Bid price is too low based on the current winning bid and the bid buffer\") : invariant(false) : void 0;\n              _context5.next = 19;\n              break;\n\n            case 16:\n              pricePerToken = BigNumber.from(bid.pricePerToken);\n              reservePrice = BigNumber.from(listing.reservePrice);\n              !pricePerToken.gte(reservePrice) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Bid price is too low based on reserve price\") : invariant(false) : void 0;\n\n            case 19:\n              quantity = BigNumber.from(listing.quantity);\n              value = BigNumber.from(bid.pricePerToken).mul(quantity);\n              _context5.next = 23;\n              return this.getCallOverrides();\n\n            case 23:\n              _context5.t0 = _context5.sent;\n\n              if (_context5.t0) {\n                _context5.next = 26;\n                break;\n              }\n\n              _context5.t0 = {};\n\n            case 26:\n              overrides = _context5.t0;\n              _context5.next = 29;\n              return this.setAllowance(value, listing.currencyContractAddress, overrides);\n\n            case 29:\n              _context5.next = 31;\n              return this.sendTransaction(\"offer\", [bid.listingId, listing.quantity, listing.currencyContractAddress, bid.pricePerToken], overrides);\n\n            case 31:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function makeAuctionListingBid(_x7) {\n      return _makeAuctionListingBid.apply(this, arguments);\n    }\n\n    return makeAuctionListingBid;\n  }();\n\n  _proto.isWinningBid = /*#__PURE__*/function () {\n    var _isWinningBid = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(winningPrice, newBidPrice, bidBuffer) {\n      var buffer;\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              bidBuffer = BigNumber.from(bidBuffer);\n              winningPrice = BigNumber.from(winningPrice);\n              newBidPrice = BigNumber.from(newBidPrice);\n              buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n              return _context6.abrupt(\"return\", buffer.gte(bidBuffer));\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function isWinningBid(_x8, _x9, _x10) {\n      return _isWinningBid.apply(this, arguments);\n    }\n\n    return isWinningBid;\n  }()\n  /**\r\n   * Get Auction Winner\r\n   *\r\n   * @remarks Get the winner of the auction after an auction ends.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the auction that closed\r\n   * const listingId = 0;\r\n   *\r\n   * module\r\n   *   .getAuctionWinner(listingId)\r\n   *   .then((auctionWinner) => console.log(auctionWinner))\r\n   *   .catch((err) => console.error(err));\r\n   * ```\r\n   */\n  ;\n\n  _proto.getAuctionWinner = /*#__PURE__*/function () {\n    var _getAuctionWinner = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(listingId) {\n      var closedAuctions, auction;\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.readOnlyContract.queryFilter(this.contract.filters.AuctionClosed());\n\n            case 2:\n              closedAuctions = _context7.sent;\n              auction = closedAuctions.find(function (a) {\n                return a.args.listingId.eq(BigNumber.from(listingId));\n              });\n\n              if (auction) {\n                _context7.next = 6;\n                break;\n              }\n\n              throw new Error(\"Could not find auction with listingId \" + listingId + \" in closed auctions\");\n\n            case 6:\n              return _context7.abrupt(\"return\", auction.args.winningBidder);\n\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getAuctionWinner(_x11) {\n      return _getAuctionWinner.apply(this, arguments);\n    }\n\n    return getAuctionWinner;\n  }();\n\n  _proto.getDirectListing = /*#__PURE__*/function () {\n    var _getDirectListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(listingId) {\n      var listing;\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.readOnlyContract.listings(listingId);\n\n            case 2:\n              listing = _context8.sent;\n\n              if (!(listing.listingId.toString() !== listingId.toString())) {\n                _context8.next = 5;\n                break;\n              }\n\n              throw new ListingNotFoundError(this.address, listingId.toString());\n\n            case 5:\n              if (!(listing.listingType !== ListingType.Direct)) {\n                _context8.next = 7;\n                break;\n              }\n\n              throw new WrongListingTypeError(this.address, listingId.toString(), \"Auction\", \"Direct\");\n\n            case 7:\n              _context8.next = 9;\n              return this.mapDirectListing(listing);\n\n            case 9:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 10:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getDirectListing(_x12) {\n      return _getDirectListing.apply(this, arguments);\n    }\n\n    return getDirectListing;\n  }();\n\n  _proto.getAuctionListing = /*#__PURE__*/function () {\n    var _getAuctionListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(listingId) {\n      var listing;\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.readOnlyContract.listings(listingId);\n\n            case 2:\n              listing = _context9.sent;\n\n              if (!(listing.listingId.toString() !== listingId.toString())) {\n                _context9.next = 5;\n                break;\n              }\n\n              throw new ListingNotFoundError(this.address, listingId.toString());\n\n            case 5:\n              if (!(listing.listingType !== ListingType.Auction)) {\n                _context9.next = 7;\n                break;\n              }\n\n              throw new WrongListingTypeError(this.address, listingId.toString(), \"Direct\", \"Auction\");\n\n            case 7:\n              _context9.next = 9;\n              return this.mapAuctionListing(listing);\n\n            case 9:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 10:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function getAuctionListing(_x13) {\n      return _getAuctionListing.apply(this, arguments);\n    }\n\n    return getAuctionListing;\n  }()\n  /**\r\n   * Helper method maps the auction listing to the direct listing interface.\r\n   *\r\n   * @internal\r\n   * @param listing - The listing to map, as returned from the contract.\r\n   * @returns - The mapped interface.\r\n   */\n  ;\n\n  _proto.mapDirectListing = /*#__PURE__*/function () {\n    var _mapDirectListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(listing) {\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.t0 = listing.assetContract;\n              _context10.t1 = listing.buyoutPricePerToken;\n              _context10.t2 = listing.currency;\n              _context10.next = 5;\n              return getCurrencyValue(this.providerOrSigner, listing.currency, listing.buyoutPricePerToken);\n\n            case 5:\n              _context10.t3 = _context10.sent;\n              _context10.t4 = listing.listingId.toString();\n              _context10.t5 = listing.tokenId;\n              _context10.t6 = listing.quantity;\n              _context10.t7 = listing.startTime;\n              _context10.next = 12;\n              return getTokenMetadataUsingStorage(listing.assetContract, this.providerOrSigner, listing.tokenId.toString(), this.sdk.getStorage());\n\n            case 12:\n              _context10.t8 = _context10.sent;\n              _context10.t9 = listing.endTime;\n              _context10.t10 = listing.tokenOwner;\n              _context10.t11 = ListingType.Direct;\n              return _context10.abrupt(\"return\", {\n                assetContractAddress: _context10.t0,\n                buyoutPrice: _context10.t1,\n                currencyContractAddress: _context10.t2,\n                buyoutCurrencyValuePerToken: _context10.t3,\n                id: _context10.t4,\n                tokenId: _context10.t5,\n                quantity: _context10.t6,\n                startTimeInSeconds: _context10.t7,\n                asset: _context10.t8,\n                secondsUntilEnd: _context10.t9,\n                sellerAddress: _context10.t10,\n                type: _context10.t11\n              });\n\n            case 17:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function mapDirectListing(_x14) {\n      return _mapDirectListing.apply(this, arguments);\n    }\n\n    return mapDirectListing;\n  }()\n  /**\r\n   * Helper method maps the auction listing to the auction listing interface.\r\n   *\r\n   * @internal\r\n   * @param listing - The listing to map, as returned from the contract.\r\n   * @returns - The mapped interface.\r\n   */\n  ;\n\n  _proto.mapAuctionListing = /*#__PURE__*/function () {\n    var _mapAuctionListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(listing) {\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.t0 = listing.assetContract;\n              _context11.t1 = listing.buyoutPricePerToken;\n              _context11.t2 = listing.currency;\n              _context11.next = 5;\n              return getCurrencyValue(this.providerOrSigner, listing.currency, listing.buyoutPricePerToken);\n\n            case 5:\n              _context11.t3 = _context11.sent;\n              _context11.t4 = listing.listingId.toString();\n              _context11.t5 = listing.tokenId;\n              _context11.t6 = listing.quantity;\n              _context11.t7 = listing.startTime;\n              _context11.next = 12;\n              return getTokenMetadataUsingStorage(listing.assetContract, this.providerOrSigner, listing.tokenId.toString(), this.sdk.getStorage());\n\n            case 12:\n              _context11.t8 = _context11.sent;\n              _context11.next = 15;\n              return getCurrencyValue(this.providerOrSigner, listing.currency, listing.reservePricePerToken);\n\n            case 15:\n              _context11.t9 = _context11.sent;\n              _context11.t10 = listing.reservePricePerToken;\n              _context11.t11 = listing.endTime;\n              _context11.t12 = listing.tokenOwner;\n              _context11.t13 = ListingType.Auction;\n              return _context11.abrupt(\"return\", {\n                assetContractAddress: _context11.t0,\n                buyoutPrice: _context11.t1,\n                currencyContractAddress: _context11.t2,\n                buyoutCurrencyValuePerToken: _context11.t3,\n                id: _context11.t4,\n                tokenId: _context11.t5,\n                quantity: _context11.t6,\n                startTimeInEpochSeconds: _context11.t7,\n                asset: _context11.t8,\n                reservePriceCurrencyValuePerToken: _context11.t9,\n                reservePrice: _context11.t10,\n                endTimeInEpochSeconds: _context11.t11,\n                sellerAddress: _context11.t12,\n                type: _context11.t13\n              });\n\n            case 21:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function mapAuctionListing(_x15) {\n      return _mapAuctionListing.apply(this, arguments);\n    }\n\n    return mapAuctionListing;\n  }();\n\n  _proto.handleTokenApproval = /*#__PURE__*/function () {\n    var _handleTokenApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(assetContract, tokenId, from) {\n      var erc165, isERC721, asset, approved, isTokenApproved, _asset, _approved;\n\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              erc165 = ERC165__factory.connect(assetContract, this.providerOrSigner); // check for token approval\n\n              _context12.next = 3;\n              return erc165.supportsInterface(InterfaceId_IERC721);\n\n            case 3:\n              isERC721 = _context12.sent;\n\n              if (!isERC721) {\n                _context12.next = 20;\n                break;\n              }\n\n              asset = ERC721__factory.connect(assetContract, this.providerOrSigner);\n              _context12.next = 8;\n              return asset.isApprovedForAll(from, this.address);\n\n            case 8:\n              approved = _context12.sent;\n\n              if (approved) {\n                _context12.next = 18;\n                break;\n              }\n\n              _context12.next = 12;\n              return asset.getApproved(tokenId);\n\n            case 12:\n              _context12.t0 = _context12.sent.toLowerCase();\n              _context12.t1 = this.address.toLowerCase();\n              isTokenApproved = _context12.t0 === _context12.t1;\n\n              if (isTokenApproved) {\n                _context12.next = 18;\n                break;\n              }\n\n              _context12.next = 18;\n              return this.sendContractTransaction(asset, \"setApprovalForAll\", [this.address, true]);\n\n            case 18:\n              _context12.next = 27;\n              break;\n\n            case 20:\n              _asset = ERC1155__factory.connect(assetContract, this.providerOrSigner);\n              _context12.next = 23;\n              return _asset.isApprovedForAll(from, this.address);\n\n            case 23:\n              _approved = _context12.sent;\n\n              if (_approved) {\n                _context12.next = 27;\n                break;\n              }\n\n              _context12.next = 27;\n              return this.sendContractTransaction(_asset, \"setApprovalForAll\", [this.address, true]);\n\n            case 27:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function handleTokenApproval(_x16, _x17, _x18) {\n      return _handleTokenApproval.apply(this, arguments);\n    }\n\n    return handleTokenApproval;\n  }()\n  /**\r\n   * This method checks if the given token is approved for the marketplace module.\r\n   * This is particularly useful for direct listings where the token\r\n   * being listed may be moved before the listing is actually closed.\r\n   *\r\n   * TODO: Ask Jake/Krishang: do we need to also check the owners balance of the token,\r\n   * based on the listing quantity? I.e. query the balance of the tokenId, and check if\r\n   * the seller holds enough of the token\r\n   *\r\n   * @internal\r\n   * @param assetContract - The address of the asset contract.\r\n   * @param tokenId - The token id of the token.\r\n   * @param from - The address of the account that owns the token.\r\n   * @returns - True if the marketplace is approved on the token, false otherwise.\r\n   */\n  ;\n\n  _proto.isTokenApprovedForMarketplace = /*#__PURE__*/function () {\n    var _isTokenApprovedForMarketplace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(assetContract, tokenId, from) {\n      var erc165, isERC721, asset, approved, _asset2;\n\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.prev = 0;\n              erc165 = ERC165__factory.connect(assetContract, this.providerOrSigner); // check for token approval\n\n              _context13.next = 4;\n              return erc165.supportsInterface(InterfaceId_IERC721);\n\n            case 4:\n              isERC721 = _context13.sent;\n\n              if (!isERC721) {\n                _context13.next = 19;\n                break;\n              }\n\n              asset = ERC721__factory.connect(assetContract, this.providerOrSigner);\n              _context13.next = 9;\n              return asset.isApprovedForAll(from, this.address);\n\n            case 9:\n              approved = _context13.sent;\n\n              if (!approved) {\n                _context13.next = 12;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", true);\n\n            case 12:\n              _context13.next = 14;\n              return asset.getApproved(tokenId);\n\n            case 14:\n              _context13.t0 = _context13.sent.toLowerCase();\n              _context13.t1 = this.address.toLowerCase();\n              return _context13.abrupt(\"return\", _context13.t0 === _context13.t1);\n\n            case 19:\n              _asset2 = ERC1155__factory.connect(assetContract, this.providerOrSigner);\n              _context13.next = 22;\n              return _asset2.isApprovedForAll(from, this.address);\n\n            case 22:\n              return _context13.abrupt(\"return\", _context13.sent);\n\n            case 23:\n              _context13.next = 29;\n              break;\n\n            case 25:\n              _context13.prev = 25;\n              _context13.t2 = _context13[\"catch\"](0);\n              console.error(\"Failed to check if token is approved\", _context13.t2);\n              return _context13.abrupt(\"return\", false);\n\n            case 29:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this, [[0, 25]]);\n    }));\n\n    function isTokenApprovedForMarketplace(_x19, _x20, _x21) {\n      return _isTokenApprovedForMarketplace.apply(this, arguments);\n    }\n\n    return isTokenApprovedForMarketplace;\n  }()\n  /**\r\n   * Use this method to check if a direct listing is still valid.\r\n   *\r\n   * Ways a direct listing can become invalid:\r\n   * 1. The asset holder transferred the asset to another wallet\r\n   * 2. The asset holder burned the asset\r\n   * 3. The asset holder removed the approval on the marketplace\r\n   *\r\n   * @internal\r\n   * @param listing - The listing to check.\r\n   * @returns - True if the listing is valid, false otherwise.\r\n   */\n  ;\n\n  _proto.isStillValidDirectListing = /*#__PURE__*/function () {\n    var _isStillValidDirectListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(listing, quantity) {\n      var approved, erc165, isERC721, asset, tokenOwnerAddress, _asset3, balance;\n\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.isTokenApprovedForMarketplace(listing.assetContractAddress, listing.tokenId, listing.sellerAddress);\n\n            case 2:\n              approved = _context14.sent;\n\n              if (approved) {\n                _context14.next = 5;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", false);\n\n            case 5:\n              erc165 = ERC165__factory.connect(listing.assetContractAddress, this.providerOrSigner); // check for token approval\n\n              _context14.next = 8;\n              return erc165.supportsInterface(InterfaceId_IERC721);\n\n            case 8:\n              isERC721 = _context14.sent;\n\n              if (!isERC721) {\n                _context14.next = 17;\n                break;\n              }\n\n              asset = ERC721__factory.connect(listing.assetContractAddress, this.providerOrSigner); // burned token would fail on ownerOf cuz invalid token\n\n              _context14.next = 13;\n              return asset.ownerOf(listing.tokenId)[\"catch\"](function () {\n                return AddressZero;\n              });\n\n            case 13:\n              tokenOwnerAddress = _context14.sent;\n              return _context14.abrupt(\"return\", tokenOwnerAddress.toLowerCase() === listing.sellerAddress.toLowerCase());\n\n            case 17:\n              _asset3 = ERC1155__factory.connect(listing.assetContractAddress, this.providerOrSigner);\n              _context14.next = 20;\n              return _asset3.balanceOf(listing.sellerAddress, listing.tokenId);\n\n            case 20:\n              balance = _context14.sent;\n              return _context14.abrupt(\"return\", balance.gte(quantity || listing.quantity));\n\n            case 22:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function isStillValidDirectListing(_x22, _x23) {\n      return _isStillValidDirectListing.apply(this, arguments);\n    }\n\n    return isStillValidDirectListing;\n  }() // TODO: Complete method implementation with subgraph\n  // /**\n  //  * @beta - This method is not yet complete.\n  //  *\n  //  * @param listingId\n  //  * @returns\n  //  */\n  // public async getActiveOffers(listingId: BigNumberish): Promise<Offer[]> {\n  //   const listing = await this.validateDirectListing(BigNumber.from(listingId));\n  //   const offers = await this.readOnlyContract.offers(listing.id, \"\");\n  //   return await Promise.all(\n  //     offers.map(async (offer: any) => {\n  //       return await this.mapOffer(BigNumber.from(listingId), offer);\n  //     }),\n  //   );\n  // }\n\n  /**\r\n   * Used to verify fields in new listing.\r\n   * @internal\r\n   */\n  ;\n\n  _proto.validateNewListingParam = function validateNewListingParam(param) {\n    !(param.assetContractAddress !== undefined && param.assetContractAddress !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Asset contract address is required\") : invariant(false) : void 0;\n    !(param.buyoutPricePerToken !== undefined && param.buyoutPricePerToken !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Buyout price is required\") : invariant(false) : void 0;\n    !(param.listingDurationInSeconds !== undefined && param.listingDurationInSeconds !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Listing duration is required\") : invariant(false) : void 0;\n    !(param.startTimeInSeconds !== undefined && param.startTimeInSeconds !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Start time is required\") : invariant(false) : void 0;\n    !(param.tokenId !== undefined && param.tokenId !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Token ID is required\") : invariant(false) : void 0;\n    !(param.quantity !== undefined && param.quantity !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Quantity is required\") : invariant(false) : void 0;\n\n    switch (param.type) {\n      case \"NewAuctionListing\":\n        {\n          !(param.reservePricePerToken !== undefined && param.reservePricePerToken !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Reserve price is required\") : invariant(false) : void 0;\n        }\n    }\n  }\n  /**\r\n   * Throws error if listing could not be found\r\n   *\r\n   * @param listingId - Listing to check for\r\n   */\n  ;\n\n  _proto.validateDirectListing = /*#__PURE__*/function () {\n    var _validateDirectListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(listingId) {\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.prev = 0;\n              _context15.next = 3;\n              return this.getDirectListing(listingId);\n\n            case 3:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 6:\n              _context15.prev = 6;\n              _context15.t0 = _context15[\"catch\"](0);\n              console.error(\"Error getting the listing with id \" + listingId);\n              throw _context15.t0;\n\n            case 10:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this, [[0, 6]]);\n    }));\n\n    function validateDirectListing(_x24) {\n      return _validateDirectListing.apply(this, arguments);\n    }\n\n    return validateDirectListing;\n  }()\n  /**\r\n   * Throws error if listing could not be found\r\n   *\r\n   * @param listingId - Listing to check for\r\n   */\n  ;\n\n  _proto.validateAuctionListing = /*#__PURE__*/function () {\n    var _validateAuctionListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(listingId) {\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.prev = 0;\n              _context16.next = 3;\n              return this.getAuctionListing(listingId);\n\n            case 3:\n              return _context16.abrupt(\"return\", _context16.sent);\n\n            case 6:\n              _context16.prev = 6;\n              _context16.t0 = _context16[\"catch\"](0);\n              console.error(\"Error getting the listing with id \" + listingId);\n              throw _context16.t0;\n\n            case 10:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this, [[0, 6]]);\n    }));\n\n    function validateAuctionListing(_x25) {\n      return _validateAuctionListing.apply(this, arguments);\n    }\n\n    return validateAuctionListing;\n  }()\n  /**\r\n   * Maps a contract offer to the strict interface\r\n   *\r\n   * @internal\r\n   * @param offer\r\n   * @returns - An `Offer` object\r\n   */\n  ;\n\n  _proto.mapOffer = /*#__PURE__*/function () {\n    var _mapOffer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(listingId, offer) {\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.t0 = offer.quantityDesired;\n              _context17.t1 = offer.pricePerToken;\n              _context17.t2 = offer.currency;\n              _context17.t3 = offer.offeror;\n              _context17.t4 = offer.quantityWanted;\n              _context17.next = 7;\n              return getCurrencyValue(this.providerOrSigner, offer.currency, offer.quantityWanted.mul(offer.pricePerToken));\n\n            case 7:\n              _context17.t5 = _context17.sent;\n              _context17.t6 = listingId;\n              return _context17.abrupt(\"return\", {\n                quantity: _context17.t0,\n                pricePerToken: _context17.t1,\n                currencyContractAddress: _context17.t2,\n                buyerAddress: _context17.t3,\n                quantityDesired: _context17.t4,\n                currencyValue: _context17.t5,\n                listingId: _context17.t6\n              });\n\n            case 10:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function mapOffer(_x26, _x27) {\n      return _mapOffer.apply(this, arguments);\n    }\n\n    return mapOffer;\n  }();\n\n  _proto.getActiveOffer = /*#__PURE__*/function () {\n    var _getActiveOffer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(listingId, address) {\n      var offers;\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              this.validateDirectListing(BigNumber.from(listingId));\n              !isAddress(address) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Address must be a valid address\") : invariant(false) : void 0;\n              _context18.next = 4;\n              return this.readOnlyContract.offers(listingId, address);\n\n            case 4:\n              offers = _context18.sent;\n\n              if (!(offers.offeror === AddressZero)) {\n                _context18.next = 7;\n                break;\n              }\n\n              return _context18.abrupt(\"return\", undefined);\n\n            case 7:\n              _context18.next = 9;\n              return this.mapOffer(BigNumber.from(listingId), offers);\n\n            case 9:\n              return _context18.abrupt(\"return\", _context18.sent);\n\n            case 10:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function getActiveOffer(_x28, _x29) {\n      return _getActiveOffer.apply(this, arguments);\n    }\n\n    return getActiveOffer;\n  }()\n  /**\r\n   * Get Highest Bid\r\n   *\r\n   * @remarks Get the current highest bid of an active auction.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the auction that closed\r\n   * const listingId = 0;\r\n   *\r\n   * module\r\n   *   .getWinningBid(listingId)\r\n   *   .then((offer) => console.log(offer))\r\n   *   .catch((err) => console.error(err));\r\n   * ```\r\n   */\n  ;\n\n  _proto.getWinningBid = /*#__PURE__*/function () {\n    var _getWinningBid = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(listingId) {\n      var offers;\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              this.validateAuctionListing(BigNumber.from(listingId));\n              _context19.next = 3;\n              return this.readOnlyContract.winningBid(listingId);\n\n            case 3:\n              offers = _context19.sent;\n\n              if (!(offers.offeror === AddressZero)) {\n                _context19.next = 6;\n                break;\n              }\n\n              return _context19.abrupt(\"return\", undefined);\n\n            case 6:\n              _context19.next = 8;\n              return this.mapOffer(BigNumber.from(listingId), offers);\n\n            case 8:\n              return _context19.abrupt(\"return\", _context19.sent);\n\n            case 9:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function getWinningBid(_x30) {\n      return _getWinningBid.apply(this, arguments);\n    }\n\n    return getWinningBid;\n  }();\n\n  _proto.getBidBufferBps = /*#__PURE__*/function () {\n    var _getBidBufferBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20() {\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              return _context20.abrupt(\"return\", this.readOnlyContract.bidBufferBps());\n\n            case 1:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function getBidBufferBps() {\n      return _getBidBufferBps.apply(this, arguments);\n    }\n\n    return getBidBufferBps;\n  }();\n\n  _proto.getTimeBufferInSeconds = /*#__PURE__*/function () {\n    var _getTimeBufferInSeconds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21() {\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.readOnlyContract.timeBuffer();\n\n            case 2:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 3:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function getTimeBufferInSeconds() {\n      return _getTimeBufferInSeconds.apply(this, arguments);\n    }\n\n    return getTimeBufferInSeconds;\n  }();\n\n  _proto.acceptDirectListingOffer = /*#__PURE__*/function () {\n    var _acceptDirectListingOffer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(listingId, addressOfOfferor) {\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              /**\r\n               * TODO:\r\n               * - Provide better error handling if offer is too lower.\r\n               */\n              this.validateDirectListing(BigNumber.from(listingId));\n              _context22.next = 3;\n              return this.sendTransaction(\"acceptOffer\", [listingId, addressOfOfferor]);\n\n            case 3:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function acceptDirectListingOffer(_x31, _x32) {\n      return _acceptDirectListingOffer.apply(this, arguments);\n    }\n\n    return acceptDirectListingOffer;\n  }()\n  /**\r\n   * Buyout Auction\r\n   *\r\n   * @remarks Buy a specific direct listing from the marketplace.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the asset you want to buy\r\n   * const listingId = 0;\r\n   *\r\n   * await module.buyoutAuctionListing(listingId);\r\n   * ```\r\n   */\n  ;\n\n  _proto.buyoutAuctionListing = /*#__PURE__*/function () {\n    var _buyoutAuctionListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(listingId) {\n      var listing;\n      return runtime_1.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return this.validateAuctionListing(BigNumber.from(listingId));\n\n            case 2:\n              listing = _context23.sent;\n              _context23.next = 5;\n              return this.makeAuctionListingBid({\n                listingId: listingId,\n                pricePerToken: listing.buyoutPrice\n              });\n\n            case 5:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function buyoutAuctionListing(_x33) {\n      return _buyoutAuctionListing.apply(this, arguments);\n    }\n\n    return buyoutAuctionListing;\n  }()\n  /**\r\n   * Buy Listing\r\n   *\r\n   * @remarks Buy a specific direct listing from the marketplace.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the asset you want to buy\r\n   * const listingId = 0;\r\n   * // Quantity of the asset you want to buy\r\n   * const quantityDesired = 1;\r\n   *\r\n   * await module.buyoutDirectListing({ listingId, quantityDesired });\r\n   * ```\r\n   */\n  ;\n\n  _proto.buyoutDirectListing = /*#__PURE__*/function () {\n    var _buyoutDirectListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(_buyout) {\n      var listing, valid, quantity, value, overrides;\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return this.validateDirectListing(BigNumber.from(_buyout.listingId));\n\n            case 2:\n              listing = _context24.sent;\n              _context24.next = 5;\n              return this.isStillValidDirectListing(listing, _buyout.quantityDesired);\n\n            case 5:\n              valid = _context24.sent;\n\n              if (valid) {\n                _context24.next = 8;\n                break;\n              }\n\n              throw new Error(\"The asset on this listing has been moved from the listers wallet, this listing is now invalid\");\n\n            case 8:\n              quantity = BigNumber.from(_buyout.quantityDesired);\n              value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n              _context24.next = 12;\n              return this.getCallOverrides();\n\n            case 12:\n              _context24.t0 = _context24.sent;\n\n              if (_context24.t0) {\n                _context24.next = 15;\n                break;\n              }\n\n              _context24.t0 = {};\n\n            case 15:\n              overrides = _context24.t0;\n              _context24.next = 18;\n              return this.setAllowance(value, listing.currencyContractAddress, overrides);\n\n            case 18:\n              _context24.next = 20;\n              return this.isNewBuy();\n\n            case 20:\n              if (!_context24.sent) {\n                _context24.next = 25;\n                break;\n              }\n\n              _context24.next = 23;\n              return this.sendTransaction(\"buy\", [_buyout.listingId, quantity, listing.currencyContractAddress, value], overrides);\n\n            case 23:\n              _context24.next = 27;\n              break;\n\n            case 25:\n              _context24.next = 27;\n              return this.sendContractTransaction(new ethers.Contract(this.address, [{\n                inputs: [{\n                  internalType: \"uint256\",\n                  name: \"_listingId\",\n                  type: \"uint256\"\n                }, {\n                  internalType: \"uint256\",\n                  name: \"_quantityToBuy\",\n                  type: \"uint256\"\n                }],\n                name: \"buy\",\n                outputs: [],\n                stateMutability: \"payable\",\n                type: \"function\"\n              }], this.providerOrSigner), \"buy\", [_buyout.listingId, quantity], overrides);\n\n            case 27:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this);\n    }));\n\n    function buyoutDirectListing(_x34) {\n      return _buyoutDirectListing.apply(this, arguments);\n    }\n\n    return buyoutDirectListing;\n  }() // TODO: Complete method implementation with subgraph\n  // /**\n  //  *\n  //  * @beta - This method is not yet ready for production use\n  //  *\n  //  * @param _listingId - The listing ID to get active bids for\n  //  */\n  // public async getActiveBids(_listingId: BigNumberish): Promise<Offer[]> {\n  //   throw new Error(\"Method not implemented.\");\n  // }\n  ;\n\n  _proto.updateDirectListing = /*#__PURE__*/function () {\n    var _updateDirectListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(listing) {\n      return runtime_1.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return this.sendTransaction(\"updateListing\", [listing.id, listing.quantity, // eslint-disable-next-line line-comment-position\n              listing.buyoutPrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInSeconds, listing.secondsUntilEnd]);\n\n            case 2:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25, this);\n    }));\n\n    function updateDirectListing(_x35) {\n      return _updateDirectListing.apply(this, arguments);\n    }\n\n    return updateDirectListing;\n  }();\n\n  _proto.updateAuctionListing = /*#__PURE__*/function () {\n    var _updateAuctionListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(listing) {\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return this.sendTransaction(\"updateListing\", [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds]);\n\n            case 2:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26, this);\n    }));\n\n    function updateAuctionListing(_x36) {\n      return _updateAuctionListing.apply(this, arguments);\n    }\n\n    return updateAuctionListing;\n  }()\n  /**\r\n   * Cancel Direct Listing\r\n   *\r\n   * @remarks Cancel a direct listing on the marketplace\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the direct listing you want to cancel\r\n   * const listingId = \"0\"\r\n   *\r\n   * await module.cancelDirectListing(listingId);\r\n   * ```\r\n   */\n  ;\n\n  _proto.cancelDirectListing = /*#__PURE__*/function () {\n    var _cancelDirectListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(listingId) {\n      var listing;\n      return runtime_1.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              _context27.next = 2;\n              return this.validateDirectListing(BigNumber.from(listingId));\n\n            case 2:\n              listing = _context27.sent;\n              listing.quantity = 0;\n              _context27.next = 6;\n              return this.updateDirectListing(listing);\n\n            case 6:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27, this);\n    }));\n\n    function cancelDirectListing(_x37) {\n      return _cancelDirectListing.apply(this, arguments);\n    }\n\n    return cancelDirectListing;\n  }()\n  /**\r\n   * Cancel Auction Listing\r\n   *\r\n   * @remarks Cancel an auction listing on the marketplace\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the auction listing you want to cancel\r\n   * const listingId = \"0\"\r\n   *\r\n   * await module.cancelAuctionListing(listingId);\r\n   * ```\r\n   */\n  ;\n\n  _proto.cancelAuctionListing = /*#__PURE__*/function () {\n    var _cancelAuctionListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(listingId) {\n      var listing, now, startTime, offers;\n      return runtime_1.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return this.validateAuctionListing(BigNumber.from(listingId));\n\n            case 2:\n              listing = _context28.sent;\n              now = BigNumber.from(Math.floor(Date.now() / 1000));\n              startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n              _context28.next = 7;\n              return this.readOnlyContract.winningBid(listingId);\n\n            case 7:\n              offers = _context28.sent;\n\n              if (!(now.gt(startTime) && offers.offeror !== AddressZero)) {\n                _context28.next = 10;\n                break;\n              }\n\n              throw new AuctionAlreadyStartedError(listingId.toString());\n\n            case 10:\n              _context28.t0 = this;\n              _context28.t1 = BigNumber.from(listingId);\n              _context28.next = 14;\n              return this.getSignerAddress();\n\n            case 14:\n              _context28.t2 = _context28.sent;\n              _context28.t3 = [_context28.t1, _context28.t2];\n              _context28.next = 18;\n              return _context28.t0.sendTransaction.call(_context28.t0, \"closeAuction\", _context28.t3);\n\n            case 18:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28, this);\n    }));\n\n    function cancelAuctionListing(_x38) {\n      return _cancelAuctionListing.apply(this, arguments);\n    }\n\n    return cancelAuctionListing;\n  }();\n\n  _proto.closeAuctionListing = /*#__PURE__*/function () {\n    var _closeAuctionListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(listingId, closeFor) {\n      var listing;\n      return runtime_1.wrap(function _callee29$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              if (closeFor) {\n                _context29.next = 4;\n                break;\n              }\n\n              _context29.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              closeFor = _context29.sent;\n\n            case 4:\n              _context29.next = 6;\n              return this.validateAuctionListing(BigNumber.from(listingId));\n\n            case 6:\n              listing = _context29.sent;\n              _context29.prev = 7;\n              _context29.next = 10;\n              return this.sendTransaction(\"closeAuction\", [BigNumber.from(listingId), closeFor]);\n\n            case 10:\n              _context29.next = 19;\n              break;\n\n            case 12:\n              _context29.prev = 12;\n              _context29.t0 = _context29[\"catch\"](7);\n\n              if (!_context29.t0.message.includes(\"cannot close auction before it has ended\")) {\n                _context29.next = 18;\n                break;\n              }\n\n              throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n\n            case 18:\n              throw _context29.t0;\n\n            case 19:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee29, this, [[7, 12]]);\n    }));\n\n    function closeAuctionListing(_x39, _x40) {\n      return _closeAuctionListing.apply(this, arguments);\n    }\n\n    return closeAuctionListing;\n  }();\n\n  _proto.setBidBufferBps = /*#__PURE__*/function () {\n    var _setBidBufferBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(buffer) {\n      var timeBuffer;\n      return runtime_1.wrap(function _callee30$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.t0 = this;\n              _context30.t1 = [\"admin\"];\n              _context30.next = 4;\n              return this.getSignerAddress();\n\n            case 4:\n              _context30.t2 = _context30.sent;\n              _context30.next = 7;\n              return _context30.t0.onlyRoles.call(_context30.t0, _context30.t1, _context30.t2);\n\n            case 7:\n              _context30.next = 9;\n              return this.getTimeBufferInSeconds();\n\n            case 9:\n              timeBuffer = _context30.sent;\n              _context30.next = 12;\n              return this.sendTransaction(\"setAuctionBuffers\", [timeBuffer, BigNumber.from(buffer)]);\n\n            case 12:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, _callee30, this);\n    }));\n\n    function setBidBufferBps(_x41) {\n      return _setBidBufferBps.apply(this, arguments);\n    }\n\n    return setBidBufferBps;\n  }();\n\n  _proto.setTimeBufferInSeconds = /*#__PURE__*/function () {\n    var _setTimeBufferInSeconds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(buffer) {\n      var bidBuffer;\n      return runtime_1.wrap(function _callee31$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              _context31.t0 = this;\n              _context31.t1 = [\"admin\"];\n              _context31.next = 4;\n              return this.getSignerAddress();\n\n            case 4:\n              _context31.t2 = _context31.sent;\n              _context31.next = 7;\n              return _context31.t0.onlyRoles.call(_context31.t0, _context31.t1, _context31.t2);\n\n            case 7:\n              _context31.next = 9;\n              return this.getBidBufferBps();\n\n            case 9:\n              bidBuffer = _context31.sent;\n              _context31.next = 12;\n              return this.sendTransaction(\"setAuctionBuffers\", [BigNumber.from(buffer), bidBuffer]);\n\n            case 12:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, _callee31, this);\n    }));\n\n    function setTimeBufferInSeconds(_x42) {\n      return _setTimeBufferInSeconds.apply(this, arguments);\n    }\n\n    return setTimeBufferInSeconds;\n  }();\n\n  _proto.buyoutListing = /*#__PURE__*/function () {\n    var _buyoutListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(listingId, quantityDesired) {\n      var listing;\n      return runtime_1.wrap(function _callee32$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return this.readOnlyContract.listings(listingId);\n\n            case 2:\n              listing = _context32.sent;\n\n              if (!(listing.listingId.toString() !== listingId.toString())) {\n                _context32.next = 5;\n                break;\n              }\n\n              throw new ListingNotFoundError(this.address, listingId.toString());\n\n            case 5:\n              _context32.t0 = listing.listingType;\n              _context32.next = _context32.t0 === ListingType.Direct ? 8 : _context32.t0 === ListingType.Auction ? 12 : 15;\n              break;\n\n            case 8:\n              !(quantityDesired !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"quantityDesired is required when buying out a direct listing\") : invariant(false) : void 0;\n              _context32.next = 11;\n              return this.buyoutDirectListing({\n                listingId: listingId,\n                quantityDesired: quantityDesired\n              });\n\n            case 11:\n              return _context32.abrupt(\"return\", _context32.sent);\n\n            case 12:\n              _context32.next = 14;\n              return this.buyoutAuctionListing(listingId);\n\n            case 14:\n              return _context32.abrupt(\"return\", _context32.sent);\n\n            case 15:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, _callee32, this);\n    }));\n\n    function buyoutListing(_x43, _x44) {\n      return _buyoutListing.apply(this, arguments);\n    }\n\n    return buyoutListing;\n  }();\n\n  _proto.getListing = /*#__PURE__*/function () {\n    var _getListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(listingId) {\n      var listing;\n      return runtime_1.wrap(function _callee33$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return this.readOnlyContract.listings(listingId);\n\n            case 2:\n              listing = _context33.sent;\n\n              if (!(listing.listingId.toString() !== listingId.toString())) {\n                _context33.next = 5;\n                break;\n              }\n\n              throw new ListingNotFoundError(this.address, listingId.toString());\n\n            case 5:\n              _context33.t0 = listing.listingType;\n              _context33.next = _context33.t0 === ListingType.Auction ? 8 : _context33.t0 === ListingType.Direct ? 11 : 14;\n              break;\n\n            case 8:\n              _context33.next = 10;\n              return this.mapAuctionListing(listing);\n\n            case 10:\n              return _context33.abrupt(\"return\", _context33.sent);\n\n            case 11:\n              _context33.next = 13;\n              return this.mapDirectListing(listing);\n\n            case 13:\n              return _context33.abrupt(\"return\", _context33.sent);\n\n            case 14:\n              throw new Error(\"Unknown listing type: \" + listing.listingType);\n\n            case 15:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, _callee33, this);\n    }));\n\n    function getListing(_x45) {\n      return _getListing.apply(this, arguments);\n    }\n\n    return getListing;\n  }();\n\n  _proto.getAllListings = /*#__PURE__*/function () {\n    var _getAllListings = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34(filter) {\n      var rawListings, start;\n      return runtime_1.wrap(function _callee34$(_context34) {\n        while (1) {\n          switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.next = 2;\n              return this.getAllListingsNoFilter();\n\n            case 2:\n              rawListings = _context34.sent;\n\n              if (filter) {\n                if (filter.seller) {\n                  rawListings = rawListings.filter(function (seller) {\n                    var _filter$seller;\n\n                    return seller.sellerAddress.toString().toLowerCase() === (filter == null ? void 0 : (_filter$seller = filter.seller) == null ? void 0 : _filter$seller.toString().toLowerCase());\n                  });\n                }\n\n                if (filter.tokenContract) {\n                  if (!filter.tokenId) {\n                    rawListings = rawListings.filter(function (tokenContract) {\n                      var _filter$tokenContract;\n\n                      return tokenContract.assetContractAddress.toString().toLowerCase() === (filter == null ? void 0 : (_filter$tokenContract = filter.tokenContract) == null ? void 0 : _filter$tokenContract.toString().toLowerCase());\n                    });\n                  } else {\n                    rawListings = rawListings.filter(function (tokenContract) {\n                      var _filter$tokenContract2, _filter$tokenId;\n\n                      return tokenContract.assetContractAddress.toString().toLowerCase() === (filter == null ? void 0 : (_filter$tokenContract2 = filter.tokenContract) == null ? void 0 : _filter$tokenContract2.toString().toLowerCase()) && tokenContract.tokenId.toString() === (filter == null ? void 0 : (_filter$tokenId = filter.tokenId) == null ? void 0 : _filter$tokenId.toString());\n                    });\n                  }\n                }\n\n                if (filter.start !== undefined) {\n                  start = filter.start;\n                  rawListings = rawListings.filter(function (_, index) {\n                    return index >= start;\n                  });\n\n                  if (filter.count !== undefined && rawListings.length > filter.count) {\n                    rawListings = rawListings.slice(0, filter.count);\n                  }\n                }\n              }\n\n              return _context34.abrupt(\"return\", rawListings.filter(function (l) {\n                return l !== undefined;\n              }));\n\n            case 5:\n            case \"end\":\n              return _context34.stop();\n          }\n        }\n      }, _callee34, this);\n    }));\n\n    function getAllListings(_x46) {\n      return _getAllListings.apply(this, arguments);\n    }\n\n    return getAllListings;\n  }();\n\n  _proto.getAllListingsNoFilter = /*#__PURE__*/function () {\n    var _getAllListingsNoFilter = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee36() {\n      var _this2 = this;\n\n      var listings;\n      return runtime_1.wrap(function _callee36$(_context36) {\n        while (1) {\n          switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.t0 = Promise;\n              _context36.t1 = Array;\n              _context36.t2 = Array;\n              _context36.next = 5;\n              return this.readOnlyContract.totalListings();\n\n            case 5:\n              _context36.t3 = _context36.sent.toNumber();\n              _context36.t4 = (0, _context36.t2)(_context36.t3).keys();\n              _context36.t5 = _context36.t1.from.call(_context36.t1, _context36.t4).map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee35(i) {\n                  var listing, valid;\n                  return runtime_1.wrap(function _callee35$(_context35) {\n                    while (1) {\n                      switch (_context35.prev = _context35.next) {\n                        case 0:\n                          _context35.prev = 0;\n                          _context35.next = 3;\n                          return _this2.getListing(i);\n\n                        case 3:\n                          listing = _context35.sent;\n                          _context35.next = 9;\n                          break;\n\n                        case 6:\n                          _context35.prev = 6;\n                          _context35.t0 = _context35[\"catch\"](0);\n                          return _context35.abrupt(\"return\", undefined);\n\n                        case 9:\n                          if (!(listing.type === ListingType.Auction)) {\n                            _context35.next = 11;\n                            break;\n                          }\n\n                          return _context35.abrupt(\"return\", listing);\n\n                        case 11:\n                          _context35.next = 13;\n                          return _this2.isStillValidDirectListing(listing);\n\n                        case 13:\n                          valid = _context35.sent;\n\n                          if (valid) {\n                            _context35.next = 16;\n                            break;\n                          }\n\n                          return _context35.abrupt(\"return\", undefined);\n\n                        case 16:\n                          return _context35.abrupt(\"return\", listing);\n\n                        case 17:\n                        case \"end\":\n                          return _context35.stop();\n                      }\n                    }\n                  }, _callee35, null, [[0, 6]]);\n                }));\n\n                return function (_x47) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n              _context36.next = 10;\n              return _context36.t0.all.call(_context36.t0, _context36.t5);\n\n            case 10:\n              listings = _context36.sent;\n              return _context36.abrupt(\"return\", listings.filter(function (l) {\n                return l !== undefined;\n              }));\n\n            case 12:\n            case \"end\":\n              return _context36.stop();\n          }\n        }\n      }, _callee36, this);\n    }));\n\n    function getAllListingsNoFilter() {\n      return _getAllListingsNoFilter.apply(this, arguments);\n    }\n\n    return getAllListingsNoFilter;\n  }();\n\n  _proto.isRestrictedListerRoleOnly = /*#__PURE__*/function () {\n    var _isRestrictedListerRoleOnly = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee37() {\n      return runtime_1.wrap(function _callee37$(_context37) {\n        while (1) {\n          switch (_context37.prev = _context37.next) {\n            case 0:\n              return _context37.abrupt(\"return\", this.readOnlyContract.restrictedListerRoleOnly());\n\n            case 1:\n            case \"end\":\n              return _context37.stop();\n          }\n        }\n      }, _callee37, this);\n    }));\n\n    function isRestrictedListerRoleOnly() {\n      return _isRestrictedListerRoleOnly.apply(this, arguments);\n    }\n\n    return isRestrictedListerRoleOnly;\n  }();\n\n  _proto.setRestrictedListerRoleOnly = /*#__PURE__*/function () {\n    var _setRestrictedListerRoleOnly = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee38(isRestricted) {\n      return runtime_1.wrap(function _callee38$(_context38) {\n        while (1) {\n          switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.next = 2;\n              return this.sendTransaction(\"setRestrictedListerRoleOnly\", [isRestricted]);\n\n            case 2:\n            case \"end\":\n              return _context38.stop();\n          }\n        }\n      }, _callee38, this);\n    }));\n\n    function setRestrictedListerRoleOnly(_x48) {\n      return _setRestrictedListerRoleOnly.apply(this, arguments);\n    }\n\n    return setRestrictedListerRoleOnly;\n  }();\n\n  _proto.allowListingFromSpecificAssetOnly = /*#__PURE__*/function () {\n    var _allowListingFromSpecificAssetOnly = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee39(contractAddress) {\n      var encoded, members;\n      return runtime_1.wrap(function _callee39$(_context39) {\n        while (1) {\n          switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return this.isV2();\n\n            case 2:\n              if (_context39.sent) {\n                _context39.next = 4;\n                break;\n              }\n\n              throw Error(\"Not supported in this version of the contract, please upgrade\");\n\n            case 4:\n              encoded = [];\n              _context39.next = 7;\n              return this.getRoleMembers(RolesMap.asset);\n\n            case 7:\n              members = _context39.sent;\n\n              if (AddressZero in members) {\n                encoded.push(this.contract[\"interface\"].encodeFunctionData(\"revokeRole\", [getRoleHash(RolesMap.asset), AddressZero]));\n              }\n\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"grantRole\", [getRoleHash(RolesMap.asset), contractAddress]));\n              _context39.next = 12;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 12:\n            case \"end\":\n              return _context39.stop();\n          }\n        }\n      }, _callee39, this);\n    }));\n\n    function allowListingFromSpecificAssetOnly(_x49) {\n      return _allowListingFromSpecificAssetOnly.apply(this, arguments);\n    }\n\n    return allowListingFromSpecificAssetOnly;\n  }();\n\n  _proto.allowListingFromAnyAsset = /*#__PURE__*/function () {\n    var _allowListingFromAnyAsset = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee40() {\n      var encoded, members, addr;\n      return runtime_1.wrap(function _callee40$(_context40) {\n        while (1) {\n          switch (_context40.prev = _context40.next) {\n            case 0:\n              _context40.next = 2;\n              return this.isV2();\n\n            case 2:\n              if (_context40.sent) {\n                _context40.next = 4;\n                break;\n              }\n\n              throw Error(\"Not supported in this version of the contract, please upgrade\");\n\n            case 4:\n              encoded = [];\n              _context40.next = 7;\n              return this.getRoleMembers(RolesMap.asset);\n\n            case 7:\n              members = _context40.sent;\n\n              for (addr in members) {\n                encoded.push(this.contract[\"interface\"].encodeFunctionData(\"revokeRole\", [getRoleHash(RolesMap.asset), addr]));\n              }\n\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"grantRole\", [getRoleHash(RolesMap.asset), AddressZero]));\n              _context40.next = 12;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 12:\n            case \"end\":\n              return _context40.stop();\n          }\n        }\n      }, _callee40, this);\n    }));\n\n    function allowListingFromAnyAsset() {\n      return _allowListingFromAnyAsset.apply(this, arguments);\n    }\n\n    return allowListingFromAnyAsset;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.isV2 = /*#__PURE__*/function () {\n    var _isV = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee41() {\n      var version;\n      return runtime_1.wrap(function _callee41$(_context41) {\n        while (1) {\n          switch (_context41.prev = _context41.next) {\n            case 0:\n              _context41.next = 2;\n              return this.readOnlyContract.VERSION();\n\n            case 2:\n              version = _context41.sent;\n              return _context41.abrupt(\"return\", version.toNumber() === 2);\n\n            case 4:\n            case \"end\":\n              return _context41.stop();\n          }\n        }\n      }, _callee41, this);\n    }));\n\n    function isV2() {\n      return _isV.apply(this, arguments);\n    }\n\n    return isV2;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.isNewBuy = /*#__PURE__*/function () {\n    var _isNewBuy = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee42() {\n      return runtime_1.wrap(function _callee42$(_context42) {\n        while (1) {\n          switch (_context42.prev = _context42.next) {\n            case 0:\n              _context42.next = 2;\n              return this.checkVersion();\n\n            case 2:\n              return _context42.abrupt(\"return\", this._isNewBuy);\n\n            case 3:\n            case \"end\":\n              return _context42.stop();\n          }\n        }\n      }, _callee42, this);\n    }));\n\n    function isNewBuy() {\n      return _isNewBuy.apply(this, arguments);\n    }\n\n    return isNewBuy;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.checkVersion = /*#__PURE__*/function () {\n    var _checkVersion = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee43() {\n      return runtime_1.wrap(function _callee43$(_context43) {\n        while (1) {\n          switch (_context43.prev = _context43.next) {\n            case 0:\n              if (!this._shouldCheckVersion) {\n                _context43.next = 11;\n                break;\n              }\n\n              _context43.prev = 1;\n              _context43.next = 4;\n              return this.readOnlyContract.VERSION();\n\n            case 4:\n              this._isNewBuy = true;\n              _context43.next = 10;\n              break;\n\n            case 7:\n              _context43.prev = 7;\n              _context43.t0 = _context43[\"catch\"](1);\n              this._isNewBuy = false;\n\n            case 10:\n              this._shouldCheckVersion = false;\n\n            case 11:\n            case \"end\":\n              return _context43.stop();\n          }\n        }\n      }, _callee43, this, [[1, 7]]);\n    }));\n\n    function checkVersion() {\n      return _checkVersion.apply(this, arguments);\n    }\n\n    return checkVersion;\n  }();\n\n  return MarketplaceModule;\n}(ModuleWithRoles);\n\nMarketplaceModule.moduleType = ModuleType.MARKETPLACE;\nMarketplaceModule.roles = [RolesMap.admin, RolesMap.lister, RolesMap.asset];\nvar MintRequest$1 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\n/**\r\n * Create a collection of one-of-one NFTs.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getNFTModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar NFTModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(NFTModule, _ModuleWithRoles);\n\n  function NFTModule() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _ModuleWithRoles.call.apply(_ModuleWithRoles, [this].concat(args)) || this;\n    _this._shouldCheckVersion = true;\n    _this._isV1 = false;\n    _this.v1Contract = void 0;\n    return _this;\n  }\n\n  var _proto = NFTModule.prototype;\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return NFTModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return SignatureMint721__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return NFTModule.moduleType;\n  };\n  /**\r\n   * Check if contract is v1 or v2. If the contract doesn't have nextTokenIdToMint = v1 contract.\r\n   */\n\n\n  _proto.isV1 = /*#__PURE__*/function () {\n    var _isV = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this._shouldCheckVersion) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.prev = 1;\n              _context.next = 4;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 4:\n              this._isV1 = false;\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              this._isV1 = true;\n              this.v1Contract = NFT__factory.connect(this.address, this.providerOrSigner);\n\n            case 11:\n              this._shouldCheckVersion = false;\n\n            case 12:\n              return _context.abrupt(\"return\", this._isV1);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[1, 7]]);\n    }));\n\n    function isV1() {\n      return _isV.apply(this, arguments);\n    }\n\n    return isV1;\n  }()\n  /**\r\n   * Fetches an NFT from storage with the resolved metadata.\r\n   *\r\n   * @param tokenId - The id of the token to fetch.\r\n   * @returns - The NFT metadata.\r\n   */\n  ;\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(tokenId) {\n      var storage, uri, metadata;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              storage = this.sdk.getStorage();\n              _context2.next = 3;\n              return this.readOnlyContract.tokenURI(tokenId);\n\n            case 3:\n              uri = _context2.sent;\n              _context2.t0 = JSON;\n              _context2.next = 7;\n              return storage.get(uri);\n\n            case 7:\n              _context2.t1 = _context2.sent;\n              metadata = _context2.t0.parse.call(_context2.t0, _context2.t1);\n              return _context2.abrupt(\"return\", _extends({}, metadata, {\n                id: tokenId,\n                uri: uri,\n                image: storage.resolveFullUrl(metadata.image)\n              }));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function get(_x) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * Get All NFTs\r\n   *\r\n   * @remarks Get all the data associated with every NFT in this module.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const nfts = await module.getAll();\r\n   * console.log(nfts);\r\n   * ```\r\n   *\r\n   * @returns The NFT metadata for all NFTs in the module.\r\n   */\n  ;\n\n  _proto.getAll = /*#__PURE__*/function () {\n    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {\n      var _this2 = this;\n\n      var maxId, _yield$this$v1Contrac, _this$v1Contract;\n\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.isV1();\n\n            case 2:\n              if (!_context3.sent) {\n                _context3.next = 14;\n                break;\n              }\n\n              _context3.next = 5;\n              return (_this$v1Contract = this.v1Contract) == null ? void 0 : _this$v1Contract.nextTokenId();\n\n            case 5:\n              _context3.t0 = _yield$this$v1Contrac = _context3.sent;\n\n              if (!(_context3.t0 == null)) {\n                _context3.next = 10;\n                break;\n              }\n\n              _context3.t1 = void 0;\n              _context3.next = 11;\n              break;\n\n            case 10:\n              _context3.t1 = _yield$this$v1Contrac.toNumber();\n\n            case 11:\n              maxId = _context3.t1;\n              _context3.next = 17;\n              break;\n\n            case 14:\n              _context3.next = 16;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 16:\n              maxId = _context3.sent.toNumber();\n\n            case 17:\n              _context3.next = 19;\n              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {\n                return _this2.get(i.toString());\n              }));\n\n            case 19:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getAll() {\n      return _getAll.apply(this, arguments);\n    }\n\n    return getAll;\n  }();\n\n  _proto.getWithOwner = /*#__PURE__*/function () {\n    var _getWithOwner = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(tokenId) {\n      var _yield$Promise$all, owner, metadata;\n\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return Promise.all([this.ownerOf(tokenId), this.get(tokenId)]);\n\n            case 2:\n              _yield$Promise$all = _context4.sent;\n              owner = _yield$Promise$all[0];\n              metadata = _yield$Promise$all[1];\n              return _context4.abrupt(\"return\", {\n                owner: owner,\n                metadata: metadata\n              });\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getWithOwner(_x2) {\n      return _getWithOwner.apply(this, arguments);\n    }\n\n    return getWithOwner;\n  }();\n\n  _proto.getAllWithOwner = /*#__PURE__*/function () {\n    var _getAllWithOwner = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {\n      var _this3 = this;\n\n      var maxId, _yield$this$v1Contrac2, _this$v1Contract2;\n\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.isV1();\n\n            case 2:\n              if (!_context5.sent) {\n                _context5.next = 14;\n                break;\n              }\n\n              _context5.next = 5;\n              return (_this$v1Contract2 = this.v1Contract) == null ? void 0 : _this$v1Contract2.nextTokenId();\n\n            case 5:\n              _context5.t0 = _yield$this$v1Contrac2 = _context5.sent;\n\n              if (!(_context5.t0 == null)) {\n                _context5.next = 10;\n                break;\n              }\n\n              _context5.t1 = void 0;\n              _context5.next = 11;\n              break;\n\n            case 10:\n              _context5.t1 = _yield$this$v1Contrac2.toNumber();\n\n            case 11:\n              maxId = _context5.t1;\n              _context5.next = 17;\n              break;\n\n            case 14:\n              _context5.next = 16;\n              return this.readOnlyContract.nextTokenIdToMint();\n\n            case 16:\n              maxId = _context5.sent.toNumber();\n\n            case 17:\n              _context5.next = 19;\n              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {\n                return _this3.getWithOwner(i.toString());\n              }));\n\n            case 19:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getAllWithOwner() {\n      return _getAllWithOwner.apply(this, arguments);\n    }\n\n    return getAllWithOwner;\n  }()\n  /**\r\n   * Checks the owner of a particular NFT\r\n   *\r\n   * @param tokenId - ID of the NFT to get the owner of\r\n   * @returns the owner of the token, or a zero address if the\r\n   * token has been burned\r\n   */\n  ;\n\n  _proto.ownerOf = /*#__PURE__*/function () {\n    var _ownerOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(tokenId) {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return this.readOnlyContract.ownerOf(tokenId);\n\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 6:\n              _context6.prev = 6;\n              _context6.t0 = _context6[\"catch\"](0);\n              return _context6.abrupt(\"return\", AddressZero);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this, [[0, 6]]);\n    }));\n\n    function ownerOf(_x3) {\n      return _ownerOf.apply(this, arguments);\n    }\n\n    return ownerOf;\n  }()\n  /**\r\n   * Get Owned NFTs\r\n   *\r\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to get the NFTs of\r\n   * const address = \"{{wallet_address}}\";\r\n   * const nfts = await module.getOwned(address);\r\n   * console.log(nfts);\r\n   * ```\r\n   */\n  ;\n\n  _proto.getOwned = /*#__PURE__*/function () {\n    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(_address) {\n      var _this4 = this;\n\n      var address, balance, indices, tokenIds;\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!_address) {\n                _context7.next = 4;\n                break;\n              }\n\n              _context7.t0 = _address;\n              _context7.next = 7;\n              break;\n\n            case 4:\n              _context7.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context7.t0 = _context7.sent;\n\n            case 7:\n              address = _context7.t0;\n              _context7.next = 10;\n              return this.readOnlyContract.balanceOf(address);\n\n            case 10:\n              balance = _context7.sent;\n              indices = Array.from(Array(balance.toNumber()).keys());\n              _context7.next = 14;\n              return Promise.all(indices.map(function (i) {\n                return _this4.readOnlyContract.tokenOfOwnerByIndex(address, i);\n              }));\n\n            case 14:\n              tokenIds = _context7.sent;\n              _context7.next = 17;\n              return Promise.all(tokenIds.map(function (tokenId) {\n                return _this4.get(tokenId.toString());\n              }));\n\n            case 17:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getOwned(_x4) {\n      return _getOwned.apply(this, arguments);\n    }\n\n    return getOwned;\n  }();\n\n  _proto.totalSupply = /*#__PURE__*/function () {\n    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.readOnlyContract.totalSupply();\n\n            case 2:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function totalSupply() {\n      return _totalSupply.apply(this, arguments);\n    }\n\n    return totalSupply;\n  }()\n  /**\r\n   * Get NFT Balance\r\n   *\r\n   * @remarks Get a wallets NFT balance (number of NFTs in this module owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check NFT balance\r\n   * const address = \"{{wallet_address}}\";\r\n   *\r\n   * const balance = await module.balanceOf(address);\r\n   * console.log(balance);\r\n   * ```\r\n   *\r\n   * @returns The balance of the NFTs in the wallet\r\n   */\n  ;\n\n  _proto.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(address) {\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.readOnlyContract.balanceOf(address);\n\n            case 2:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function balanceOf(_x5) {\n      return _balanceOf.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }();\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10() {\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.t0 = this;\n              _context10.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context10.t1 = _context10.sent;\n              _context10.next = 6;\n              return _context10.t0.balanceOf.call(_context10.t0, _context10.t1);\n\n            case 6:\n              return _context10.abrupt(\"return\", _context10.sent);\n\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function balance() {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }();\n\n  _proto.isApproved = /*#__PURE__*/function () {\n    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(address, operator) {\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.readOnlyContract.isApprovedForAll(address, operator);\n\n            case 2:\n              return _context11.abrupt(\"return\", _context11.sent);\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function isApproved(_x6, _x7) {\n      return _isApproved.apply(this, arguments);\n    }\n\n    return isApproved;\n  }() // write functions\n  ;\n\n  _proto.setApproval = /*#__PURE__*/function () {\n    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(operator, approved) {\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (approved === void 0) {\n                approved = true;\n              }\n\n              _context12.next = 3;\n              return this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n\n            case 3:\n              return _context12.abrupt(\"return\", _context12.sent);\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function setApproval(_x8, _x9) {\n      return _setApproval.apply(this, arguments);\n    }\n\n    return setApproval;\n  }()\n  /**\r\n   * Transfer NFT\r\n   *\r\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the NFT to\r\n   * const toAddress = \"{{wallet_address}}\";\r\n   *\r\n   * // The token ID of the NFT you want to send\r\n   * const tokenId = \"0\";\r\n   *\r\n   * await module.transfer(toAddress, tokenId);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transfer = /*#__PURE__*/function () {\n    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(to, tokenId) {\n      var from;\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.isTransferRestricted();\n\n            case 2:\n              if (!_context13.sent) {\n                _context13.next = 4;\n                break;\n              }\n\n              throw new RestrictedTransferError(this.address);\n\n            case 4:\n              _context13.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              from = _context13.sent;\n              _context13.next = 9;\n              return this.sendTransaction(\"safeTransferFrom(address,address,uint256)\", [from, to, tokenId]);\n\n            case 9:\n              return _context13.abrupt(\"return\", _context13.sent);\n\n            case 10:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function transfer(_x10, _x11) {\n      return _transfer.apply(this, arguments);\n    }\n\n    return transfer;\n  }() // owner functions\n  ;\n\n  _proto.mint = /*#__PURE__*/function () {\n    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(metadata) {\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.t0 = this;\n              _context14.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context14.t1 = _context14.sent;\n              _context14.t2 = metadata;\n              _context14.next = 7;\n              return _context14.t0.mintTo.call(_context14.t0, _context14.t1, _context14.t2);\n\n            case 7:\n              return _context14.abrupt(\"return\", _context14.sent);\n\n            case 8:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function mint(_x12) {\n      return _mint.apply(this, arguments);\n    }\n\n    return mint;\n  }();\n\n  _proto._v1MintTo = /*#__PURE__*/function () {\n    var _v1MintTo2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(to, metadata) {\n      var uri, receipt, events;\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              !(this.v1Contract !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"v1 contract is undefined\") : invariant(false) : void 0;\n              _context15.next = 3;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 3:\n              uri = _context15.sent;\n              _context15.next = 6;\n              return this.sendContractTransaction(this.v1Contract, \"mintNFT\", [to, uri]);\n\n            case 6:\n              receipt = _context15.sent;\n              events = this.parseLogs(\"Minted\", receipt == null ? void 0 : receipt.logs, this.v1Contract);\n\n              if (!(events.length === 0)) {\n                _context15.next = 10;\n                break;\n              }\n\n              throw new Error(\"No Minted event found, failed to mint\");\n\n            case 10:\n              _context15.next = 12;\n              return this.get(events[0].args.tokenId.toString());\n\n            case 12:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 13:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function _v1MintTo(_x13, _x14) {\n      return _v1MintTo2.apply(this, arguments);\n    }\n\n    return _v1MintTo;\n  }()\n  /**\r\n   * Mint NFT\r\n   *\r\n   * @remarks Mint an NFT to a specified wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to mint the NFT to\r\n   * const toAddress = \"{{wallet_address}}\"\r\n   *\r\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\r\n   * const metadata = {\r\n   *   name: \"Cool NFT\",\r\n   *   description: \"This is a cool NFT\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\r\n   * }\r\n   *\r\n   * await module.mintTo(toAddress, metadata);\r\n   * ```\r\n   */\n  ;\n\n  _proto.mintTo = /*#__PURE__*/function () {\n    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(to, metadata) {\n      var uri, receipt, event, tokenId;\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.isV1();\n\n            case 2:\n              if (!_context16.sent) {\n                _context16.next = 6;\n                break;\n              }\n\n              _context16.next = 5;\n              return this._v1MintTo(to, metadata);\n\n            case 5:\n              return _context16.abrupt(\"return\", _context16.sent);\n\n            case 6:\n              _context16.next = 8;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 8:\n              uri = _context16.sent;\n              _context16.next = 11;\n              return this.sendTransaction(\"mintTo\", [to, uri]);\n\n            case 11:\n              receipt = _context16.sent;\n              event = this.parseLogs(\"TokenMinted\", receipt == null ? void 0 : receipt.logs);\n\n              if (!(event.length === 0)) {\n                _context16.next = 15;\n                break;\n              }\n\n              throw new Error(\"TokenMinted event not found\");\n\n            case 15:\n              tokenId = event[0].args.tokenIdMinted;\n              _context16.next = 18;\n              return this.get(tokenId.toString());\n\n            case 18:\n              return _context16.abrupt(\"return\", _context16.sent);\n\n            case 19:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function mintTo(_x15, _x16) {\n      return _mintTo.apply(this, arguments);\n    }\n\n    return mintTo;\n  }();\n\n  _proto.mintBatch = /*#__PURE__*/function () {\n    var _mintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(metadatas) {\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.t0 = this;\n              _context17.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context17.t1 = _context17.sent;\n              _context17.t2 = metadatas;\n              _context17.next = 7;\n              return _context17.t0.mintBatchTo.call(_context17.t0, _context17.t1, _context17.t2);\n\n            case 7:\n              return _context17.abrupt(\"return\", _context17.sent);\n\n            case 8:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function mintBatch(_x17) {\n      return _mintBatch.apply(this, arguments);\n    }\n\n    return mintBatch;\n  }();\n\n  _proto._v1MintBatchTo = /*#__PURE__*/function () {\n    var _v1MintBatchTo2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(to, metadatas) {\n      var _this5 = this;\n\n      var _yield$this$sdk$getSt, uris, receipt, events, tokenIds;\n\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              !(this.v1Contract !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"v1 contract is undefined\") : invariant(false) : void 0;\n              _context18.next = 3;\n              return this.sdk.getStorage().uploadMetadataBatch(metadatas);\n\n            case 3:\n              _yield$this$sdk$getSt = _context18.sent;\n              uris = _yield$this$sdk$getSt.metadataUris;\n              _context18.next = 7;\n              return this.sendContractTransaction(this.v1Contract, \"mintNFTBatch\", [to, uris]);\n\n            case 7:\n              receipt = _context18.sent;\n              events = this.parseLogs(\"MintedBatch\", receipt == null ? void 0 : receipt.logs, this.v1Contract);\n\n              if (!(events.length === 0)) {\n                _context18.next = 11;\n                break;\n              }\n\n              throw new Error(\"No MintedBatch event found, failed to mint\");\n\n            case 11:\n              tokenIds = events[0].args.tokenIds;\n              _context18.next = 14;\n              return Promise.all(tokenIds.map(function (tokenId) {\n                return _this5.get(tokenId.toString());\n              }));\n\n            case 14:\n              return _context18.abrupt(\"return\", _context18.sent);\n\n            case 15:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function _v1MintBatchTo(_x18, _x19) {\n      return _v1MintBatchTo2.apply(this, arguments);\n    }\n\n    return _v1MintBatchTo;\n  }()\n  /**\r\n   * Mint Many NFTs\r\n   *\r\n   * @remarks Mint many NFTs at once to a specified wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to mint the NFT to\r\n   * const toAddress = \"{{wallet_address}}\"\r\n   *\r\n   * // Custom metadata of the NFTs you want to mint.\r\n   * const metadatas = [{\r\n   *   name: \"Cool NFT #1\",\r\n   *   description: \"This is a cool NFT\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\r\n   * }, {\r\n   *   name: \"Cool NFT #2\",\r\n   *   description: \"This is a cool NFT\",\r\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\r\n   * }];\r\n   *\r\n   * await module.mintBatchTo(toAddress, metadatas);\r\n   * ```\r\n   */\n  ;\n\n  _proto.mintBatchTo = /*#__PURE__*/function () {\n    var _mintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(to, metadatas) {\n      var _this6 = this;\n\n      var _yield$this$sdk$getSt2, uris, multicall, receipt, events, tokenIds;\n\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.isV1();\n\n            case 2:\n              if (!_context19.sent) {\n                _context19.next = 6;\n                break;\n              }\n\n              _context19.next = 5;\n              return this._v1MintBatchTo(to, metadatas);\n\n            case 5:\n              return _context19.abrupt(\"return\", _context19.sent);\n\n            case 6:\n              _context19.next = 8;\n              return this.sdk.getStorage().uploadMetadataBatch(metadatas);\n\n            case 8:\n              _yield$this$sdk$getSt2 = _context19.sent;\n              uris = _yield$this$sdk$getSt2.metadataUris;\n              multicall = uris.map(function (uri) {\n                return _this6.contract[\"interface\"].encodeFunctionData(\"mintTo\", [to, uri]);\n              });\n              _context19.next = 13;\n              return this.sendTransaction(\"multicall\", [multicall]);\n\n            case 13:\n              receipt = _context19.sent;\n              events = this.parseLogs(\"TokenMinted\", receipt.logs);\n\n              if (!(events.length === 0 || events.length < metadatas.length)) {\n                _context19.next = 17;\n                break;\n              }\n\n              throw new Error(\"TokenMinted event not found, minting failed\");\n\n            case 17:\n              tokenIds = events.map(function (e) {\n                return e.args.tokenIdMinted;\n              });\n              _context19.next = 20;\n              return Promise.all(tokenIds.map(function (tokenId) {\n                return _this6.get(tokenId.toString());\n              }));\n\n            case 20:\n              return _context19.abrupt(\"return\", _context19.sent);\n\n            case 21:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function mintBatchTo(_x20, _x21) {\n      return _mintBatchTo.apply(this, arguments);\n    }\n\n    return mintBatchTo;\n  }()\n  /**\r\n   * Burn NFT\r\n   *\r\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The token ID of the NFT you want to burn\r\n   * const tokenId = 0;\r\n   *\r\n   * await module.burn(tokenId);\r\n   * ```\r\n   */\n  ;\n\n  _proto.burn = /*#__PURE__*/function () {\n    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(tokenId) {\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this.sendTransaction(\"burn\", [tokenId]);\n\n            case 2:\n              return _context20.abrupt(\"return\", _context20.sent);\n\n            case 3:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function burn(_x22) {\n      return _burn.apply(this, arguments);\n    }\n\n    return burn;\n  }();\n\n  _proto.transferFrom = /*#__PURE__*/function () {\n    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(from, to, tokenId) {\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n\n            case 2:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 3:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function transferFrom(_x23, _x24, _x25) {\n      return _transferFrom.apply(this, arguments);\n    }\n\n    return transferFrom;\n  }();\n\n  _proto.setRoyaltyBps = /*#__PURE__*/function () {\n    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(amount) {\n      var _yield$this$getMetada, metadata, encoded, uri;\n\n      return runtime_1.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.getMetadata(false);\n\n            case 2:\n              _yield$this$getMetada = _context22.sent;\n              metadata = _yield$this$getMetada.metadata;\n              encoded = [];\n\n              if (metadata) {\n                _context22.next = 7;\n                break;\n              }\n\n              throw new Error(\"No metadata found, this module might be invalid!\");\n\n            case 7:\n              metadata.seller_fee_basis_points = amount;\n              _context22.t0 = this.sdk.getStorage();\n              _context22.t1 = _extends({}, metadata);\n              _context22.t2 = this.address;\n              _context22.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context22.t3 = _context22.sent;\n              _context22.next = 16;\n              return _context22.t0.uploadMetadata.call(_context22.t0, _context22.t1, _context22.t2, _context22.t3);\n\n            case 16:\n              uri = _context22.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setRoyaltyBps\", [amount]));\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [uri]));\n              _context22.next = 21;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 21:\n              return _context22.abrupt(\"return\", _context22.sent);\n\n            case 22:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function setRoyaltyBps(_x26) {\n      return _setRoyaltyBps.apply(this, arguments);\n    }\n\n    return setRoyaltyBps;\n  }();\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context23.sent;\n              _context23.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context23.abrupt(\"return\", _context23.sent);\n\n            case 6:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function setModuleMetadata(_x27) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }()\n  /**\r\n   * Gets the royalty BPS (basis points) of the contract\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyBps = /*#__PURE__*/function () {\n    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24() {\n      return runtime_1.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return this.readOnlyContract.royaltyBps();\n\n            case 2:\n              return _context24.abrupt(\"return\", _context24.sent);\n\n            case 3:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this);\n    }));\n\n    function getRoyaltyBps() {\n      return _getRoyaltyBps.apply(this, arguments);\n    }\n\n    return getRoyaltyBps;\n  }()\n  /**\r\n   * Gets the address of the royalty recipient\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyRecipientAddress = /*#__PURE__*/function () {\n    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25() {\n      var _metadata$metadata;\n\n      var metadata;\n      return runtime_1.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return this.getMetadata();\n\n            case 2:\n              metadata = _context25.sent;\n\n              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {\n                _context25.next = 5;\n                break;\n              }\n\n              return _context25.abrupt(\"return\", metadata.metadata.fee_recipient);\n\n            case 5:\n              return _context25.abrupt(\"return\", \"\");\n\n            case 6:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25, this);\n    }));\n\n    function getRoyaltyRecipientAddress() {\n      return _getRoyaltyRecipientAddress.apply(this, arguments);\n    }\n\n    return getRoyaltyRecipientAddress;\n  }();\n\n  _proto.isTransferRestricted = /*#__PURE__*/function () {\n    var _isTransferRestricted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26() {\n      return runtime_1.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              return _context26.abrupt(\"return\", this.readOnlyContract.transfersRestricted());\n\n            case 1:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26, this);\n    }));\n\n    function isTransferRestricted() {\n      return _isTransferRestricted.apply(this, arguments);\n    }\n\n    return isTransferRestricted;\n  }();\n\n  _proto.setRestrictedTransfer = /*#__PURE__*/function () {\n    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(restricted) {\n      return runtime_1.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (restricted === void 0) {\n                restricted = false;\n              }\n\n              _context27.t0 = this;\n              _context27.t1 = [\"admin\"];\n              _context27.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context27.t2 = _context27.sent;\n              _context27.next = 8;\n              return _context27.t0.onlyRoles.call(_context27.t0, _context27.t1, _context27.t2);\n\n            case 8:\n              _context27.next = 10;\n              return this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n\n            case 10:\n              return _context27.abrupt(\"return\", _context27.sent);\n\n            case 11:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27, this);\n    }));\n\n    function setRestrictedTransfer(_x28) {\n      return _setRestrictedTransfer.apply(this, arguments);\n    }\n\n    return setRestrictedTransfer;\n  }();\n\n  _proto.mintWithSignature = /*#__PURE__*/function () {\n    var _mintWithSignature = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(req, signature) {\n      var message, overrides, receipt, t;\n      return runtime_1.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              message = _extends({}, this.mapPayload(req), {\n                uri: req.uri\n              });\n              _context28.next = 3;\n              return this.getCallOverrides();\n\n            case 3:\n              overrides = _context28.sent;\n              _context28.next = 6;\n              return this.setAllowance(BigNumber.from(message.price), req.currencyAddress, overrides);\n\n            case 6:\n              _context28.next = 8;\n              return this.sendTransaction(\"mintWithSignature\", [message, signature], overrides);\n\n            case 8:\n              receipt = _context28.sent;\n              _context28.next = 11;\n              return this.parseLogs(\"MintWithSignature\", receipt.logs);\n\n            case 11:\n              t = _context28.sent;\n\n              if (!(t.length === 0)) {\n                _context28.next = 14;\n                break;\n              }\n\n              throw new Error(\"No MintWithSignature event found\");\n\n            case 14:\n              return _context28.abrupt(\"return\", t[0].args.tokenIdMinted);\n\n            case 15:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28, this);\n    }));\n\n    function mintWithSignature(_x29, _x30) {\n      return _mintWithSignature.apply(this, arguments);\n    }\n\n    return mintWithSignature;\n  }();\n\n  _proto.verify = /*#__PURE__*/function () {\n    var _verify = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(mintRequest, signature) {\n      var message, v;\n      return runtime_1.wrap(function _callee29$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              message = this.mapPayload(mintRequest);\n              _context29.next = 3;\n              return this.readOnlyContract.verify(_extends({}, message, {\n                uri: mintRequest.uri\n              }), signature);\n\n            case 3:\n              v = _context29.sent;\n              return _context29.abrupt(\"return\", v[0]);\n\n            case 5:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee29, this);\n    }));\n\n    function verify(_x31, _x32) {\n      return _verify.apply(this, arguments);\n    }\n\n    return verify;\n  }();\n\n  _proto.generateSignatureBatch = /*#__PURE__*/function () {\n    var _generateSignatureBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(payloads) {\n      var _this7 = this;\n\n      var resolveId, _yield$this$sdk$getSt3, uris, chainId, signer;\n\n      return runtime_1.wrap(function _callee31$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              resolveId = function resolveId(mintRequest) {\n                if (mintRequest.id === undefined) {\n                  var buffer = Buffer.alloc(16);\n                  v4({}, buffer);\n                  return hexlify$1(toUtf8Bytes(buffer.toString(\"hex\")));\n                } else {\n                  return hexlify$1(mintRequest.id);\n                }\n              };\n\n              _context31.t0 = this;\n              _context31.t1 = [\"minter\"];\n              _context31.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context31.t2 = _context31.sent;\n              _context31.next = 8;\n              return _context31.t0.onlyRoles.call(_context31.t0, _context31.t1, _context31.t2);\n\n            case 8:\n              _context31.next = 10;\n              return this.sdk.getStorage().uploadMetadataBatch(payloads.map(function (r) {\n                return r.metadata;\n              }));\n\n            case 10:\n              _yield$this$sdk$getSt3 = _context31.sent;\n              uris = _yield$this$sdk$getSt3.metadataUris;\n              _context31.next = 14;\n              return this.getChainID();\n\n            case 14:\n              chainId = _context31.sent;\n              signer = this.getSigner();\n              _context31.next = 18;\n              return Promise.all(payloads.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(m, i) {\n                  var id, uri;\n                  return runtime_1.wrap(function _callee30$(_context30) {\n                    while (1) {\n                      switch (_context30.prev = _context30.next) {\n                        case 0:\n                          id = resolveId(m);\n                          uri = uris[i];\n                          _context30.t0 = _extends({}, m, {\n                            id: id,\n                            uri: uri\n                          });\n                          _context30.next = 5;\n                          return _this7.signTypedDataEmitEvent(signer, {\n                            name: \"SignatureMint721\",\n                            version: \"1\",\n                            chainId: chainId,\n                            verifyingContract: _this7.address\n                          }, {\n                            MintRequest: MintRequest$1\n                          }, _extends({\n                            uri: uri\n                          }, _this7.mapPayload(m), {\n                            uid: id\n                          }));\n\n                        case 5:\n                          _context30.t1 = _context30.sent.toString();\n                          return _context30.abrupt(\"return\", {\n                            payload: _context30.t0,\n                            signature: _context30.t1\n                          });\n\n                        case 7:\n                        case \"end\":\n                          return _context30.stop();\n                      }\n                    }\n                  }, _callee30);\n                }));\n\n                return function (_x34, _x35) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n\n            case 18:\n              return _context31.abrupt(\"return\", _context31.sent);\n\n            case 19:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, _callee31, this);\n    }));\n\n    function generateSignatureBatch(_x33) {\n      return _generateSignatureBatch.apply(this, arguments);\n    }\n\n    return generateSignatureBatch;\n  }();\n\n  _proto.generateSignature = /*#__PURE__*/function () {\n    var _generateSignature = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(mintRequest) {\n      return runtime_1.wrap(function _callee32$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return this.generateSignatureBatch([mintRequest]);\n\n            case 2:\n              return _context32.abrupt(\"return\", _context32.sent[0]);\n\n            case 3:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, _callee32, this);\n    }));\n\n    function generateSignature(_x36) {\n      return _generateSignature.apply(this, arguments);\n    }\n\n    return generateSignature;\n  }()\n  /**\r\n   * Maps a payload to the format expected by the contract\r\n   *\r\n   * @internal\r\n   *\r\n   * @param mintRequest - The payload to map.\r\n   * @returns - The mapped payload.\r\n   */\n  ;\n\n  _proto.mapPayload = function mapPayload(mintRequest) {\n    return {\n      to: mintRequest.to,\n      price: mintRequest.price,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTimeEpochSeconds,\n      validityStartTimestamp: mintRequest.mintStartTimeEpochSeconds,\n      uid: mintRequest.id\n    };\n  } // TODO: write in common place and stop duping\n  ;\n\n  _proto.setAllowance = /*#__PURE__*/function () {\n    var _setAllowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(value, currencyAddress, overrides) {\n      var erc20, owner, spender, allowance;\n      return runtime_1.wrap(function _callee33$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              if (!(currencyAddress === NATIVE_TOKEN_ADDRESS || currencyAddress === AddressZero)) {\n                _context33.next = 4;\n                break;\n              }\n\n              overrides[\"value\"] = value;\n              _context33.next = 16;\n              break;\n\n            case 4:\n              erc20 = ERC20__factory.connect(currencyAddress, this.providerOrSigner);\n              _context33.next = 7;\n              return this.getSignerAddress();\n\n            case 7:\n              owner = _context33.sent;\n              spender = this.address;\n              _context33.next = 11;\n              return erc20.allowance(owner, spender);\n\n            case 11:\n              allowance = _context33.sent;\n\n              if (!allowance.lt(value)) {\n                _context33.next = 15;\n                break;\n              }\n\n              _context33.next = 15;\n              return this.sendContractTransaction(erc20, \"increaseAllowance\", [spender, value.sub(allowance)]);\n\n            case 15:\n              return _context33.abrupt(\"return\", overrides);\n\n            case 16:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, _callee33, this);\n    }));\n\n    function setAllowance(_x37, _x38, _x39) {\n      return _setAllowance.apply(this, arguments);\n    }\n\n    return setAllowance;\n  }();\n\n  return NFTModule;\n}(ModuleWithRoles);\n\nNFTModule.moduleType = ModuleType.NFT;\nNFTModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.transfer];\nvar UnderlyingType;\n\n(function (UnderlyingType) {\n  UnderlyingType[UnderlyingType[\"None\"] = 0] = \"None\";\n  UnderlyingType[UnderlyingType[\"ERC20\"] = 1] = \"ERC20\";\n  UnderlyingType[UnderlyingType[\"ERC721\"] = 2] = \"ERC721\";\n})(UnderlyingType || (UnderlyingType = {}));\n/**\r\n * Create lootboxes of NFTs with rarity based open mechanics.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getPackModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nvar PackModule = /*#__PURE__*/function (_ModuleWithRoles) {\n  _inheritsLoose(PackModule, _ModuleWithRoles);\n\n  function PackModule() {\n    return _ModuleWithRoles.apply(this, arguments) || this;\n  }\n\n  var _proto = PackModule.prototype;\n  /**\r\n   * @override\r\n   * @internal\r\n   */\n\n  _proto.getModuleRoles = function getModuleRoles() {\n    return PackModule.roles;\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.connectContract = function connectContract() {\n    return Pack__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return PackModule.moduleType;\n  }\n  /**\r\n   * Open Pack\r\n   *\r\n   * @remarks Open a pack to burn it and obtain the reward asset inside.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The pack ID of the asset you want to buy\r\n   * const packId = \"0\";\r\n   * const rewards = await module.open(packId);\r\n   * console.log(rewards);\r\n   * ```\r\n   */\n  ;\n\n  _proto.open = /*#__PURE__*/function () {\n    var _open = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(packId) {\n      var _this = this;\n\n      var receipt, logs, event, requestId, opener, fulfillEvent, rewardIds, rewardContract;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.sendTransaction(\"openPack\", [packId]);\n\n            case 2:\n              receipt = _context.sent;\n              logs = this.parseLogs(\"PackOpenRequest\", receipt == null ? void 0 : receipt.logs);\n\n              if (!(logs.length === 0)) {\n                _context.next = 6;\n                break;\n              }\n\n              throw new Error(\"Failed to open pack\");\n\n            case 6:\n              event = logs[0];\n              requestId = event.args.requestId;\n              opener = event.args.opener;\n              _context.next = 11;\n              return new Promise(function (resolve) {\n                _this.readOnlyContract.once( // eslint-disable-next-line new-cap\n                _this.readOnlyContract.filters.PackOpenFulfilled(null, opener), function (_packId, _opener, _requestId, rewardContract, rewardIds) {\n                  if (requestId === _requestId) {\n                    resolve({\n                      packId: _packId,\n                      opener: _opener,\n                      requestId: requestId,\n                      rewardContract: rewardContract,\n                      rewardIds: rewardIds\n                    });\n                  }\n                });\n              });\n\n            case 11:\n              fulfillEvent = _context.sent;\n              rewardIds = fulfillEvent.rewardIds, rewardContract = fulfillEvent.rewardContract;\n              _context.next = 15;\n              return Promise.all(rewardIds.map(function (rewardId) {\n                return getMetadataWithoutContract(_this.providerOrSigner, rewardContract, rewardId.toString(), _this.sdk.getStorage());\n              }));\n\n            case 15:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function open(_x) {\n      return _open.apply(this, arguments);\n    }\n\n    return open;\n  }();\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(packId) {\n      var _yield$Promise$all, meta, state, supply, entity;\n\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Promise.all([getMetadataWithoutContract(this.providerOrSigner, this.address, packId, this.sdk.getStorage()), this.readOnlyContract.getPack(packId), this.readOnlyContract.totalSupply(packId)[\"catch\"](function () {\n                return BigNumber.from(\"0\");\n              })]);\n\n            case 2:\n              _yield$Promise$all = _context2.sent;\n              meta = _yield$Promise$all[0];\n              state = _yield$Promise$all[1];\n              supply = _yield$Promise$all[2];\n              entity = {\n                id: packId,\n                metadata: meta,\n                creator: state.creator,\n                currentSupply: supply,\n                openStart: state.openStart.gt(0) ? new Date(state.openStart.toNumber() * 1000) : null\n              };\n              return _context2.abrupt(\"return\", entity);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function get(_x2) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * Get Pack Data\r\n   *\r\n   * @remarks Get data associated with every pack in this module.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const packs = await module.getAll();\r\n   * console.log(packs);\r\n   * ```\r\n   *\r\n   * @returns The NFT metadata for all NFTs in the module.\r\n   */\n  ;\n\n  _proto.getAll = /*#__PURE__*/function () {\n    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {\n      var _this2 = this;\n\n      var maxId;\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.readOnlyContract.nextTokenId();\n\n            case 2:\n              maxId = _context3.sent.toNumber();\n              _context3.next = 5;\n              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {\n                return _this2.get(i.toString());\n              }));\n\n            case 5:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getAll() {\n      return _getAll.apply(this, arguments);\n    }\n\n    return getAll;\n  }()\n  /**\r\n   * Get Pack Reward Data\r\n   *\r\n   * @remarks Get data associated with the rewards inside a specified pack\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The pack ID of the pack whos rewards you want to get\r\n   * const packId = 0;\r\n   *\r\n   * const nfts = await module.getNFTs(packId);\r\n   * console.log(nfts);\r\n   * ```\r\n   *\r\n   * @returns The NFT metadata for all NFTs in the module.\r\n   */\n  ;\n\n  _proto.getNFTs = /*#__PURE__*/function () {\n    var _getNFTs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(packId) {\n      var _this3 = this;\n\n      var packReward, rewards;\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.readOnlyContract.getPackWithRewards(packId);\n\n            case 2:\n              packReward = _context4.sent;\n\n              if (packReward.source) {\n                _context4.next = 5;\n                break;\n              }\n\n              throw new NotFoundError();\n\n            case 5:\n              _context4.next = 7;\n              return Promise.all(packReward.tokenIds.map(function (tokenId) {\n                return getMetadataWithoutContract(_this3.providerOrSigner, packReward.source, tokenId.toString(), _this3.sdk.getStorage());\n              }));\n\n            case 7:\n              rewards = _context4.sent;\n              return _context4.abrupt(\"return\", rewards.map(function (reward, i) {\n                return {\n                  supply: packReward.amountsPacked[i],\n                  metadata: reward\n                };\n              }));\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getNFTs(_x3) {\n      return _getNFTs.apply(this, arguments);\n    }\n\n    return getNFTs;\n  }()\n  /**\r\n   * Get Pack Balance\r\n   *\r\n   * @remarks Get a wallets pack balance (number of a specific packs in this module owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check pack balance\r\n   * const address = \"{{wallet_address}}\"\";\r\n   * // The token ID of the pack you want to check the wallets balance of\r\n   * const tokenId = \"0\"\r\n   *\r\n   * const balance = await module.balanceOf(address, tokenId);\r\n   * console.log(balance);\r\n   * ```\r\n   */\n  ;\n\n  _proto.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address, tokenId) {\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.readOnlyContract.balanceOf(address, tokenId);\n\n            case 2:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function balanceOf(_x4, _x5) {\n      return _balanceOf.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }();\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(tokenId) {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.t0 = this;\n              _context6.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context6.t1 = _context6.sent;\n              _context6.t2 = tokenId;\n              _context6.next = 7;\n              return _context6.t0.balanceOf.call(_context6.t0, _context6.t1, _context6.t2);\n\n            case 7:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function balance(_x6) {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }();\n\n  _proto.isApproved = /*#__PURE__*/function () {\n    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(address, operator) {\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.readOnlyContract.isApprovedForAll(address, operator);\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function isApproved(_x7, _x8) {\n      return _isApproved.apply(this, arguments);\n    }\n\n    return isApproved;\n  }();\n\n  _proto.setApproval = /*#__PURE__*/function () {\n    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(operator, approved) {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (approved === void 0) {\n                approved = true;\n              }\n\n              _context8.next = 3;\n              return this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function setApproval(_x9, _x10) {\n      return _setApproval.apply(this, arguments);\n    }\n\n    return setApproval;\n  }()\n  /**\r\n   * Transfer Pack\r\n   *\r\n   * @remarks Transfer a pack from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the pack to\r\n   * const toAddress = \"0x...\";\r\n   *\r\n   * // The token ID of the pack you want to send\r\n   * const tokenId = \"0\";\r\n   *\r\n   * // The number of packs you want to send\r\n   * const amount = 1;\r\n   *\r\n   * await module.transfer(toAddress, tokenId, amount);\r\n   * ```\r\n   */\n  ;\n\n  _proto.transfer = /*#__PURE__*/function () {\n    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(to, tokenId, amount) {\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.t0 = this;\n              _context9.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              _context9.t1 = _context9.sent;\n              _context9.t2 = to;\n              _context9.t3 = tokenId;\n              _context9.t4 = amount;\n              _context9.t5 = [0];\n              _context9.t6 = [_context9.t1, _context9.t2, _context9.t3, _context9.t4, _context9.t5];\n              _context9.next = 11;\n              return _context9.t0.sendTransaction.call(_context9.t0, \"safeTransferFrom\", _context9.t6);\n\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function transfer(_x11, _x12, _x13) {\n      return _transfer.apply(this, arguments);\n    }\n\n    return transfer;\n  }() // owner functions\n\n  /**\r\n   * Create Pack\r\n   *\r\n   * @remarks Create a new pack with its own rewards.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data to create the pack\r\n   * const pack = {\r\n   *   // The address of the contract that holds the rewards you want to include\r\n   *   assetContract: \"0x...\",\r\n   *   // The metadata of the pack\r\n   *   metadata: {\r\n   *     name: \"Cool Pack\",\r\n   *     description: \"This is a cool pack\",\r\n   *     // This can be an image url or image file\r\n   *     image: readFileSync(\"path/to/image.png\"),\r\n   *   },\r\n   *   // The NFTs you want to include in the pack\r\n   *   assets: [\r\n   *     {\r\n   *       tokenId: 0, // The token ID of the asset you want to add\r\n   *       amount: 1, // The amount of the asset you want to add\r\n   *     }, {\r\n   *       tokenId: 1,\r\n   *       amount: 1,\r\n   *     }\r\n   *   ],\r\n   * };\r\n   *\r\n   * await module.create(pack);\r\n   * ```\r\n   *\r\n   * @param args - Args for the pack creation\r\n   * @returns - The newly created pack metadata\r\n   */\n  ;\n\n  _proto.create = /*#__PURE__*/function () {\n    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(args) {\n      var asset, from, ids, amounts, uri, packParams, tx, receipt, log, packId;\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              asset = ERC1155__factory.connect(args.assetContract, this.providerOrSigner);\n              _context10.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              from = _context10.sent;\n              ids = args.assets.map(function (a) {\n                return a.tokenId;\n              });\n              amounts = args.assets.map(function (a) {\n                return a.amount;\n              });\n              _context10.next = 8;\n              return this.sdk.getStorage().uploadMetadata(args.metadata);\n\n            case 8:\n              uri = _context10.sent;\n              packParams = ethers.utils.defaultAbiCoder.encode([\"string\", \"uint256\", \"uint256\"], [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1]); // TODO: make it gasless\n\n              _context10.t0 = asset;\n              _context10.t1 = from;\n              _context10.t2 = this.address;\n              _context10.t3 = ids;\n              _context10.t4 = amounts;\n              _context10.t5 = packParams;\n              _context10.next = 18;\n              return this.getCallOverrides();\n\n            case 18:\n              _context10.t6 = _context10.sent;\n              _context10.next = 21;\n              return _context10.t0.safeBatchTransferFrom.call(_context10.t0, _context10.t1, _context10.t2, _context10.t3, _context10.t4, _context10.t5, _context10.t6);\n\n            case 21:\n              tx = _context10.sent;\n              _context10.next = 24;\n              return tx.wait();\n\n            case 24:\n              receipt = _context10.sent;\n              log = this.parseLogs(\"PackCreated\", receipt.logs);\n\n              if (!(log.length === 0)) {\n                _context10.next = 28;\n                break;\n              }\n\n              throw new Error(\"PackCreated event not found\");\n\n            case 28:\n              packId = log[0].args.packId;\n              _context10.next = 31;\n              return this.get(packId.toString());\n\n            case 31:\n              return _context10.abrupt(\"return\", _context10.sent);\n\n            case 32:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function create(_x14) {\n      return _create.apply(this, arguments);\n    }\n\n    return create;\n  }();\n\n  _proto.transferFrom = /*#__PURE__*/function () {\n    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(from, to, args, data) {\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              _context11.next = 3;\n              return this.sendTransaction(\"safeTransferFrom\", [from, to, args.tokenId, args.amount, data]);\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function transferFrom(_x15, _x16, _x17, _x18) {\n      return _transferFrom.apply(this, arguments);\n    }\n\n    return transferFrom;\n  }();\n\n  _proto.transferBatchFrom = /*#__PURE__*/function () {\n    var _transferBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(from, to, args, data) {\n      var ids, amounts;\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (data === void 0) {\n                data = [0];\n              }\n\n              ids = args.map(function (a) {\n                return a.tokenId;\n              });\n              amounts = args.map(function (a) {\n                return a.amount;\n              });\n              _context12.next = 5;\n              return this.sendTransaction(\"safeBatchTransferFrom\", [from, to, ids, amounts, data]);\n\n            case 5:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function transferBatchFrom(_x19, _x20, _x21, _x22) {\n      return _transferBatchFrom.apply(this, arguments);\n    }\n\n    return transferBatchFrom;\n  }();\n\n  _proto.getLinkBalance = /*#__PURE__*/function () {\n    var _getLinkBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {\n      var chainId, chainlink, erc20;\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.getChainID();\n\n            case 2:\n              chainId = _context13.sent;\n              chainlink = ChainlinkVrf[chainId];\n              erc20 = ERC20__factory.connect(chainlink.linkTokenAddress, this.providerOrSigner);\n              _context13.t0 = getCurrencyValue;\n              _context13.t1 = this.providerOrSigner;\n              _context13.t2 = chainlink.linkTokenAddress;\n              _context13.next = 10;\n              return erc20.balanceOf(this.address);\n\n            case 10:\n              _context13.t3 = _context13.sent;\n              _context13.next = 13;\n              return (0, _context13.t0)(_context13.t1, _context13.t2, _context13.t3);\n\n            case 13:\n              return _context13.abrupt(\"return\", _context13.sent);\n\n            case 14:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getLinkBalance() {\n      return _getLinkBalance.apply(this, arguments);\n    }\n\n    return getLinkBalance;\n  }();\n\n  _proto.depositLink = /*#__PURE__*/function () {\n    var _depositLink = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(amount) {\n      var chainId, chainlink, erc20, tx;\n      return runtime_1.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.getChainID();\n\n            case 2:\n              chainId = _context14.sent;\n              chainlink = ChainlinkVrf[chainId];\n              erc20 = ERC20__factory.connect(chainlink.linkTokenAddress, this.providerOrSigner); // TODO: make it gasless\n\n              _context14.t0 = erc20;\n              _context14.t1 = this.address;\n              _context14.t2 = amount;\n              _context14.next = 10;\n              return this.getCallOverrides();\n\n            case 10:\n              _context14.t3 = _context14.sent;\n              _context14.next = 13;\n              return _context14.t0.transfer.call(_context14.t0, _context14.t1, _context14.t2, _context14.t3);\n\n            case 13:\n              tx = _context14.sent;\n              _context14.next = 16;\n              return tx.wait();\n\n            case 16:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function depositLink(_x23) {\n      return _depositLink.apply(this, arguments);\n    }\n\n    return depositLink;\n  }();\n\n  _proto.withdrawLink = /*#__PURE__*/function () {\n    var _withdrawLink = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(to, amount) {\n      var _contract, chainId, chainlink;\n\n      return runtime_1.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.prev = 0; // old version of the contract\n\n              _contract = new Contract$1(this.address, [{\n                inputs: [{\n                  internalType: \"address\",\n                  name: \"_to\",\n                  type: \"address\"\n                }, {\n                  internalType: \"uint256\",\n                  name: \"_amount\",\n                  type: \"uint256\"\n                }],\n                name: \"transferLink\",\n                outputs: [],\n                stateMutability: \"nonpayable\",\n                type: \"function\"\n              }], this.providerOrSigner);\n              _context15.next = 4;\n              return this.sendContractTransaction(_contract, \"transferLink\", [to, amount]);\n\n            case 4:\n              _context15.next = 14;\n              break;\n\n            case 6:\n              _context15.prev = 6;\n              _context15.t0 = _context15[\"catch\"](0);\n              _context15.next = 10;\n              return this.getChainID();\n\n            case 10:\n              chainId = _context15.sent;\n              chainlink = ChainlinkVrf[chainId];\n              _context15.next = 14;\n              return this.sendTransaction(\"transferERC20\", [chainlink.linkTokenAddress, to, amount]);\n\n            case 14:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this, [[0, 6]]);\n    }));\n\n    function withdrawLink(_x24, _x25) {\n      return _withdrawLink.apply(this, arguments);\n    }\n\n    return withdrawLink;\n  }();\n\n  _proto.setRoyaltyBps = /*#__PURE__*/function () {\n    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(amount) {\n      var _yield$this$getMetada, metadata, encoded, uri;\n\n      return runtime_1.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getMetadata(false);\n\n            case 2:\n              _yield$this$getMetada = _context16.sent;\n              metadata = _yield$this$getMetada.metadata;\n              encoded = [];\n\n              if (metadata) {\n                _context16.next = 7;\n                break;\n              }\n\n              throw new Error(\"No metadata found, this module might be invalid!\");\n\n            case 7:\n              metadata.seller_fee_basis_points = amount;\n              _context16.t0 = this.sdk.getStorage();\n              _context16.t1 = _extends({}, metadata);\n              _context16.t2 = this.address;\n              _context16.next = 13;\n              return this.getSignerAddress();\n\n            case 13:\n              _context16.t3 = _context16.sent;\n              _context16.next = 16;\n              return _context16.t0.uploadMetadata.call(_context16.t0, _context16.t1, _context16.t2, _context16.t3);\n\n            case 16:\n              uri = _context16.sent;\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setRoyaltyBps\", [amount]));\n              encoded.push(this.contract[\"interface\"].encodeFunctionData(\"setContractURI\", [uri]));\n              _context16.next = 21;\n              return this.sendTransaction(\"multicall\", [encoded]);\n\n            case 21:\n              return _context16.abrupt(\"return\", _context16.sent);\n\n            case 22:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function setRoyaltyBps(_x26) {\n      return _setRoyaltyBps.apply(this, arguments);\n    }\n\n    return setRoyaltyBps;\n  }();\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context17.sent;\n              _context17.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function setModuleMetadata(_x27) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }()\n  /**\r\n   * Gets the royalty BPS (basis points) of the contract\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyBps = /*#__PURE__*/function () {\n    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18() {\n      return runtime_1.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.readOnlyContract.royaltyBps();\n\n            case 2:\n              return _context18.abrupt(\"return\", _context18.sent);\n\n            case 3:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function getRoyaltyBps() {\n      return _getRoyaltyBps.apply(this, arguments);\n    }\n\n    return getRoyaltyBps;\n  }()\n  /**\r\n   * Gets the address of the royalty recipient\r\n   *\r\n   * @returns - The royalty BPS\r\n   */\n  ;\n\n  _proto.getRoyaltyRecipientAddress = /*#__PURE__*/function () {\n    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19() {\n      var _metadata$metadata;\n\n      var metadata;\n      return runtime_1.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.getMetadata();\n\n            case 2:\n              metadata = _context19.sent;\n\n              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {\n                _context19.next = 5;\n                break;\n              }\n\n              return _context19.abrupt(\"return\", metadata.metadata.fee_recipient);\n\n            case 5:\n              return _context19.abrupt(\"return\", \"\");\n\n            case 6:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function getRoyaltyRecipientAddress() {\n      return _getRoyaltyRecipientAddress.apply(this, arguments);\n    }\n\n    return getRoyaltyRecipientAddress;\n  }();\n\n  _proto.isTransferRestricted = /*#__PURE__*/function () {\n    var _isTransferRestricted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20() {\n      return runtime_1.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              return _context20.abrupt(\"return\", this.readOnlyContract.transfersRestricted());\n\n            case 1:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function isTransferRestricted() {\n      return _isTransferRestricted.apply(this, arguments);\n    }\n\n    return isTransferRestricted;\n  }();\n\n  _proto.setRestrictedTransfer = /*#__PURE__*/function () {\n    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(restricted) {\n      return runtime_1.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              if (restricted === void 0) {\n                restricted = false;\n              }\n\n              _context21.t0 = this;\n              _context21.t1 = [\"admin\"];\n              _context21.next = 5;\n              return this.getSignerAddress();\n\n            case 5:\n              _context21.t2 = _context21.sent;\n              _context21.next = 8;\n              return _context21.t0.onlyRoles.call(_context21.t0, _context21.t1, _context21.t2);\n\n            case 8:\n              _context21.next = 10;\n              return this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n\n            case 10:\n              return _context21.abrupt(\"return\", _context21.sent);\n\n            case 11:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function setRestrictedTransfer(_x28) {\n      return _setRestrictedTransfer.apply(this, arguments);\n    }\n\n    return setRestrictedTransfer;\n  }()\n  /**\r\n   * `getOwned` is a convenience method for getting all owned tokens\r\n   * for a particular wallet.\r\n   *\r\n   * @param _address - The address to check for token ownership\r\n   * @returns An array of PackMetadataWithBalance objects that are owned by the address\r\n   */\n  ;\n\n  _proto.getOwned = /*#__PURE__*/function () {\n    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(_address) {\n      var _this4 = this;\n\n      var address, maxId, balances, ownedBalances;\n      return runtime_1.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              if (!_address) {\n                _context23.next = 4;\n                break;\n              }\n\n              _context23.t0 = _address;\n              _context23.next = 7;\n              break;\n\n            case 4:\n              _context23.next = 6;\n              return this.getSignerAddress();\n\n            case 6:\n              _context23.t0 = _context23.sent;\n\n            case 7:\n              address = _context23.t0;\n              _context23.next = 10;\n              return this.readOnlyContract.nextTokenId();\n\n            case 10:\n              maxId = _context23.sent;\n              _context23.next = 13;\n              return this.readOnlyContract.balanceOfBatch(Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys()));\n\n            case 13:\n              balances = _context23.sent;\n              ownedBalances = balances.map(function (b, i) {\n                return {\n                  tokenId: i,\n                  balance: b\n                };\n              }).filter(function (b) {\n                return b.balance.gt(0);\n              });\n              _context23.next = 17;\n              return Promise.all(ownedBalances.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(_ref) {\n                  var tokenId, balance, token;\n                  return runtime_1.wrap(function _callee22$(_context22) {\n                    while (1) {\n                      switch (_context22.prev = _context22.next) {\n                        case 0:\n                          tokenId = _ref.tokenId, balance = _ref.balance;\n                          _context22.next = 3;\n                          return _this4.get(tokenId.toString());\n\n                        case 3:\n                          token = _context22.sent;\n                          return _context22.abrupt(\"return\", _extends({}, token, {\n                            ownedByAddress: balance\n                          }));\n\n                        case 5:\n                        case \"end\":\n                          return _context22.stop();\n                      }\n                    }\n                  }, _callee22);\n                }));\n\n                return function (_x30) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 17:\n              return _context23.abrupt(\"return\", _context23.sent);\n\n            case 18:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function getOwned(_x29) {\n      return _getOwned.apply(this, arguments);\n    }\n\n    return getOwned;\n  }();\n\n  return PackModule;\n}(ModuleWithRoles);\n\nPackModule.moduleType = ModuleType.PACK;\nPackModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];\n/**\r\n * Create custom royalty splits to distribute funds.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getSplitsModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar SplitsModule = /*#__PURE__*/function (_Module) {\n  _inheritsLoose(SplitsModule, _Module);\n\n  function SplitsModule() {\n    return _Module.apply(this, arguments) || this;\n  }\n\n  var _proto = SplitsModule.prototype;\n  /**\r\n   * @internal\r\n   */\n\n  _proto.connectContract = function connectContract() {\n    return Royalty__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return SplitsModule.moduleType;\n  };\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getCurrencyMetadata(this.providerOrSigner, this.address);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function get() {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * Get Recipients\r\n   *\r\n   * @remarks Get the data about the shares of every split recipient on the module\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const recipients = await module.getAllRecepients();\r\n   * console.log(recipients);\r\n   * ```\r\n   */\n  ;\n\n  _proto.getAllRecipients = /*#__PURE__*/function () {\n    var _getAllRecipients = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {\n      var recipients, index, totalRecipients, recipientAddress;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              recipients = [];\n              index = BigNumber.from(0);\n              _context2.next = 4;\n              return this.readOnlyContract.payeeCount();\n\n            case 4:\n              totalRecipients = _context2.sent;\n\n            case 5:\n              if (!index.lt(totalRecipients)) {\n                _context2.next = 27;\n                break;\n              }\n\n              _context2.prev = 6;\n              _context2.next = 9;\n              return this.readOnlyContract.payee(index);\n\n            case 9:\n              recipientAddress = _context2.sent;\n              _context2.t0 = recipients;\n              _context2.next = 13;\n              return this.getRecipientSplitPercentage(recipientAddress);\n\n            case 13:\n              _context2.t1 = _context2.sent;\n\n              _context2.t0.push.call(_context2.t0, _context2.t1);\n\n              index = index.add(1);\n              _context2.next = 25;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t2 = _context2[\"catch\"](6);\n\n              if (!(\"method\" in _context2.t2 && _context2.t2[\"method\"].toLowerCase().includes(\"payee(uint256)\"))) {\n                _context2.next = 24;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 27);\n\n            case 24:\n              throw _context2.t2;\n\n            case 25:\n              _context2.next = 5;\n              break;\n\n            case 27:\n              return _context2.abrupt(\"return\", recipients);\n\n            case 28:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[6, 18]]);\n    }));\n\n    function getAllRecipients() {\n      return _getAllRecipients.apply(this, arguments);\n    }\n\n    return getAllRecipients;\n  }()\n  /**\r\n   *\r\n   * Returns all the recipients and their balances in the native currency.\r\n   * @returns A map of recipient addresses to their balances in the native currency.\r\n   *\r\n   */\n  ;\n\n  _proto.balanceOfAllRecipients = /*#__PURE__*/function () {\n    var _balanceOfAllRecipients = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {\n      var recipients, balances, _iterator, _step, recipient;\n\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getAllRecipients();\n\n            case 2:\n              recipients = _context3.sent;\n              balances = {};\n              _iterator = _createForOfIteratorHelperLoose(recipients);\n\n            case 5:\n              if ((_step = _iterator()).done) {\n                _context3.next = 12;\n                break;\n              }\n\n              recipient = _step.value;\n              _context3.next = 9;\n              return this.balanceOf(recipient.address);\n\n            case 9:\n              balances[recipient.address] = _context3.sent;\n\n            case 10:\n              _context3.next = 5;\n              break;\n\n            case 12:\n              return _context3.abrupt(\"return\", balances);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function balanceOfAllRecipients() {\n      return _balanceOfAllRecipients.apply(this, arguments);\n    }\n\n    return balanceOfAllRecipients;\n  }()\n  /**\r\n   *\r\n   * Returns all the recipients and their balances in a non-native currency.\r\n   * @param tokenAddress - The address of the currency to check the balances in.\r\n   * @returns A map of recipient addresses to their balances in the specified currency.\r\n   *\r\n   */\n  ;\n\n  _proto.balanceOfTokenAllRecipients = /*#__PURE__*/function () {\n    var _balanceOfTokenAllRecipients = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(tokenAddress) {\n      var recipients, balances, _iterator2, _step2, recipient;\n\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.getAllRecipients();\n\n            case 2:\n              recipients = _context4.sent;\n              balances = {};\n              _iterator2 = _createForOfIteratorHelperLoose(recipients);\n\n            case 5:\n              if ((_step2 = _iterator2()).done) {\n                _context4.next = 12;\n                break;\n              }\n\n              recipient = _step2.value;\n              _context4.next = 9;\n              return this.balanceOfToken(recipient.address, tokenAddress);\n\n            case 9:\n              balances[recipient.address] = _context4.sent;\n\n            case 10:\n              _context4.next = 5;\n              break;\n\n            case 12:\n              return _context4.abrupt(\"return\", balances);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function balanceOfTokenAllRecipients(_x) {\n      return _balanceOfTokenAllRecipients.apply(this, arguments);\n    }\n\n    return balanceOfTokenAllRecipients;\n  }();\n\n  _proto.getRecipientSplitPercentage = /*#__PURE__*/function () {\n    var _getRecipientSplitPercentage = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address) {\n      var _yield$Promise$all, totalShares, walletsShares;\n\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return Promise.all([this.readOnlyContract.totalShares(), this.readOnlyContract.shares(address)]);\n\n            case 2:\n              _yield$Promise$all = _context5.sent;\n              totalShares = _yield$Promise$all[0];\n              walletsShares = _yield$Promise$all[1];\n              return _context5.abrupt(\"return\", {\n                address: address,\n                splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n              });\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getRecipientSplitPercentage(_x2) {\n      return _getRecipientSplitPercentage.apply(this, arguments);\n    }\n\n    return getRecipientSplitPercentage;\n  }()\n  /**\r\n   * Get Funds\r\n   *\r\n   * @remarks Get the amount of funds in the native currency held by the module thats owed to a specific recipient.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The address to check the funds of\r\n   * const address = \"{{wallet_address}}\";\r\n   * const funds = await module.balanceOf(address);\r\n   * console.log(funds);\r\n   * ```\r\n   */\n  ;\n\n  _proto.balanceOf = /*#__PURE__*/function () {\n    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(address) {\n      var walletBalance, totalReleased, totalReceived;\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.readOnlyContract.provider.getBalance(this.address);\n\n            case 2:\n              walletBalance = _context6.sent;\n              _context6.next = 5;\n              return this.readOnlyContract[\"totalReleased()\"]();\n\n            case 5:\n              totalReleased = _context6.sent;\n              totalReceived = walletBalance.add(totalReleased);\n              _context6.t0 = this;\n              _context6.t1 = address;\n              _context6.t2 = totalReceived;\n              _context6.next = 12;\n              return this.readOnlyContract[\"released(address)\"](address);\n\n            case 12:\n              _context6.t3 = _context6.sent;\n              return _context6.abrupt(\"return\", _context6.t0._pendingPayment.call(_context6.t0, _context6.t1, _context6.t2, _context6.t3));\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function balanceOf(_x3) {\n      return _balanceOf.apply(this, arguments);\n    }\n\n    return balanceOf;\n  }()\n  /**\r\n   * Get Token Funds\r\n   *\r\n   * @remarks Get the amount of funds in the non-native tokens held by the module thats owed to a specific recipient.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The address to check the funds of\r\n   * const address = \"{{wallet_address}}\";\r\n   * // The address of the currency to check the contracts funds of\r\n   * const tokenAddress = \"0x...\"\r\n   * const funds = await module.balanceOfToken(address, tokenAddress);\r\n   * console.log(funds);\r\n   * ```\r\n   */\n  ;\n\n  _proto.balanceOfToken = /*#__PURE__*/function () {\n    var _balanceOfToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(walletAddress, tokenAddress) {\n      var erc20, walletBalance, totalReleased, totalReceived, value;\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);\n              _context7.next = 3;\n              return erc20.balanceOf(this.address);\n\n            case 3:\n              walletBalance = _context7.sent;\n              _context7.next = 6;\n              return this.readOnlyContract[\"totalReleased(address)\"](tokenAddress);\n\n            case 6:\n              totalReleased = _context7.sent;\n              totalReceived = walletBalance.add(totalReleased);\n              _context7.t0 = this;\n              _context7.t1 = walletAddress;\n              _context7.t2 = totalReceived;\n              _context7.next = 13;\n              return this.readOnlyContract[\"released(address,address)\"](tokenAddress, walletAddress);\n\n            case 13:\n              _context7.t3 = _context7.sent;\n              _context7.next = 16;\n              return _context7.t0._pendingPayment.call(_context7.t0, _context7.t1, _context7.t2, _context7.t3);\n\n            case 16:\n              value = _context7.sent;\n              _context7.next = 19;\n              return getCurrencyValue(this.providerOrSigner, tokenAddress, value);\n\n            case 19:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 20:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function balanceOfToken(_x4, _x5) {\n      return _balanceOfToken.apply(this, arguments);\n    }\n\n    return balanceOfToken;\n  }();\n\n  _proto.withdraw = /*#__PURE__*/function () {\n    var _withdraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(address) {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.sendTransaction(\"release(address)\", [address]);\n\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function withdraw(_x6) {\n      return _withdraw.apply(this, arguments);\n    }\n\n    return withdraw;\n  }();\n\n  _proto._pendingPayment = /*#__PURE__*/function () {\n    var _pendingPayment2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(address, totalReceived, alreadyReleased) {\n      var addressReceived, totalRoyaltyAvailable;\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.t0 = totalReceived;\n              _context9.next = 3;\n              return this.readOnlyContract.shares(address);\n\n            case 3:\n              _context9.t1 = _context9.sent;\n              addressReceived = _context9.t0.mul.call(_context9.t0, _context9.t1);\n              _context9.t2 = addressReceived;\n              _context9.next = 8;\n              return this.readOnlyContract.totalShares();\n\n            case 8:\n              _context9.t3 = _context9.sent;\n              totalRoyaltyAvailable = _context9.t2.div.call(_context9.t2, _context9.t3);\n              return _context9.abrupt(\"return\", totalRoyaltyAvailable.sub(alreadyReleased));\n\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function _pendingPayment(_x7, _x8, _x9) {\n      return _pendingPayment2.apply(this, arguments);\n    }\n\n    return _pendingPayment;\n  }();\n\n  _proto.withdrawToken = /*#__PURE__*/function () {\n    var _withdrawToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(walletAddress, tokenAddress) {\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.sendTransaction(\"release(address,address)\", [tokenAddress, walletAddress]);\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function withdrawToken(_x10, _x11) {\n      return _withdrawToken.apply(this, arguments);\n    }\n\n    return withdrawToken;\n  }()\n  /**\r\n   * Distribute Funds\r\n   *\r\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * await module.distribute();\r\n   * ```\r\n   */\n  ;\n\n  _proto.distribute = /*#__PURE__*/function () {\n    var _distribute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.sendTransaction(\"distribute()\", []);\n\n            case 2:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function distribute() {\n      return _distribute.apply(this, arguments);\n    }\n\n    return distribute;\n  }()\n  /**\r\n   * Distribute Funds\r\n   *\r\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The address of the currency to distribute funds\r\n   * const tokenAddress = \"0x...\"\r\n   * await module.distributeToken(tokenAddress);\r\n   * ```\r\n   */\n  ;\n\n  _proto.distributeToken = /*#__PURE__*/function () {\n    var _distributeToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(tokenAddress) {\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.sendTransaction(\"distribute(address)\", [tokenAddress]);\n\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function distributeToken(_x12) {\n      return _distributeToken.apply(this, arguments);\n    }\n\n    return distributeToken;\n  }();\n\n  return SplitsModule;\n}(Module);\n\nSplitsModule.moduleType = ModuleType.SPLITS;\n/**\r\n * Create a decentralized organization for token holders to vote on proposals.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *\r\n * // You can switch out this provider with any wallet or provider setup you like.\r\n * const provider = ethers.Wallet.createRandom();\r\n * const sdk = new ThirdwebSDK(provider);\r\n * const module = sdk.getVoteModule(\"{{module_address}}\");\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar VoteModule = /*#__PURE__*/function (_Module) {\n  _inheritsLoose(VoteModule, _Module);\n\n  function VoteModule() {\n    return _Module.apply(this, arguments) || this;\n  }\n\n  var _proto = VoteModule.prototype;\n  /**\r\n   * @internal\r\n   */\n\n  _proto.connectContract = function connectContract() {\n    return VotingGovernor__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getModuleType = function getModuleType() {\n    return VoteModule.moduleType;\n  };\n\n  _proto.settings = /*#__PURE__*/function () {\n    var _settings = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n      var _yield$Promise$all, votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold, votingTokenMetadata;\n\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Promise.all([this.readOnlyContract.votingDelay(), this.readOnlyContract.votingPeriod(), this.readOnlyContract.token(), this.readOnlyContract.quorumNumerator(), this.readOnlyContract.proposalThreshold()]);\n\n            case 2:\n              _yield$Promise$all = _context.sent;\n              votingDelay = _yield$Promise$all[0];\n              votingPeriod = _yield$Promise$all[1];\n              votingTokenAddress = _yield$Promise$all[2];\n              votingQuorumFraction = _yield$Promise$all[3];\n              proposalTokenThreshold = _yield$Promise$all[4];\n              _context.next = 10;\n              return getCurrencyMetadata(this.providerOrSigner, votingTokenAddress);\n\n            case 10:\n              votingTokenMetadata = _context.sent;\n              return _context.abrupt(\"return\", {\n                votingDelay: votingDelay.toString(),\n                votingPeriod: votingPeriod.toString(),\n                votingTokenAddress: votingTokenAddress,\n                votingTokenMetadata: votingTokenMetadata,\n                votingQuorumFraction: votingQuorumFraction.toString(),\n                proposalTokenThreshold: proposalTokenThreshold.toString()\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function settings() {\n      return _settings.apply(this, arguments);\n    }\n\n    return settings;\n  }()\n  /**\r\n   * Get a proposal by id.\r\n   *\r\n   * @param proposalId - The proposal id to get.\r\n   * @returns - The proposal.\r\n   */\n  ;\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(proposalId) {\n      var all, proposals;\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.ensureExists(proposalId);\n\n            case 2:\n              _context2.next = 4;\n              return this.getAll();\n\n            case 4:\n              all = _context2.sent;\n              proposals = all.filter(function (p) {\n                return p.proposalId.toLowerCase() === proposalId.toLowerCase();\n              });\n\n              if (!(proposals.length === 0)) {\n                _context2.next = 8;\n                break;\n              }\n\n              throw new Error(\"proposal not found\");\n\n            case 8:\n              return _context2.abrupt(\"return\", proposals[0]);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function get(_x) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * Get All Proposals\r\n   *\r\n   * @remarks Get all the proposals in this module.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const proposals = await module.getAll();\r\n   * console.log(proposals);\r\n   * ```\r\n   *\r\n   * @returns - All the proposals in the contract.\r\n   */\n  ;\n\n  _proto.getAll = /*#__PURE__*/function () {\n    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {\n      var _this = this;\n\n      var proposals, results, states, votes, i, p, s, v, e, j;\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.readOnlyContract.queryFilter(this.contract.filters.ProposalCreated());\n\n            case 2:\n              proposals = _context3.sent;\n              results = [];\n              _context3.next = 6;\n              return Promise.all(proposals.map(function (p) {\n                return _this.readOnlyContract.state(p.args.proposalId);\n              }));\n\n            case 6:\n              states = _context3.sent;\n              _context3.next = 9;\n              return Promise.all(proposals.map(function (p) {\n                return _this.readOnlyContract.proposalVotes(p.args.proposalId);\n              }));\n\n            case 9:\n              votes = _context3.sent;\n\n              for (i = 0; i < proposals.length; i++) {\n                p = proposals[i].args;\n                s = states[i];\n                v = [{\n                  type: VoteType.Against,\n                  label: \"Against\",\n                  count: votes[i].againstVotes\n                }, {\n                  type: VoteType.For,\n                  label: \"For\",\n                  count: votes[i].forVotes\n                }, {\n                  type: VoteType.Abstain,\n                  label: \"Abstain\",\n                  count: votes[i].abstainVotes\n                }];\n                e = [];\n\n                for (j = 0; j < p.targets.length; j++) {\n                  e.push({\n                    to: p.targets[j],\n                    value: p[3][j] || 0,\n                    data: p.calldatas[j]\n                  });\n                }\n\n                results.push({\n                  proposalId: p.proposalId.toString(),\n                  proposer: p.proposer,\n                  description: p.description,\n                  startBlock: p.startBlock,\n                  endBlock: p.endBlock,\n                  state: s,\n                  votes: v,\n                  executions: e.map(function (exec) {\n                    return {\n                      toAddress: exec.to,\n                      nativeTokenValue: exec.value,\n                      transactionData: exec.data\n                    };\n                  })\n                });\n              }\n\n              return _context3.abrupt(\"return\", results);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getAll() {\n      return _getAll.apply(this, arguments);\n    }\n\n    return getAll;\n  }()\n  /**\r\n   * Create Proposal\r\n   *\r\n   * @remarks Create a new proposal for token holders to vote on.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The description of the proposal you want to pass\r\n   * const description = \"This is a great proposal - vote for it!\"\r\n   * // You can (optionally) pass in contract calls that will executed when the proposal is executed.\r\n   * const executions = [\r\n   *   {\r\n   *     // The contract you want to make a call to\r\n   *     toAddress: \"0x...\",\r\n   *     // The amount of the native currency to send in this transaction\r\n   *     nativeTokenValue: 0,\r\n   *     // Transaction data that will be executed when the proposal is executed\r\n   *     // This is an example transfer transaction with a token module (which you would need to setup in code)\r\n   *     transactionData: tokenModule.contract.interface.encodeFunctionData(\r\n   *       \"transfer\", [\r\n   *         fromAddress,\r\n   *         amount,\r\n   *       ]\r\n   *     ),\r\n   *   }\r\n   * ]\r\n   *\r\n   * const proposal = await module.propose(description, executions);\r\n   * ```\r\n   *\r\n   * @param description - The description of the proposal.\r\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\r\n   * @returns - The id of the created proposal.\r\n   */\n  ;\n\n  _proto.propose = /*#__PURE__*/function () {\n    var _propose = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(description, executions) {\n      var tos, values, datas, receipt, event;\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!executions) {\n                executions = [{\n                  toAddress: this.address,\n                  nativeTokenValue: 0,\n                  transactionData: \"0x\"\n                }];\n              }\n\n              tos = executions.map(function (p) {\n                return p.toAddress;\n              });\n              values = executions.map(function (p) {\n                return p.nativeTokenValue;\n              });\n              datas = executions.map(function (p) {\n                return p.transactionData;\n              });\n              _context4.next = 6;\n              return this.sendTransaction(\"propose\", [tos, values, datas, description]);\n\n            case 6:\n              receipt = _context4.sent;\n              event = this.parseEventLogs(\"ProposalCreated\", receipt == null ? void 0 : receipt.logs);\n              return _context4.abrupt(\"return\", event.proposalId);\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function propose(_x2, _x3) {\n      return _propose.apply(this, arguments);\n    }\n\n    return propose;\n  }()\n  /**\r\n   * Vote\r\n   *\r\n   * @remarks Vote on an active proposal\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The proposal ID of the proposal you want to vote on\r\n   * const proposalId = \"0\";\r\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\r\n   * const voteType = VoteType.For;\r\n   * // The (optional) reason for the vote\r\n   * const reason = \"I like this proposal!\";\r\n   *\r\n   * await module.vote(proposalId, voteType, reason);\r\n   * ```\r\n   * @param proposalId - The proposal to cast a vote on.\r\n   * @param voteType - The position the voter is taking on their vote.\r\n   * @param reason - (optional) The reason for the vote.\r\n   */\n  ;\n\n  _proto.vote = /*#__PURE__*/function () {\n    var _vote = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(proposalId, voteType, reason) {\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (reason === void 0) {\n                reason = \"\";\n              }\n\n              _context5.next = 3;\n              return this.ensureExists(proposalId);\n\n            case 3:\n              _context5.next = 5;\n              return this.sendTransaction(\"castVoteWithReason\", [proposalId, voteType, reason]);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function vote(_x4, _x5, _x6) {\n      return _vote.apply(this, arguments);\n    }\n\n    return vote;\n  }()\n  /**\r\n   * Check If Wallet Voted\r\n   *\r\n   * @remarks Check if a specified wallet has voted a specific proposal\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The proposal ID of the proposal you want to check\r\n   * const proposalId = \"0\";\r\n   * // The address of the wallet you want to check to see if they voted\r\n   * const address = \"{{wallet_address}}\";\r\n   *\r\n   * await module.hasVoted(proposalId, address);\r\n   * ```\r\n   *\r\n   * @param proposalId - The unique identifier of a proposal .\r\n   * @param account - (optional) wallet account address. Defaults to connected signer.\r\n   * @returns - True if the account has already voted on the proposal.\r\n   */\n  ;\n\n  _proto.hasVoted = /*#__PURE__*/function () {\n    var _hasVoted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(proposalId, account) {\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (account) {\n                _context6.next = 4;\n                break;\n              }\n\n              _context6.next = 3;\n              return this.getSignerAddress();\n\n            case 3:\n              account = _context6.sent;\n\n            case 4:\n              return _context6.abrupt(\"return\", this.readOnlyContract.hasVoted(proposalId, account));\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function hasVoted(_x7, _x8) {\n      return _hasVoted.apply(this, arguments);\n    }\n\n    return hasVoted;\n  }()\n  /**\r\n   * Execute Proposal\r\n   *\r\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The proposal ID ofthe proposal you want to execute\r\n   * const proposalId = \"0\"\r\n   * await module.execute(proposalId);\r\n   * ```\r\n   *\r\n   * @param proposalId - The proposal id to execute.\r\n   */\n  ;\n\n  _proto.execute = /*#__PURE__*/function () {\n    var _execute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(proposalId) {\n      var proposal, tos, values, datas, descriptionHash;\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.ensureExists(proposalId);\n\n            case 2:\n              _context7.next = 4;\n              return this.get(proposalId);\n\n            case 4:\n              proposal = _context7.sent;\n              tos = proposal.executions.map(function (p) {\n                return p.toAddress;\n              });\n              values = proposal.executions.map(function (p) {\n                return p.nativeTokenValue;\n              });\n              datas = proposal.executions.map(function (p) {\n                return p.transactionData;\n              });\n              descriptionHash = ethers.utils.id(proposal.description);\n              _context7.next = 11;\n              return this.sendTransaction(\"execute\", [tos, values, datas, descriptionHash]);\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function execute(_x9) {\n      return _execute.apply(this, arguments);\n    }\n\n    return execute;\n  }()\n  /**\r\n   * Can Execute\r\n   *\r\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The proposal ID of the proposal you want to check\r\n   * const proposalId = \"0\";\r\n   * const canExecute = await module.canExecute(proposalId);\r\n   * console.log(canExecute);\r\n   * ```\r\n   *\r\n   * @param proposalId - The proposal ID to check.\r\n   * @returns - True if the proposal can be executed, false otherwise.\r\n   */\n  ;\n\n  _proto.canExecute = /*#__PURE__*/function () {\n    var _canExecute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(proposalId) {\n      var proposal, tos, values, datas, descriptionHash;\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.ensureExists(proposalId);\n\n            case 2:\n              _context8.next = 4;\n              return this.get(proposalId);\n\n            case 4:\n              proposal = _context8.sent;\n              tos = proposal.executions.map(function (p) {\n                return p.toAddress;\n              });\n              values = proposal.executions.map(function (p) {\n                return p.nativeTokenValue;\n              });\n              datas = proposal.executions.map(function (p) {\n                return p.transactionData;\n              });\n              descriptionHash = ethers.utils.id(proposal.description);\n              _context8.prev = 9;\n              _context8.next = 12;\n              return this.contract.callStatic.execute(tos, values, datas, descriptionHash);\n\n            case 12:\n              return _context8.abrupt(\"return\", true);\n\n            case 15:\n              _context8.prev = 15;\n              _context8.t0 = _context8[\"catch\"](9);\n              return _context8.abrupt(\"return\", false);\n\n            case 18:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this, [[9, 15]]);\n    }));\n\n    function canExecute(_x10) {\n      return _canExecute.apply(this, arguments);\n    }\n\n    return canExecute;\n  }()\n  /**\r\n   * Check the balance of the project wallet in the native token of the chain\r\n   *\r\n   * @returns - The balance of the project in the native token of the chain\r\n   */\n  ;\n\n  _proto.balance = /*#__PURE__*/function () {\n    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {\n      var balance;\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.readOnlyContract.provider.getBalance(this.address);\n\n            case 2:\n              balance = _context9.sent;\n              return _context9.abrupt(\"return\", {\n                name: \"\",\n                symbol: \"\",\n                decimals: 18,\n                value: balance.toString(),\n                displayValue: ethers.utils.formatUnits(balance, 18)\n              });\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function balance() {\n      return _balance.apply(this, arguments);\n    }\n\n    return balance;\n  }()\n  /**\r\n   * Check the balance of the project wallet in a particular\r\n   * ERC20 token contract\r\n   *\r\n   * @returns - The balance of the project in the native token of the chain\r\n   */\n  ;\n\n  _proto.balanceOfToken = /*#__PURE__*/function () {\n    var _balanceOfToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(tokenAddress) {\n      var erc20;\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              erc20 = ERC20__factory.connect(tokenAddress, this.readOnlyContract.provider);\n              _context10.t0 = getCurrencyValue;\n              _context10.t1 = this.providerOrSigner;\n              _context10.t2 = tokenAddress;\n              _context10.next = 6;\n              return erc20.balanceOf(this.address);\n\n            case 6:\n              _context10.t3 = _context10.sent;\n              _context10.next = 9;\n              return (0, _context10.t0)(_context10.t1, _context10.t2, _context10.t3);\n\n            case 9:\n              return _context10.abrupt(\"return\", _context10.sent);\n\n            case 10:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function balanceOfToken(_x11) {\n      return _balanceOfToken.apply(this, arguments);\n    }\n\n    return balanceOfToken;\n  }();\n\n  _proto.setModuleMetadata = /*#__PURE__*/function () {\n    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(metadata) {\n      var uri;\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.sdk.getStorage().uploadMetadata(metadata);\n\n            case 2:\n              uri = _context11.sent;\n              _context11.next = 5;\n              return this.sendTransaction(\"setContractURI\", [uri]);\n\n            case 5:\n              return _context11.abrupt(\"return\", _context11.sent);\n\n            case 6:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function setModuleMetadata(_x12) {\n      return _setModuleMetadata.apply(this, arguments);\n    }\n\n    return setModuleMetadata;\n  }()\n  /**\r\n   * Find a proposal by its id.\r\n   *\r\n   * @internal\r\n   * @param proposalId - Proposal to check for\r\n   */\n  ;\n\n  _proto.ensureExists = /*#__PURE__*/function () {\n    var _ensureExists = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(proposalId) {\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.readOnlyContract.state(proposalId);\n\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function ensureExists(_x13) {\n      return _ensureExists.apply(this, arguments);\n    }\n\n    return ensureExists;\n  }();\n\n  return VoteModule;\n}(Module);\n\nVoteModule.moduleType = ModuleType.VOTE;\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = /*#__PURE__*/require(\"form-data\");\n}\n\nvar thirdwebIpfsServerUrl = \"https://upload.nftlabs.co\";\nvar pinataIpfsUrl = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n\nvar IpfsStorage = /*#__PURE__*/function () {\n  function IpfsStorage(gatewayUrl) {\n    this.gatewayUrl = void 0;\n    this.gatewayUrl = gatewayUrl.replace(/\\/$/, \"\") + \"/\";\n  }\n\n  var _proto = IpfsStorage.prototype;\n\n  _proto.upload = /*#__PURE__*/function () {\n    var _upload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(data, contractAddress, signerAddress) {\n      var cid, _cid, headers, formData, res, body;\n\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof data === \"string\")) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 3;\n              return this.uploadBatch([data], contractAddress, 0);\n\n            case 3:\n              cid = _context.sent;\n              return _context.abrupt(\"return\", cid + \"0\");\n\n            case 7:\n              if (!(data instanceof Buffer)) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 10;\n              return this.uploadBatch([data], contractAddress, 0);\n\n            case 10:\n              _cid = _context.sent;\n              return _context.abrupt(\"return\", _cid + \"0\");\n\n            case 12:\n              // if it's file type, we're doing legacy upload\n              headers = {\n                \"X-App-Name\": \"CONSOLE-TS-SDK-\" + contractAddress,\n                \"X-Public-Address\": signerAddress || \"\"\n              };\n              formData = new FormData();\n              formData.append(\"file\", data);\n              _context.prev = 15;\n              _context.next = 18;\n              return fetch(thirdwebIpfsServerUrl + \"/upload\", {\n                method: \"POST\",\n                body: formData,\n                headers: headers\n              });\n\n            case 18:\n              res = _context.sent;\n\n              if (!(res.status !== 200)) {\n                _context.next = 21;\n                break;\n              }\n\n              throw new Error(\"Failed to upload to IPFS [status code = \" + res.status + \"]\");\n\n            case 21:\n              _context.next = 23;\n              return res.json();\n\n            case 23:\n              body = _context.sent;\n              return _context.abrupt(\"return\", body.IpfsUri);\n\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](15);\n              throw new UploadError(\"Failed to upload to IPFS: \" + _context.t0);\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[15, 27]]);\n    }));\n\n    function upload(_x, _x2, _x3) {\n      return _upload.apply(this, arguments);\n    }\n\n    return upload;\n  }();\n\n  _proto.uploadBatch = /*#__PURE__*/function () {\n    var _uploadBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(files, contractAddress, fileStartNumber) {\n      var _yield$this$uploadBat, cid;\n\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (fileStartNumber === void 0) {\n                fileStartNumber = 0;\n              }\n\n              _context2.next = 3;\n              return this.uploadBatchWithCid(files, contractAddress, fileStartNumber);\n\n            case 3:\n              _yield$this$uploadBat = _context2.sent;\n              cid = _yield$this$uploadBat.cid;\n              return _context2.abrupt(\"return\", \"ipfs://\" + cid + \"/\");\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function uploadBatch(_x4, _x5, _x6) {\n      return _uploadBatch.apply(this, arguments);\n    }\n\n    return uploadBatch;\n  }();\n\n  _proto.uploadBatchWithCid = /*#__PURE__*/function () {\n    var _uploadBatchWithCid = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(files, contractAddress, fileStartNumber) {\n      var token, metadata, data, fileNames, res, body;\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (fileStartNumber === void 0) {\n                fileStartNumber = 0;\n              }\n\n              _context3.next = 3;\n              return this.getUploadToken(contractAddress || \"\");\n\n            case 3:\n              token = _context3.sent;\n              metadata = {\n                name: \"CONSOLE-TS-SDK-\" + contractAddress\n              };\n              data = new FormData();\n              fileNames = [];\n              files.forEach(function (file, i) {\n                var fileName = \"\";\n                var fileData = file; // if it is a file, we passthrough the file extensions,\n                // if it is a buffer or string, the filename would be fileStartNumber + index\n                // if it is a buffer or string with names, the filename would be the name\n\n                if (file instanceof File) {\n                  var extensions = \"\";\n\n                  if (file.name) {\n                    var extensionStartIndex = file.name.lastIndexOf(\".\");\n\n                    if (extensionStartIndex > -1) {\n                      extensions = file.name.substring(extensionStartIndex);\n                    }\n                  }\n\n                  fileName = \"\" + (i + fileStartNumber) + extensions;\n                } else if (file instanceof Buffer || typeof file === \"string\") {\n                  fileName = \"\" + (i + fileStartNumber);\n                } else if (file && file.name && file != null && file.data) {\n                  fileData = file == null ? void 0 : file.data;\n                  fileName = \"\" + file.name;\n                } else {\n                  // default behavior\n                  fileName = \"\" + (i + fileStartNumber);\n                }\n\n                var filepath = \"files/\" + fileName;\n\n                if (fileNames.indexOf(fileName) > -1) {\n                  throw new DuplicateFileNameError(fileName);\n                }\n\n                fileNames.push(fileName);\n\n                if (typeof window === \"undefined\") {\n                  data.append(\"file\", fileData, {\n                    filepath: filepath\n                  });\n                } else {\n                  // browser does blob things, filepath is parsed differently on browser vs node.\n                  // pls pinata?\n                  data.append(\"file\", new Blob([fileData]), filepath);\n                }\n              });\n              data.append(\"pinataMetadata\", JSON.stringify(metadata));\n              _context3.next = 11;\n              return fetch(pinataIpfsUrl, {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \" + token\n                },\n                body: data\n              });\n\n            case 11:\n              res = _context3.sent;\n              _context3.next = 14;\n              return res.json();\n\n            case 14:\n              body = _context3.sent;\n\n              if (res.ok) {\n                _context3.next = 18;\n                break;\n              }\n\n              console.log(body);\n              throw new UploadError(\"Failed to upload files to IPFS\");\n\n            case 18:\n              return _context3.abrupt(\"return\", {\n                cid: body.IpfsHash,\n                fileNames: fileNames\n              });\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function uploadBatchWithCid(_x7, _x8, _x9) {\n      return _uploadBatchWithCid.apply(this, arguments);\n    }\n\n    return uploadBatchWithCid;\n  }();\n\n  _proto.getUploadToken = /*#__PURE__*/function () {\n    var _getUploadToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(contractAddress) {\n      var headers, res, body;\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              headers = {\n                \"X-App-Name\": \"CONSOLE-TS-SDK-\" + contractAddress\n              };\n              _context4.next = 3;\n              return fetch(thirdwebIpfsServerUrl + \"/grant\", {\n                method: \"GET\",\n                headers: headers\n              });\n\n            case 3:\n              res = _context4.sent;\n\n              if (res.ok) {\n                _context4.next = 6;\n                break;\n              }\n\n              throw new FetchError(\"Failed to get upload token\");\n\n            case 6:\n              _context4.next = 8;\n              return res.text();\n\n            case 8:\n              body = _context4.sent;\n              return _context4.abrupt(\"return\", body);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function getUploadToken(_x10) {\n      return _getUploadToken.apply(this, arguments);\n    }\n\n    return getUploadToken;\n  }();\n\n  _proto.get = /*#__PURE__*/function () {\n    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(hash) {\n      var uri, result;\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              uri = hash;\n\n              if (hash) {\n                uri = this.resolveFullUrl(hash);\n              }\n\n              _context5.next = 4;\n              return fetch(uri);\n\n            case 4:\n              result = _context5.sent;\n\n              if (result.ok) {\n                _context5.next = 7;\n                break;\n              }\n\n              throw new Error(\"Status code (!= 200) =\" + result.status);\n\n            case 7:\n              _context5.next = 9;\n              return result.text();\n\n            case 9:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function get(_x11) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n  /**\r\n   * This function recurisely traverses an object and hashes any\r\n   * `Buffer` or `File` objects into the returned map.\r\n   *\r\n   * @param object - The object to recurse over\r\n   * @param files - The running array of files or buffer to upload\r\n   * @returns - The final map of all hashes to files\r\n   */\n  ;\n\n  _proto.buildFilePropertiesMap = function buildFilePropertiesMap(object, files) {\n    var keys = Object.keys(object).sort();\n\n    for (var key in keys) {\n      var val = object[keys[key]];\n      var shouldUpload = val instanceof File || val instanceof Buffer;\n\n      if (shouldUpload) {\n        files.push(val);\n      }\n\n      if (typeof val === \"object\") {\n        this.buildFilePropertiesMap(val, files);\n      }\n    }\n\n    return files;\n  }\n  /**\r\n   * Pre-processes metadata and uploads all file properties\r\n   * to storage in *bulk*, then performs a string replacement of\r\n   * all file properties -> the resulting ipfs uri. This is\r\n   * called internally by `uploadMetadataBatch`.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param metadata - The metadata to recursively process\r\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\r\n   */\n  ;\n\n  _proto.batchUploadProperties = /*#__PURE__*/function () {\n    var _batchUploadProperties = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(metadatas) {\n      var filesToUpload, _yield$this$uploadBat2, cid, fileNames, cids, _iterator, _step, filename, finalMetadata;\n\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(typeof metadatas === \"string\")) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", metadatas);\n\n            case 2:\n              filesToUpload = this.buildFilePropertiesMap(metadatas, []);\n\n              if (!(filesToUpload.length === 0)) {\n                _context6.next = 5;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", metadatas);\n\n            case 5:\n              _context6.next = 7;\n              return this.uploadBatchWithCid(filesToUpload, \"\", 0);\n\n            case 7:\n              _yield$this$uploadBat2 = _context6.sent;\n              cid = _yield$this$uploadBat2.cid;\n              fileNames = _yield$this$uploadBat2.fileNames;\n              cids = []; // recurse ordered array\n\n              for (_iterator = _createForOfIteratorHelperLoose(fileNames); !(_step = _iterator()).done;) {\n                filename = _step.value;\n                cids.push(cid + \"/\" + filename);\n              }\n\n              _context6.next = 14;\n              return this.replaceFilePropertiesWithHashes(metadatas, cids);\n\n            case 14:\n              finalMetadata = _context6.sent;\n              return _context6.abrupt(\"return\", finalMetadata);\n\n            case 16:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function batchUploadProperties(_x12) {\n      return _batchUploadProperties.apply(this, arguments);\n    }\n\n    return batchUploadProperties;\n  }()\n  /**\r\n   * Given a map of file hashes to ipfs uris, this function will hash\r\n   * all properties recursively and replace them with the ipfs uris\r\n   * from the map passed in. If a hash is missing from the map, the function\r\n   * will throw an error.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param object - The object to recursively process\r\n   * @param cids - The array of file hashes to ipfs uris in the recurse order\r\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\r\n   */\n  ;\n\n  _proto.replaceFilePropertiesWithHashes = /*#__PURE__*/function () {\n    var _replaceFilePropertiesWithHashes = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(object, cids) {\n      var keys, key, val, isFile;\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              keys = Object.keys(object).sort();\n              _context7.t0 = runtime_1.keys(keys);\n\n            case 2:\n              if ((_context7.t1 = _context7.t0()).done) {\n                _context7.next = 15;\n                break;\n              }\n\n              key = _context7.t1.value;\n              val = object[keys[key]];\n              isFile = val instanceof File || val instanceof Buffer;\n\n              if (!(typeof val === \"object\" && !isFile)) {\n                _context7.next = 10;\n                break;\n              }\n\n              _context7.next = 9;\n              return this.replaceFilePropertiesWithHashes(val, cids);\n\n            case 9:\n              return _context7.abrupt(\"continue\", 2);\n\n            case 10:\n              if (isFile) {\n                _context7.next = 12;\n                break;\n              }\n\n              return _context7.abrupt(\"continue\", 2);\n\n            case 12:\n              object[keys[key]] = \"ipfs://\" + cids.splice(0, 1)[0];\n              _context7.next = 2;\n              break;\n\n            case 15:\n              return _context7.abrupt(\"return\", object);\n\n            case 16:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function replaceFilePropertiesWithHashes(_x13, _x14) {\n      return _replaceFilePropertiesWithHashes.apply(this, arguments);\n    }\n\n    return replaceFilePropertiesWithHashes;\n  }();\n\n  _proto.uploadMetadata = /*#__PURE__*/function () {\n    var _uploadMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(metadata, contractAddress, _signerAddress) {\n      var _yield$this$uploadMet, metadataUris;\n\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(typeof metadata === \"string\")) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", metadata);\n\n            case 2:\n              _context8.next = 4;\n              return this.uploadMetadataBatch([metadata], contractAddress, 0);\n\n            case 4:\n              _yield$this$uploadMet = _context8.sent;\n              metadataUris = _yield$this$uploadMet.metadataUris;\n              return _context8.abrupt(\"return\", metadataUris[0]);\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function uploadMetadata(_x15, _x16, _x17) {\n      return _uploadMetadata.apply(this, arguments);\n    }\n\n    return uploadMetadata;\n  }()\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.uploadMetadataBatch = /*#__PURE__*/function () {\n    var _uploadMetadataBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(metadatas, contractAddress, startFileNumber) {\n      var metadataObjects, metadataToUpload, _yield$this$uploadBat3, cid, fileNames, baseUri, uris, _iterator2, _step2, metadata;\n\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              // we only want to upload if the metadata object is not a string\n              metadataObjects = metadatas.filter(function (m) {\n                return typeof m !== \"string\";\n              });\n              _context9.next = 3;\n              return this.batchUploadProperties(metadataObjects);\n\n            case 3:\n              metadataToUpload = _context9.sent.map(function (m) {\n                return JSON.stringify(m);\n              });\n\n              if (!(metadataToUpload.length === 0)) {\n                _context9.next = 6;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", {\n                baseUri: \"\",\n                metadataUris: metadatas.filter(function (m) {\n                  return typeof m === \"string\";\n                })\n              });\n\n            case 6:\n              _context9.next = 8;\n              return this.uploadBatchWithCid(metadataToUpload, contractAddress, startFileNumber);\n\n            case 8:\n              _yield$this$uploadBat3 = _context9.sent;\n              cid = _yield$this$uploadBat3.cid;\n              fileNames = _yield$this$uploadBat3.fileNames;\n              baseUri = \"ipfs://\" + cid + \"/\";\n              uris = [];\n\n              for (_iterator2 = _createForOfIteratorHelperLoose(metadatas); !(_step2 = _iterator2()).done;) {\n                metadata = _step2.value;\n\n                if (typeof metadata === \"string\") {\n                  uris.push(metadata);\n                } else {\n                  uris.push(\"\" + baseUri + fileNames.splice(0, 1)[0]);\n                }\n              }\n\n              return _context9.abrupt(\"return\", {\n                baseUri: baseUri,\n                metadataUris: uris\n              });\n\n            case 15:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function uploadMetadataBatch(_x18, _x19, _x20) {\n      return _uploadMetadataBatch.apply(this, arguments);\n    }\n\n    return uploadMetadataBatch;\n  }()\n  /**\r\n   * Resolves the full url for a file using the configured gateway\r\n   *\r\n   * @param ipfsHash - the ipfs:// uri\r\n   * @returns - The fully formed IPFS url with the gateway url\r\n   * @internal\r\n   */\n  ;\n\n  _proto.resolveFullUrl = function resolveFullUrl(ipfsHash) {\n    if (typeof ipfsHash !== \"string\") {\n      return \"\";\n    }\n\n    return ipfsHash && ipfsHash.toLowerCase().includes(\"ipfs://\") ? ipfsHash.replace(\"ipfs://\", this.gatewayUrl) : ipfsHash;\n  };\n\n  _proto.canResolve = function canResolve(uri) {\n    var resolved = this.resolveFullUrl(uri);\n    return resolved.toLowerCase() !== uri.toLowerCase();\n  };\n\n  return IpfsStorage;\n}();\n/**\r\n * The RegistryModule. This should always be created via `getRegistryModule()` on the main SDK.\r\n * @internal\r\n */\n\n\nvar RegistryModule = /*#__PURE__*/function (_Module) {\n  _inheritsLoose(RegistryModule, _Module);\n\n  function RegistryModule() {\n    return _Module.apply(this, arguments) || this;\n  }\n\n  var _proto = RegistryModule.prototype;\n  /**\r\n   * @internal\r\n   */\n\n  _proto.connectContract = function connectContract() {\n    return Registry__factory.connect(this.address, this.providerOrSigner);\n  }\n  /**\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getProtocolContracts = /*#__PURE__*/function () {\n    var _getProtocolContracts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(address) {\n      var _this = this;\n\n      var deployer, maxVersion, versions, addresses, metadatas;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = address;\n\n              if (_context.t0) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return this.getSignerAddress();\n\n            case 4:\n              _context.t0 = _context.sent;\n\n            case 5:\n              deployer = _context.t0;\n              _context.next = 8;\n              return this.readOnlyContract.getProtocolControlCount(deployer);\n\n            case 8:\n              maxVersion = _context.sent;\n              versions = Array.from(Array(maxVersion.toNumber()).keys()).reverse();\n              _context.next = 12;\n              return Promise.all(versions.map(function (v) {\n                return _this.readOnlyContract.getProtocolControl(deployer, (v + 1).toString());\n              }));\n\n            case 12:\n              addresses = _context.sent;\n              _context.next = 15;\n              return Promise.all(addresses.map(function (addr) {\n                return getContractMetadata(_this.providerOrSigner, addr, _this.sdk.getStorage())[\"catch\"](function () {\n                  return undefined;\n                });\n              }));\n\n            case 15:\n              metadatas = _context.sent;\n              return _context.abrupt(\"return\", versions.map(function (v, i) {\n                return {\n                  address: addresses[i],\n                  version: v,\n                  metadata: metadatas[i]\n                };\n              }));\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getProtocolContracts(_x) {\n      return _getProtocolContracts.apply(this, arguments);\n    }\n\n    return getProtocolContracts;\n  }();\n\n  return RegistryModule;\n}(Module);\n/**\r\n * The entrypoint to the SDK.\r\n * @public\r\n */\n\n\nvar ThirdwebSDK = /*#__PURE__*/function () {\n  function ThirdwebSDK(providerOrNetwork, opts) {\n    this.options = void 0;\n    this.defaultOptions = {\n      ipfsGatewayUrl: \"https://cloudflare-ipfs.com/ipfs/\",\n      registryContractAddress: \"\",\n      maxGasPriceInGwei: 300,\n      gasSpeed: \"fastest\",\n      transactionRelayerUrl: \"\",\n      transactionRelayerSendFunction: this.defaultRelayerSendFunction.bind(this),\n      transactionRelayerForwarderAddress: FORWARDER_ADDRESS,\n      readOnlyRpcUrl: \"\",\n      gasless: {\n        biconomy: {\n          apiId: \"\",\n          apiKey: \"\",\n          deadlineSeconds: 3600,\n          gasTier: \"RAPID\"\n        }\n      },\n      gaslessSendFunction: this.defaultGaslessSendFunction.bind(this)\n    };\n    this.modules = new Map();\n    this.providerOrSigner = void 0;\n    this._signer = null;\n    this._jsonConvert = new JsonConvert();\n    this.storage = void 0;\n    this.event = new EventEmitter2();\n    this._registry = null;\n    this.providerOrSigner = this.setProviderOrSigner(providerOrNetwork);\n    this.options = _extends({}, this.defaultOptions, opts);\n    this.storage = new IpfsStorage(this.options.ipfsGatewayUrl);\n  }\n\n  var _proto = ThirdwebSDK.prototype;\n\n  _proto.updateModuleSigners = function updateModuleSigners() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.modules), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          _module = _step$value[1];\n\n      if (this.isReadOnly()) {\n        _module.clearSigner();\n      }\n\n      _module.setProviderOrSigner(this.providerOrSigner);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    var provider = Provider.isProvider(this.providerOrSigner) ? this.providerOrSigner : this.providerOrSigner.provider;\n    return provider;\n  };\n\n  _proto.getSigner = function getSigner() {\n    if (Signer.isSigner(this.providerOrSigner)) {\n      return this.providerOrSigner;\n    }\n\n    return undefined;\n  };\n\n  _proto.getChainID = /*#__PURE__*/function () {\n    var _getChainID = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n      var provider, _yield$provider$getNe, chainId;\n\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              provider = this.getProvider();\n              !provider ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"getRegistryAddress() -- No Provider\") : invariant(false) : void 0;\n              _context.next = 4;\n              return provider.getNetwork();\n\n            case 4:\n              _yield$provider$getNe = _context.sent;\n              chainId = _yield$provider$getNe.chainId;\n              return _context.abrupt(\"return\", chainId);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getChainID() {\n      return _getChainID.apply(this, arguments);\n    }\n\n    return getChainID;\n  }();\n\n  _proto.getRegistryAddress = /*#__PURE__*/function () {\n    var _getRegistryAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.options.registryContractAddress) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", this.options.registryContractAddress);\n\n            case 2:\n              _context2.t0 = getContractAddressByChainId;\n              _context2.next = 5;\n              return this.getChainID();\n\n            case 5:\n              _context2.t1 = _context2.sent;\n              return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getRegistryAddress() {\n      return _getRegistryAddress.apply(this, arguments);\n    }\n\n    return getRegistryAddress;\n  }()\n  /**\r\n   *\r\n   * @param address - The contract address of the given Registry module.\r\n   * @returns The Registry Module.\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getRegistryModule = /*#__PURE__*/function () {\n    var _getRegistryModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {\n      var address;\n      return runtime_1.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getRegistryAddress();\n\n            case 2:\n              address = _context3.sent;\n              !address ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"getRegistryModule() -- No Address\") : invariant(false) : void 0;\n              return _context3.abrupt(\"return\", this.registry = this.getOrCreateModule(address, RegistryModule));\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getRegistryModule() {\n      return _getRegistryModule.apply(this, arguments);\n    }\n\n    return getRegistryModule;\n  }();\n\n  _proto.getOrCreateModule = function getOrCreateModule(address, _Module) {\n    if (this.modules.has(address)) {\n      return this.modules.get(address);\n    }\n\n    var _newModule = new _Module(this.providerOrSigner, address, this.options, this);\n\n    this.modules.set(address, _newModule);\n    return _newModule;\n  }\n  /**\r\n   * you should not need this unless you are creating new modules\r\n   * @returns the active registry module forwarder address\r\n   * @internal\r\n   */\n  ;\n\n  _proto.getForwarderAddress = /*#__PURE__*/function () {\n    var _getForwarderAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {\n      return runtime_1.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = this.registry;\n\n              if (_context4.t0) {\n                _context4.next = 5;\n                break;\n              }\n\n              _context4.next = 4;\n              return this.getRegistryModule();\n\n            case 4:\n              _context4.t0 = _context4.sent;\n\n            case 5:\n              _context4.next = 7;\n              return _context4.t0.readOnlyContract.forwarder();\n\n            case 7:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function getForwarderAddress() {\n      return _getForwarderAddress.apply(this, arguments);\n    }\n\n    return getForwarderAddress;\n  }()\n  /**\r\n   * Call this to get the current apps.\r\n   * @returns All currently registered apps for the connected wallet\r\n   */\n  ;\n\n  _proto.getApps = /*#__PURE__*/function () {\n    var _getApps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address) {\n      return runtime_1.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = this.registry;\n\n              if (_context5.t0) {\n                _context5.next = 5;\n                break;\n              }\n\n              _context5.next = 4;\n              return this.getRegistryModule();\n\n            case 4:\n              _context5.t0 = _context5.sent;\n\n            case 5:\n              return _context5.abrupt(\"return\", _context5.t0.getProtocolContracts(address));\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function getApps(_x) {\n      return _getApps.apply(this, arguments);\n    }\n\n    return getApps;\n  }()\n  /**\r\n   * Call this to create a new app\r\n   * @param metadata - metadata URI or a JSON object\r\n   * @returns The transaction receipt\r\n   */\n  ;\n\n  _proto.createApp = /*#__PURE__*/function () {\n    var _createApp = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(metadata) {\n      var _this$signer;\n\n      var registryContract, gasPrice, txOpts, uri, txn;\n      return runtime_1.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.t0 = this.registry;\n\n              if (_context6.t0) {\n                _context6.next = 5;\n                break;\n              }\n\n              _context6.next = 4;\n              return this.getRegistryModule();\n\n            case 4:\n              _context6.t0 = _context6.sent;\n\n            case 5:\n              registryContract = _context6.t0.contract;\n              _context6.next = 8;\n              return this.getGasPrice();\n\n            case 8:\n              gasPrice = _context6.sent;\n              txOpts = {}; // could technically be `0` so simple falsy check does not suffice\n\n              if (typeof gasPrice === \"number\") {\n                txOpts.gasPrice = parseUnits(gasPrice.toString(), \"gwei\");\n              }\n\n              _context6.t1 = uploadMetadata;\n              _context6.t2 = metadata;\n              _context6.t3 = registryContract.address;\n              _context6.next = 16;\n              return (_this$signer = this.signer) == null ? void 0 : _this$signer.getAddress();\n\n            case 16:\n              _context6.t4 = _context6.sent;\n\n              if (_context6.t4) {\n                _context6.next = 19;\n                break;\n              }\n\n              _context6.t4 = undefined;\n\n            case 19:\n              _context6.t5 = _context6.t4;\n              _context6.next = 22;\n              return (0, _context6.t1)(_context6.t2, _context6.t3, _context6.t5);\n\n            case 22:\n              uri = _context6.sent;\n              _context6.next = 25;\n              return registryContract.deployProtocol(uri, txOpts);\n\n            case 25:\n              txn = _context6.sent;\n              _context6.next = 28;\n              return txn.wait();\n\n            case 28:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 29:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function createApp(_x2) {\n      return _createApp.apply(this, arguments);\n    }\n\n    return createApp;\n  }()\n  /**\r\n   *\r\n   * @param speed - what speed to prefer, default: \"fastest\"\r\n   * @param maxGas - how much gas to use at most, default: 300\r\n   * @returns the optiomal gas price\r\n   */\n  ;\n\n  _proto.getGasPrice = /*#__PURE__*/function () {\n    var _getGasPrice = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(speed, maxGasGwei) {\n      var _speed, _maxGas;\n\n      return runtime_1.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _speed = speed ? speed : this.options.gasSpeed;\n              _maxGas = maxGasGwei ? maxGasGwei : this.options.maxGasPriceInGwei;\n              _context7.t0 = getGasPriceForChain;\n              _context7.next = 5;\n              return this.getChainID();\n\n            case 5:\n              _context7.t1 = _context7.sent;\n              _context7.t2 = _speed;\n              _context7.t3 = _maxGas;\n              _context7.next = 10;\n              return (0, _context7.t0)(_context7.t1, _context7.t2, _context7.t3);\n\n            case 10:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function getGasPrice(_x3, _x4) {\n      return _getGasPrice.apply(this, arguments);\n    }\n\n    return getGasPrice;\n  }()\n  /**\r\n   *\r\n   * @param providerOrSignerOrNetwork - A valid \"ethers\" Provider, Signer or a Network address to create a Provider with.\r\n   * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.\r\n   */\n  ;\n\n  _proto.setProviderOrSigner = function setProviderOrSigner(providerOrSignerOrNetwork) {\n    if (Provider.isProvider(providerOrSignerOrNetwork) || Signer.isSigner(providerOrSignerOrNetwork)) {\n      // sdk instantiated with a provider / signer\n      this.providerOrSigner = providerOrSignerOrNetwork;\n    } else {\n      // sdk instantiated with a network name / network url\n      this.providerOrSigner = ethers.getDefaultProvider(providerOrSignerOrNetwork);\n    } // if we're setting a signer then also update that\n\n\n    if (Signer.isSigner(providerOrSignerOrNetwork)) {\n      this.signer = providerOrSignerOrNetwork;\n    } else {\n      this.signer = null;\n    }\n\n    this.updateModuleSigners();\n    return this.providerOrSigner;\n  }\n  /**\r\n   *\r\n   * @public\r\n   * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid \"Signer.\")\r\n   */\n  ;\n\n  _proto.isReadOnly = function isReadOnly() {\n    return !Signer.isSigner(this.signer);\n  }\n  /**\r\n   * @public\r\n   * @returns The contract metadata for the given contract address.\r\n   */\n  ;\n\n  _proto.getContractMetadata = /*#__PURE__*/function () {\n    var _getContractMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(address) {\n      return runtime_1.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.t0 = _extends;\n              _context8.t1 = {};\n              _context8.next = 4;\n              return getContractMetadata(this.providerOrSigner, address, this.getStorage(), true);\n\n            case 4:\n              _context8.t2 = _context8.sent;\n              _context8.t3 = {\n                address: address\n              };\n              return _context8.abrupt(\"return\", (0, _context8.t0)(_context8.t1, _context8.t2, _context8.t3));\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function getContractMetadata$1(_x5) {\n      return _getContractMetadata2.apply(this, arguments);\n    }\n\n    return getContractMetadata$1;\n  }()\n  /**\r\n   *\r\n   * @param address - The contract address of the given App module.\r\n   * @returns The App Module.\r\n   */\n  ;\n\n  _proto.getAppModule = function getAppModule(address) {\n    return this.getOrCreateModule(address, AppModule);\n  }\n  /**\r\n   *\r\n   * @param address - The contract address of the given NFT module.\r\n   * @returns The NFT Module.\r\n   */\n  ;\n\n  _proto.getNFTModule = function getNFTModule(address) {\n    return this.getOrCreateModule(address, NFTModule);\n  }\n  /**\r\n   *\r\n   * @param address - The contract address of the given Collection module.\r\n   * @returns The Bundle Module.\r\n   * @deprecated Use the new {@link ThirdwebSDK.getBundleModule} function instead.\r\n   */\n  ;\n\n  _proto.getCollectionModule = function getCollectionModule(address) {\n    return this.getBundleModule(address);\n  }\n  /**\r\n   *\r\n   * @param address - The contract address of the given Bundle module.\r\n   * @returns The Bundle Module.\r\n   */\n  ;\n\n  _proto.getBundleModule = function getBundleModule(address) {\n    return this.getOrCreateModule(address, BundleModule);\n  }\n  /**\r\n   *\r\n   * @param address - The contract address of the given Pack module.\r\n   * @returns The Pack Module.\r\n   */\n  ;\n\n  _proto.getPackModule = function getPackModule(address) {\n    return this.getOrCreateModule(address, PackModule);\n  }\n  /**\r\n   *\r\n   * @param address - The contract address of the given Currency module.\r\n   * @returns The Currency Module.\r\n   *\r\n   * @deprecated - see {@link TokenModule}\r\n   */\n  ;\n\n  _proto.getCurrencyModule = function getCurrencyModule(address) {\n    return this.getOrCreateModule(address, CurrencyModule);\n  }\n  /**\r\n   *\r\n   * @param address - The contract address of the given Token module.\r\n   * @returns The Token Module.\r\n   */\n  ;\n\n  _proto.getTokenModule = function getTokenModule(address) {\n    return this.getOrCreateModule(address, TokenModule);\n  }\n  /**\r\n   * @alpha\r\n   *\r\n   * @param address - The contract address of the given Datastore module.\r\n   * @returns The Datastore Module.\r\n   */\n  ;\n\n  _proto.getDatastoreModule = function getDatastoreModule(address) {\n    return this.getOrCreateModule(address, DatastoreModule);\n  }\n  /**\r\n   *\r\n   * @param address - The contract address of the given Market module.\r\n   * @returns The Market Module.\r\n   */\n  ;\n\n  _proto.getMarketModule = function getMarketModule(address) {\n    return this.getOrCreateModule(address, MarketModule);\n  }\n  /**\r\n   *\r\n   * @param address - The contract address of the given Drop module.\r\n   * @returns The Drop Module.\r\n   */\n  ;\n\n  _proto.getDropModule = function getDropModule(address) {\n    return this.getOrCreateModule(address, DropModule);\n  }\n  /**\r\n   * @beta\r\n   *\r\n   * @param address - The contract address of the given BundleDrop module.\r\n   * @returns The Drop Module.\r\n   */\n  ;\n\n  _proto.getBundleDropModule = function getBundleDropModule(address) {\n    return this.getOrCreateModule(address, BundleDropModule);\n  }\n  /**\r\n   * @beta\r\n   *\r\n   * @param address - The contract address of the given Marketplace module.\r\n   * @returns The Marketplace Module.\r\n   */\n  ;\n\n  _proto.getMarketplaceModule = function getMarketplaceModule(address) {\n    return this.getOrCreateModule(address, MarketplaceModule);\n  }\n  /**\r\n   * @alpha\r\n   *\r\n   * @param address - The contract address of the given Royalty module.\r\n   * @returns The Splits Module.\r\n   */\n  ;\n\n  _proto.getSplitsModule = function getSplitsModule(address) {\n    return this.getOrCreateModule(address, SplitsModule);\n  }\n  /**\r\n   * @alpha\r\n   *\r\n   * @param address - The contract address of the given Vote module.\r\n   * @returns The Vote Module.\r\n   */\n  ;\n\n  _proto.getVoteModule = function getVoteModule(address) {\n    return this.getOrCreateModule(address, VoteModule);\n  }\n  /**\r\n   * @alpha\r\n   *\r\n   * @param address - The contract address of the given BundleSignature module.\r\n   * @returns The BundleSignature Module.\r\n   */\n  ;\n\n  _proto.getBundleSignatureModule = function getBundleSignatureModule(address) {\n    return this.getOrCreateModule(address, SignatureMint1155Module);\n  }\n  /**\r\n   * Used for SDK that requires js bridging like Unity SDK.\r\n   * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.\r\n   *\r\n   * @internal\r\n   * @param route - sdk execution route\r\n   * @param payload - request arguments for the function\r\n   * @returns\r\n   */\n  ;\n\n  _proto.invokeRoute = function invokeRoute(route, payload) {\n    var parts = route.split(\".\");\n\n    if (parts.length > 0 && parts[0] === \"thirdweb\") {\n      if (parts.length === 4) {\n        var _this$getModuleByName; // thirdweb.module_name.address.function_name\n\n\n        var moduleName = parts[1];\n        var moduleAddress = parts[2];\n        var funcName = parts[3];\n        return (_this$getModuleByName = this.getModuleByName(moduleName, moduleAddress))[funcName].apply(_this$getModuleByName, payload.arguments || []);\n      } else if (parts.length === 3) {\n        // reserved for: thirdweb.bridge.function_name\n        throw new Error(\"reserved for thirdweb.bridge.function_name\");\n      } else if (parts.length === 2) {\n        // main sdk functions: thirdweb.function_name\n        var _funcName = parts[1];\n        return this[_funcName].apply(this, payload.arguments || []);\n      }\n    }\n\n    throw new Error(\"uknown route\");\n  } // used for invoke route for unity sdk.\n  ;\n\n  _proto.getModuleByName = function getModuleByName(name, address) {\n    if (name === \"currency\") {\n      return this.getCurrencyModule(address);\n    } else if (name === \"nft\") {\n      return this.getNFTModule(address);\n    } else if (name === \"market\") {\n      return this.getMarketModule(address);\n    } else if (name === \"bundle\" || name === \"collection\") {\n      return this.getCollectionModule(address);\n    } else if (name === \"drop\") {\n      return this.getDropModule(address);\n    } else if (name === \"splits\") {\n      return this.getSplitsModule(address);\n    } else if (name === \"pack\") {\n      return this.getPackModule(address);\n    } else if (name === \"datastore\") {\n      return this.getDatastoreModule(address);\n    } else if (name === \"app\" || name === \"project\") {\n      return this.getAppModule(address);\n    }\n\n    throw new Error(\"unsupported module\");\n  };\n\n  _proto.defaultGaslessSendFunction = /*#__PURE__*/function () {\n    var _defaultGaslessSendFunction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(contract, transaction) {\n      return runtime_1.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(this.options.gasless.biconomy.apiId && this.options.gasless.biconomy.apiKey)) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", this.biconomySendFunction(contract, transaction));\n\n            case 2:\n              return _context9.abrupt(\"return\", this.defenderSendFunction(contract, transaction));\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function defaultGaslessSendFunction(_x6, _x7) {\n      return _defaultGaslessSendFunction.apply(this, arguments);\n    }\n\n    return defaultGaslessSendFunction;\n  }();\n\n  _proto.biconomySendFunction = /*#__PURE__*/function () {\n    var _biconomySendFunction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(_contract, transaction) {\n      var _this$options$gasless;\n\n      var signer, provider, forwarder, batchId, batchNonce, request, hashToSign, signature, response, resp;\n      return runtime_1.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              signer = this.getSigner();\n              provider = this.getProvider();\n              !(signer && provider) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"signer and provider must be set\") : invariant(false) : void 0;\n              forwarder = new ethers.Contract(getContractAddressByChainId(transaction.chainId, \"biconomyForwarder\"), BiconomyForwarderAbi, provider);\n              batchId = 0;\n              _context10.next = 7;\n              return getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from, batchId]);\n\n            case 7:\n              batchNonce = _context10.sent;\n              request = {\n                from: transaction.from,\n                to: transaction.to,\n                token: ethers.constants.AddressZero,\n                txGas: transaction.gasLimit.toNumber(),\n                tokenGasPrice: \"0\",\n                batchId: batchId,\n                batchNonce: batchNonce.toNumber(),\n                deadline: Math.floor(Date.now() / 1000 + ((_this$options$gasless = this.options.gasless.biconomy.deadlineSeconds) != null ? _this$options$gasless : 3600)),\n                data: transaction.data\n              };\n              hashToSign = ethers.utils.arrayify(ethers.utils.solidityKeccak256([\"address\", \"address\", \"address\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"bytes32\"], [request.from, request.to, request.token, request.txGas, request.tokenGasPrice, request.batchId, request.batchNonce, request.deadline, ethers.utils.keccak256(request.data)]));\n              this.event.emit(EventType.Signature, {\n                status: \"submitted\",\n                message: hashToSign,\n                signature: \"\"\n              });\n              _context10.next = 13;\n              return signer.signMessage(hashToSign);\n\n            case 13:\n              signature = _context10.sent;\n              this.event.emit(EventType.Signature, {\n                status: \"completed\",\n                message: hashToSign,\n                signature: signature\n              });\n              _context10.next = 17;\n              return fetch(this.options.transactionRelayerUrl || \"https://api.biconomy.io/api/v2/meta-tx/native\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  from: transaction.from,\n                  apiId: this.options.gasless.biconomy.apiId,\n                  params: [request, signature],\n                  to: transaction.to,\n                  gasLimit: transaction.gasLimit.toHexString(),\n                  gasType: this.options.gasless.biconomy.gasTier\n                }),\n                headers: {\n                  \"x-api-key\": this.options.gasless.biconomy.apiKey,\n                  \"Content-Type\": \"application/json;charset=utf-8\"\n                }\n              });\n\n            case 17:\n              response = _context10.sent;\n\n              if (!response.ok) {\n                _context10.next = 25;\n                break;\n              }\n\n              _context10.next = 21;\n              return response.json();\n\n            case 21:\n              resp = _context10.sent;\n\n              if (resp.txHash) {\n                _context10.next = 24;\n                break;\n              }\n\n              throw new Error(\"relay transaction failed: \" + (resp.log || resp.message));\n\n            case 24:\n              return _context10.abrupt(\"return\", resp.txHash);\n\n            case 25:\n              throw new Error(\"relay transaction failed\");\n\n            case 26:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function biconomySendFunction(_x8, _x9) {\n      return _biconomySendFunction.apply(this, arguments);\n    }\n\n    return biconomySendFunction;\n  }();\n\n  _proto.defenderSendFunction = /*#__PURE__*/function () {\n    var _defenderSendFunction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(contract, transaction) {\n      var signer, provider, forwarderAddress, forwarder, nonce, domain, types, message, signature, spender, amount, _yield$signEIP2612Per, permit, sig, _ethers$utils$splitSi, r, s, v, _yield$signTypedData, _sig, txHash;\n\n      return runtime_1.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              signer = this.getSigner();\n              provider = this.getProvider();\n              !signer ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"provider is not set\") : invariant(false) : void 0;\n              !provider ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"provider is not set\") : invariant(false) : void 0;\n              forwarderAddress = this.options.transactionRelayerForwarderAddress;\n              forwarder = Forwarder__factory.connect(forwarderAddress, provider);\n              _context11.next = 8;\n              return getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from]);\n\n            case 8:\n              nonce = _context11.sent;\n              domain = {\n                name: \"GSNv2 Forwarder\",\n                version: \"0.0.1\",\n                chainId: transaction.chainId,\n                verifyingContract: forwarderAddress\n              };\n              types = {\n                ForwardRequest: ForwardRequest\n              };\n              message = {\n                from: transaction.from,\n                to: transaction.to,\n                value: BigNumber.from(0).toString(),\n                gas: BigNumber.from(transaction.gasLimit).toString(),\n                nonce: BigNumber.from(nonce).toString(),\n                data: transaction.data\n              };\n              this.event.emit(EventType.Signature, {\n                status: \"submitted\",\n                message: message,\n                signature: \"\"\n              }); // if the executing function is \"approve\" and matches with erc20 approve signature\n              // and if the token supports permit, then we use permit for gasless instead of approve.\n\n              if (!(transaction.functionName === \"approve\" && transaction.functionArgs.length === 2)) {\n                _context11.next = 26;\n                break;\n              }\n\n              spender = transaction.functionArgs[0];\n              amount = transaction.functionArgs[1]; // TODO: support DAI permit by signDAIPermit\n\n              _context11.next = 18;\n              return signEIP2612Permit(signer, contract.address, transaction.from, spender, amount);\n\n            case 18:\n              _yield$signEIP2612Per = _context11.sent;\n              permit = _yield$signEIP2612Per.message;\n              sig = _yield$signEIP2612Per.signature;\n              _ethers$utils$splitSi = ethers.utils.splitSignature(sig), r = _ethers$utils$splitSi.r, s = _ethers$utils$splitSi.s, v = _ethers$utils$splitSi.v;\n              message = {\n                to: contract.address,\n                owner: permit.owner,\n                spender: permit.spender,\n                value: BigNumber.from(permit.value).toString(),\n                nonce: BigNumber.from(permit.nonce).toString(),\n                deadline: BigNumber.from(permit.deadline).toString(),\n                r: r,\n                s: s,\n                v: v\n              };\n              signature = sig;\n              _context11.next = 31;\n              break;\n\n            case 26:\n              _context11.next = 28;\n              return signTypedData(signer, domain, types, message);\n\n            case 28:\n              _yield$signTypedData = _context11.sent;\n              _sig = _yield$signTypedData.signature;\n              signature = _sig;\n\n            case 31:\n              this.event.emit(EventType.Signature, {\n                status: \"completed\",\n                message: message,\n                signature: signature\n              }); // TODO: isolate http request logic in here. `transactionRelayerSendFunction` is deprecated using it for backward compatibility reasons.\n\n              _context11.next = 34;\n              return this.options.transactionRelayerSendFunction(message, signature);\n\n            case 34:\n              txHash = _context11.sent;\n              return _context11.abrupt(\"return\", txHash);\n\n            case 36:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function defenderSendFunction(_x10, _x11) {\n      return _defenderSendFunction.apply(this, arguments);\n    }\n\n    return defenderSendFunction;\n  }();\n\n  _proto.defaultRelayerSendFunction = /*#__PURE__*/function () {\n    var _defaultRelayerSendFunction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(message, signature) {\n      var messageType, body, response, resp, result;\n      return runtime_1.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              messageType = \"forward\"; // if has owner property then it's permit :)\n\n              if (message != null && message.owner) {\n                messageType = \"permit\";\n              }\n\n              body = JSON.stringify({\n                request: message,\n                signature: signature,\n                type: messageType\n              });\n              _context12.next = 5;\n              return fetch(this.options.transactionRelayerUrl, {\n                method: \"POST\",\n                body: body\n              });\n\n            case 5:\n              response = _context12.sent;\n\n              if (!response.ok) {\n                _context12.next = 12;\n                break;\n              }\n\n              _context12.next = 9;\n              return response.json();\n\n            case 9:\n              resp = _context12.sent;\n              result = JSON.parse(resp.result);\n              return _context12.abrupt(\"return\", result.txHash);\n\n            case 12:\n              throw new Error(\"relay transaction failed\");\n\n            case 13:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function defaultRelayerSendFunction(_x12, _x13) {\n      return _defaultRelayerSendFunction.apply(this, arguments);\n    }\n\n    return defaultRelayerSendFunction;\n  }();\n\n  _proto.createSnapshot = /*#__PURE__*/function () {\n    var _createSnapshot = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(leafs) {\n      var hasDuplicates, _yield$import, keccak256, hashedLeafs, tree, snapshot, serializedSnapshot, uri;\n\n      return runtime_1.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              hasDuplicates = new Set(leafs).size < leafs.length;\n\n              if (!hasDuplicates) {\n                _context13.next = 3;\n                break;\n              }\n\n              throw new DuplicateLeafsError();\n\n            case 3:\n              _context13.next = 5;\n              return import('keccak256');\n\n            case 5:\n              _yield$import = _context13.sent;\n              keccak256 = _yield$import[\"default\"];\n              hashedLeafs = leafs.map(function (l) {\n                return keccak256(l);\n              });\n              tree = new MerkleTree(hashedLeafs, keccak256, {\n                sort: true\n              });\n              snapshot = {\n                merkleRoot: tree.getHexRoot(),\n                claims: leafs.map(function (l) {\n                  var proof = tree.getHexProof(keccak256(l));\n                  return {\n                    address: l,\n                    proof: proof\n                  };\n                })\n              };\n              serializedSnapshot = JSON.stringify(this._jsonConvert.serializeObject(snapshot, Snapshot));\n              _context13.next = 13;\n              return this.storage.upload(serializedSnapshot);\n\n            case 13:\n              uri = _context13.sent;\n              return _context13.abrupt(\"return\", {\n                merkleRoot: tree.getHexRoot(),\n                snapshotUri: uri,\n                snapshot: snapshot\n              });\n\n            case 15:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function createSnapshot(_x14) {\n      return _createSnapshot.apply(this, arguments);\n    }\n\n    return createSnapshot;\n  }()\n  /**\r\n   * Accessor for the storage instance used by the SDK\r\n   *\r\n   * @returns - The Storage instance.\r\n   */\n  ;\n\n  _proto.getStorage = function getStorage() {\n    return this.storage;\n  }\n  /**\r\n   * Allows you to override the storage used across the SDK.\r\n   *\r\n   * @param storage - The Storage instance to use.\r\n   */\n  ;\n\n  _proto.overrideStorage = function overrideStorage(storage) {\n    this.storage = storage;\n  };\n\n  _createClass(ThirdwebSDK, [{\n    key: \"signer\",\n    get: // default options\n\n    /**\r\n     * The active Signer, you should not need to access this unless you are deploying new modules.\r\n     * @internal\r\n     */\n    function get() {\n      return this._signer;\n    },\n    set: function set(value) {\n      this._signer = value;\n    }\n  }, {\n    key: \"registry\",\n    get: function get() {\n      return this._registry;\n    },\n    set: function set(value) {\n      this._registry = value;\n    }\n  }]);\n\n  return ThirdwebSDK;\n}();\n/**\r\n * Deprecated, please use ThirdwebSDK instead.\r\n * @public\r\n * @deprecated use ThirdwebSDK instead\r\n */\n\n\nvar NFTLabsSDK = ThirdwebSDK;\n/**\r\n * Convenience function to generate a merkle root from a list of strings.\r\n *\r\n * @param items - Any list of strings that will be hashed and added to the tree.\r\n * @returns - A merkle root (in hexadecimal).\r\n */\n\nfunction generateRoot(items) {\n  var tree = new MerkleTree$1(items, SHA256, {\n    hashLeaves: true,\n    sortLeaves: true\n  });\n  return tree.getRoot().toString(\"hex\");\n}\n/**\r\n * The {@link https://thirdweb.com | thirdweb} typescript sdk.\r\n *\r\n * @remarks\r\n * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.\r\n *\r\n * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )\r\n *\r\n *\r\n * @example\r\n * To get you started here's how you would instantiate the SDK and fetch some NFTs\r\n *\r\n * 1. Install the sdk\r\n * ```shell\r\n * npm install @3rdweb/sdk\r\n * ```\r\n *\r\n * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.\r\n *\r\n * 3. Write the tiniest amount of code!\r\n * ```typescript\r\n *  1 | import { ThirdwebSDK } from \"@3rdweb/sdk\";\r\n *  2 | import type { NFTModule, NFTMetadataOwner } from \"@3rdweb/sdk\";\r\n *  3 |\r\n *  5 | const contractAddress = \"0x...\"; // your contract address from step 2\r\n *  6 |\r\n *  7 | const sdk = new ThirdwebSDK();\r\n *  8 |\r\n *  9 | const nftModule: NFTModule = sdk.getNFTModule(contractAddress);\r\n * 10 |\r\n * 11 | const nftListWithOwnerAddress: NFTMetadataOwner[] = await nftModule.getAllWithOwner();\r\n * 12 |\r\n * 13 | console.log(nftListWithOwnerAddress);\r\n * ```\r\n * ```\r\n * Output\r\n * => [\r\n *       {\r\n *          owner: \"0x...\",\r\n *          metadata: {\r\n *            name: \"...\",\r\n *            description: \"...\",\r\n *            image: \"...\"\r\n *          },\r\n *       },\r\n *       {\r\n *          owner: \"0x...\",\r\n *          metadata: {\r\n *            name: \"...\",\r\n *            description: \"...\",\r\n *            image: \"...\"\r\n *          },\r\n *       },\r\n *       ...\r\n *    ]\r\n * ```\r\n *\r\n * @packageDocumentation\r\n */\n\n\nif (!globalThis.fetch) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  globalThis.fetch = fetch$1;\n}\n\nexport { AdminRoleMissingError, AppModule, AssetNotFoundError, AuctionAlreadyStartedError, AuctionHasNotEndedError, BundleDropModule, BundleDropModuleMetadata, BundleModule, BundleModuleMetadata, ChainlinkVrf, ClaimConditionFactory, ClaimConditionPhase, ClaimEligibility, ClaimProof, CommonModuleMetadata, CurrencyModule, CurrencyModuleMetadata, DEFAULT_BLOCK_TIMES_FALLBACK, DatastoreModule, DatastoreModuleMetadata, DropModule, DropModuleMetadata, DuplicateFileNameError, DuplicateLeafsError, FetchError, FileNameMissingError, FunctionDeprecatedError, InterfaceId_IERC1155, InterfaceId_IERC721, InvalidAddressError, IpfsStorage, ListingNotFoundError, ListingType, MarketModule, MarketModuleMetadata, MarketplaceModule, MarketplaceModuleMetadata, MissingOwnerRoleError, MissingRoleError, ModuleType, NATIVE_TOKEN_ADDRESS, NFTLabsSDK, NFTModule, NftModuleMetadata, NotEnoughTokensError, NotFoundError, PackModule, PackModuleMetadata, ProposalState, QuantityAboveLimitError, RestrictedTransferError, RolesMap, Snapshot, SplitsModule, SplitsModuleMetadata, ThirdwebSDK, TokenModule, TokenModuleMetadata, UnderlyingType, UploadError, VoteModule, VoteModuleMetadata, VoteType, WrongListingTypeError, convertModuleTypeToName, convertNameToModuleType, estimateBlockAtTime, generateRoot, getContractMetadata, getCurrencyBalance, getCurrencyMetadata, getCurrencyValue, getGasPriceForChain, getMetadataWithoutContract, getNativeTokenByChainId, getRoleHash, getTokenMetadata, getTokenMetadataUsingStorage, getTokenUri, isContract, isNativeToken, recursiveResolveGatewayUrl, replaceIpfsWithGateway, uploadMetadata, uploadToIPFS };","map":{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../src/common/error.ts","../src/common/ipfs.ts","../src/common/contract.ts","../src/common/chain.ts","../src/common/currency.ts","../src/common/chainlink.ts","../src/common/module-type.ts","../src/common/nft.ts","../src/common/role.ts","../src/common/gas-price.ts","../src/common/invariant.ts","../src/common/sign.ts","../src/core/events.ts","../src/core/module.ts","../src/modules/signature-mint-1155.ts","../src/common/address.ts","../src/common/forwarder.ts","../src/common/permit.ts","../src/types/module-deployments/CommonModuleMetadata.ts","../src/types/module-deployments/BundleDropModuleMetadata.ts","../src/types/module-deployments/BundleModuleMetadata.ts","../src/types/module-deployments/CurrencyModuleMetadata.ts","../src/types/module-deployments/DatastoreModuleMetadata.ts","../src/types/module-deployments/DropModuleMetadata.ts","../src/types/module-deployments/MarketModuleMetadata.ts","../src/types/module-deployments/MarketplaceModuleMetadata.ts","../src/types/module-deployments/NftModuleMetadata.ts","../src/types/module-deployments/PackModuleMetadata.ts","../src/types/module-deployments/SplitsModuleMetadata.ts","../src/types/module-deployments/TokenModuleMetadata.ts","../src/types/module-deployments/VoteModuleMetadata.ts","../src/utils/blockTimeEstimator.ts","../src/modules/token.ts","../src/modules/app.ts","../src/modules/bundle.ts","../src/common/isMetadataEqual.ts","../src/enums/marketplace/ListingType.ts","../src/enums/ClaimConditionType.ts","../src/enums/vote/ProposalState.ts","../src/enums/vote/Vote.ts","../src/enums/ClaimEligibility.ts","../src/factories/ClaimConditionPhase.ts","../src/factories/ClaimConditionFactory.ts","../src/types/snapshots/ClaimProof.ts","../src/types/snapshots/Snapshot.ts","../src/modules/bundleDrop.ts","../src/modules/datastore.ts","../src/types/QueryParams.ts","../src/modules/drop.ts","../src/modules/market.ts","../src/modules/marketplace.ts","../src/modules/nft.ts","../src/modules/pack.ts","../src/modules/royalty.ts","../src/modules/vote.ts","../src/storage/IpfsStorage.ts","../src/core/registry.ts","../src/core/index.ts","../src/utils/merkle/generateRoot.ts","../src/index.ts"],"names":["undefined","NotFoundError","identifier","InvalidAddressError","address","MissingRoleError","AssetNotFoundError","message","UploadError","FileNameMissingError","DuplicateFileNameError","NotEnoughTokensError","MissingOwnerRoleError","QuantityAboveLimitError","FetchError","innerError","DuplicateLeafsError","AuctionAlreadyStartedError","id","FunctionDeprecatedError","ListingNotFoundError","marketplaceContractAddress","listingId","WrongListingTypeError","expectedType","actualType","RestrictedTransferError","assetAddress","AdminRoleMissingError","contractAddress","AuctionHasNotEndedError","endTime","globalThis","require","replaceIpfsWithGateway","ipfsUrl","gatewayUrl","recursiveResolveGatewayUrl","json","storage","keylist","Object","headers","signerAddress","formData","res","fetch","method","body","_fileHandler","keys","key","val","object","shouldUpload","uploadToIPFS","metadata","JSON","InterfaceId_IERC721","arrayify","InterfaceId_IERC1155","contractUriABI","inputs","name","outputs","internalType","type","stateMutability","resolveGateway","contract","uri","meta","entity","provider","ChainId","SUPPORTED_CHAIN_IDS","NATIVE_TOKEN_ADDRESS","NATIVE_TOKENS","symbol","decimals","wrapped","isNativeToken","Signer","providerOrSigner","network","nativeToken","getNativeTokenByChainId","erc20","ERC20__factory","Promise","getCurrencyMetadata","value","price","displayValue","formatUnits","tokenAddress","getProvider","balance","console","getCurrencyValue","chainId","ChainlinkVrf","vrfCoordinator","linkTokenAddress","keyHash","fees","ethers","ModuleType","convertNameToModuleType","moduleName","$enum","convertModuleTypeToName","moduleType","tokenUriABI","getTokenMetadata","getTokenUri","tokenId","RolesMap","admin","minter","pauser","transfer","editor","lister","asset","_role","getRoleHash","role","gasStationUrl","getGasStationUrl","data","gas","Math","invariant","condition","signer","payload","signature","EventType","Module","ipfsGatewayUrl","options","sdk","_providerOrSigner","_signer","readOnlyContract","isContract","resolveUrls","uploadMetadata","setProviderOrSigner","clearSigner","getProviderOrSigner","getSigner","hasValidSigner","connectContract","getModuleType","speed","maxGasPrice","gasPriceChain","getGasPriceForChain","gasPrice","emitTransactionEvent","status","transactionHash","callOverrides","txHash","receipt","tx","func","args","from","to","BigNumber","gasEstimate","gasLimit","functionName","functionArgs","sig","signTypedData","parseEventLogs","log","event","parseLogs","logs","topic","parsedLogs","x","ModuleWithRoles","getModuleRoles","roleHash","count","Array","roles","currentRoles","encoded","addresses","rolesWithAddresses","currentAddresses","toAdd","toRemove","revokeFunctionName","rolesRemoved","members","a","MintRequest","SignatureMint1155Module","BUNDLE_SIGNATURE","SignatureMint1155__factory","supply","ownedByAddress","quantityOwnedByAddress","maxId","i","ERC721__factory","approved","isTokenApproved","amount","metadatas","amounts","uris","ids","balances","ownedBalances","b","token","item","restricted","req","overrides","t","v","mintRequest","resolveId","buffer","Buffer","uuidv4","hexlify","toUtf8Bytes","r","version","verifyingContract","uid","mapPayload","royaltyRecipient","royaltyBps","primarySaleRecipient","quantity","pricePerToken","currency","validityEndTimestamp","validityStartTimestamp","currencyAddress","owner","spender","allowance","FORWARDER_ADDRESS","CONTRACT_ADDRESSES","registry","biconomyForwarder","AddressZero","getContractAddressByChainId","contractName","ForwardRequest","BiconomyForwarderAbi","_nonces","_noncesSyncTimestamp","forwarderArgs","timestamp","shouldSync","Date","nonceResult","nonce","NAME_ABI","DOMAIN_SEPARATOR_ABI","constant","payable","NONCES_ABI","getSignerNonce","getDomainSeperator","getTokenName","getChainDomainSeperator","contractDomainSeparator","domain","polygonDomain","salt","deadline","types","Permit","JsonObject","CommonModuleMetadata","JsonProperty","__decorate","PropertyConvertingMode","BundleDropModuleMetadata","BundleModuleMetadata","CurrencyModuleMetadata","DatastoreModuleMetadata","DropModuleMetadata","MarketModuleMetadata","MarketplaceModuleMetadata","NftModuleMetadata","PackModuleMetadata","SplitsModuleMetadata","TokenModuleMetadata","VoteModuleMetadata","DEFAULT_BLOCK_TIMES_FALLBACK","secondsBetweenBlocks","synced","secondsUntil","timeInEpochSeconds","estimateSecondsBetweenBlocks","blockTimes","latest","current","previous","diff","sum","result","latestBlock","blocksUntil","TokenModule","CURRENCY","Coin__factory","arg","txns","CurrencyModule","AppModule","ProtocolControl__factory","getContractMetadata","PACK","NFT","BUNDLE","DATASTORE","MARKET","DROP","moduleTypesToGet","filterByModuleType","moduleAddresses","acc","moduleContract","fee_recipient","treasury","lastTransaction","isNative","getCurrencyBalance","bn","isV2","treasuryBalance","royalty","Royalty__factory","txOpts","factory","addModuleTx","shouldUpdateRecipient","isValidFeeRecipient","serializedMetadata","metadataUri","s","nativeTokenWrapperAddress","isAddress","royaltyTreasury","timeBetweenBlocks","waitTimeInBlocks","votingTimeInBlocks","isAdmin","modules","allUpgradableModules","moduleMetadatas","m","metadataUris","txData","txs","upgradeOptions","splitsAddress","shares","recipientSplits","isRoyalty","projectBalance","IERC20__factory","BundleModule","NFTCollection__factory","state","creator","underlyingType","metadataWithSupply","supplies","tokenIds","isMetadataEqual","old","changed","oldKeys","changedKeys","ListingType","ClaimConditionType","ProposalState","VoteType","ClaimEligibility","ClaimConditionPhase","_conditionStartTime","_currencyAddress","_price","_maxQuantity","_quantityLimitPerTransaction","MaxUint256","_merkleRootHash","hexZeroPad","_merkleCondition","_snapshot","createSnapshot","_waitInSeconds","setPrice","setConditionStartTime","when","setMaxQuantity","setMaxQuantityPerTransaction","maxQuantity","setMerkleRoot","setSnapshot","getSnapshot","buildPublicClaimCondition","startTimestamp","maxMintSupply","waitTimeSecondsLimitPerTransaction","quantityLimitPerTransaction","currentMintSupply","merkleRoot","setWaitTimeBetweenClaims","ClaimConditionFactory","phases","buildConditions","sorted","c","buildConditionsForDropV1","conditions","now","fromPublicClaimConditions","phase","newClaimPhase","startTime","maxQuantityPerTransaction","deleteClaimPhase","index","cleared","removeClaimPhase","allSnapshots","p","ClaimProof","Snapshot","OLD_CLAIM_ABI","anonymous","indexed","BundleDropModule","BUNDLE_DROP","BundleDrop__factory","cv","pm","availableSupply","currencyContract","currencyMetadata","claimCondition","saleRecipient","startFileNumber","baseUri","startingIndex","endingIndex","maxClaimableSupply","supplyClaimed","waitTimeInSecondsBetweenClaims","merkleInfo","oldMerkle","existingMerkle","getClaimConditionFactory","createSnapshotFunc","_conditions","proofs","mintCondition","addressToClaim","snapshot","jsonConvert","snapshotData","totalPrice","claimData","account","getClaimConditionsFactory","reasons","addressToCheck","activeConditionIndex","merkleRootArray","merkleLower","hashedAddress","timestampForNextClaim","DatastoreModule","DataStore__factory","DEFAULT_QUERY_ALL_COUNT","ABI_V1_22_0","ABI_V1_24_0","DropModule","_shouldCheckVersion","_isV0","_version","v1Module","DropV2__factory","start","unmintedId","indices","transformResultToMintCondition","mc","defaultMerkleRoot","getMintConditionsFactory","events","placeholderUri","baseUriId","encryptedBaseUri","decryptedUri","countRangeArray","uriIndices","uriIndicesWithZeroStart","tokenUris","tokenMetadatas","encryptedBaseUris","batchId","batchUri","placeholderMetadata","DropV1Module","Drop__factory","get","getAll","getAllUnclaimed","getAllClaimed","ownerOf","getOwned","transformResultToClaimCondition","getActiveMintCondition","getActiveClaimCondition","getAllMintConditions","getAllClaimConditions","totalSupply","maxTotalSupply","totalUnclaimedSupply","totalClaimedSupply","balanceOf","isApproved","setApproval","lazyMint","pinToIpfs","lazyMintBatch","lazyMintAmount","setMintConditions","setClaimConditions","setClaimCondition","metatdataUri","setPublicMintConditions","canClaim","getClaimerProofs","claim","burn","transferFrom","setModuleMetadata","setRoyaltyBps","setBaseTokenUri","setMaxTotalSupply","getRoyaltyBps","getRoyaltyRecipientAddress","createBatch","canCreateBatch","isTransferRestricted","setRestrictedTransfer","MarketModule","Market__factory","listing","getMetadataWithoutContract","seller","tokenContract","tokenMetadata","tokensPerBuyer","saleStart","saleEnd","Number","listings","filter","l","filterSeller","filterTokenContract","filterTokenId","secondsUntilStart","secondsUntilEnd","erc165","ERC165__factory","isERC721","ERC1155__factory","MAX_BPS","MarketplaceModule","MARKETPLACE","Marketplace__factory","assetContract","buyoutPricePerToken","currencyToAccept","listingType","quantityToList","reservePricePerToken","secondsUntilEndTime","startTimeInSeconds","offer","bid","bidBuffer","winningBid","isWinningBid","reservePrice","winningPrice","newBidPrice","closedAuctions","auction","assetContractAddress","buyoutPrice","currencyContractAddress","buyoutCurrencyValuePerToken","getTokenMetadataUsingStorage","sellerAddress","startTimeInEpochSeconds","reservePriceCurrencyValuePerToken","endTimeInEpochSeconds","tokenOwnerAddress","validateNewListingParam","param","buyerAddress","quantityDesired","currencyValue","offers","_buyout","valid","closeFor","timeBuffer","rawListings","Error","NFTModule","SignatureMint721__factory","NFT__factory","image","multicall","e","UnderlyingType","PackModule","Pack__factory","requestId","opener","fulfillEvent","resolve","packId","rewardContract","rewardIds","rewardId","currentSupply","openStart","packReward","rewards","reward","packParams","chainlink","_contract","SplitsModule","SPLITS","recipients","totalRecipients","recipientAddress","recipient","totalShares","walletsShares","splitPercentage","walletBalance","totalReleased","totalReceived","addressReceived","totalRoyaltyAvailable","VoteModule","VOTE","VotingGovernor__factory","votingDelay","votingPeriod","votingTokenAddress","votingQuorumFraction","proposalTokenThreshold","votingTokenMetadata","all","proposals","proposalId","results","states","votes","label","againstVotes","forVotes","abstainVotes","j","proposer","description","startBlock","endBlock","executions","toAddress","exec","nativeTokenValue","transactionData","tos","values","datas","reason","proposal","descriptionHash","thirdwebIpfsServerUrl","pinataIpfsUrl","IpfsStorage","cid","fileStartNumber","fileNames","files","fileName","fileData","file","extensions","extensionStartIndex","filepath","Authorization","buildFilePropertiesMap","filesToUpload","cids","filename","finalMetadata","isFile","metadataObjects","metadataToUpload","resolveFullUrl","ipfsHash","canResolve","resolved","RegistryModule","Registry__factory","deployer","maxVersion","versions","ThirdwebSDK","defaultOptions","registryContractAddress","maxGasPriceInGwei","gasSpeed","transactionRelayerUrl","transactionRelayerSendFunction","transactionRelayerForwarderAddress","readOnlyRpcUrl","gasless","biconomy","apiId","apiKey","deadlineSeconds","gasTier","gaslessSendFunction","_jsonConvert","_registry","updateModuleSigners","_module","Provider","getOrCreateModule","_newModule","registryContract","parseUnits","txn","_speed","_maxGas","maxGasGwei","isReadOnly","getAppModule","getNFTModule","getCollectionModule","getBundleModule","getPackModule","getCurrencyModule","getTokenModule","getDatastoreModule","getMarketModule","getDropModule","getBundleDropModule","getMarketplaceModule","getSplitsModule","getVoteModule","getBundleSignatureModule","invokeRoute","parts","route","moduleAddress","funcName","getModuleByName","forwarder","transaction","batchNonce","getAndIncrementNonce","request","txGas","tokenGasPrice","hashToSign","response","params","gasType","resp","forwarderAddress","Forwarder__factory","permit","signEIP2612Permit","messageType","hasDuplicates","leafs","keccak256","hashedLeafs","tree","sort","claims","proof","serializedSnapshot","snapshotUri","getStorage","overrideStorage","NFTLabsSDK","generateRoot","items","hashLeaves","sortLeaves"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { BigNumberish } from \"ethers\";\n/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @public\n */\nexport class NotFoundError extends Error {\n  /** @internal */\n  constructor(identifier?: string) {\n    super(identifier ? `Object with id ${identifier} NOT FOUND` : \"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @public\n */\nexport class InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address?: string) {\n    super(\n      address ? `'${address}' is an invalid address` : \"Invalid address passed\",\n    );\n  }\n}\n\nexport class MissingRoleError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(address: string, role: string) {\n    super(`MISSING ROLE: ${address} does not have the '${role}' role`);\n  }\n}\n\nexport class AssetNotFoundError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(message = \"The asset you're trying to use could not be found.\") {\n    super(`message: ${message}`);\n  }\n}\n\nexport class UploadError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`UPLOAD_FAILED: ${message}`);\n  }\n}\n\nexport class FileNameMissingError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"File name is required when object is not a `File` type object.\");\n  }\n}\n\nexport class DuplicateFileNameError extends Error {\n  /** @internal */\n  constructor(fileName: string) {\n    super(\n      `DUPLICATE_FILE_NAME_ERROR: File name ${fileName} was passed for more than one file.`,\n    );\n  }\n}\n\nexport class NotEnoughTokensError extends Error {\n  /** @internal */\n  constructor(contractAddress: string, quantity: number, available: number) {\n    super(\n      `BALANCE ERROR: you do not have enough balance on contract ${contractAddress} to use ${quantity} tokens. You have ${available} tokens available.`,\n    );\n  }\n}\n\nexport class MissingOwnerRoleError extends Error {\n  /** @internal */\n  constructor() {\n    super(`LIST ERROR: you should be the owner of the token to list it.`);\n  }\n}\n\nexport class QuantityAboveLimitError extends Error {\n  /** @internal */\n  constructor(quantity: string) {\n    super(`BUY ERROR: You cannot buy more than ${quantity} tokens`);\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n */\nexport class FetchError extends Error {\n  public innerError?: Error;\n\n  /** @internal */\n  constructor(message: string, innerError?: Error) {\n    super(`FETCH_FAILED: ${message}`);\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n */\nexport class DuplicateLeafsError extends Error {\n  constructor(message?: string) {\n    super(`DUPLICATE_LEAFS${message ? ` : ${message}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to update/cancel an auction that already started\n */\nexport class AuctionAlreadyStartedError extends Error {\n  constructor(id?: string) {\n    super(\n      `Auction already started with existing bid${id ? `, id: ${id}` : \"\"}`,\n    );\n  }\n}\n\nexport class FunctionDeprecatedError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`FUNCTION DEPRECATED. ${message ? `Use ${message} instead` : \"\"}`);\n  }\n}\n/**\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\n */\nexport class ListingNotFoundError extends Error {\n  constructor(marketplaceContractAddress: string, listingId?: string) {\n    super(\n      `Could not find listing.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing of the wrong type\n */\nexport class WrongListingTypeError extends Error {\n  constructor(\n    marketplaceContractAddress: string,\n    listingId?: string,\n    actualType?: string,\n    expectedType?: string,\n  ) {\n    super(\n      `Incorrect listing type. Are you sure you're using the right method?.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}${\n        expectedType ? ` expected type: ${expectedType}` : \"\"\n      }${actualType ? ` actual type: ${actualType}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to transfer an asset that has restricted transferability\n */\nexport class RestrictedTransferError extends Error {\n  constructor(assetAddress?: string) {\n    super(\n      `Failed to transfer asset, transfer is restricted.${\n        assetAddress ? ` Address : ${assetAddress}` : \"\"\n      }`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to execute an admin-role function.\n */\nexport class AdminRoleMissingError extends Error {\n  constructor(\n    address?: string,\n    contractAddress?: string,\n    message = \"Failed to execute transaction\",\n  ) {\n    super(\n      `${message}, admin role is missing${\n        address ? ` on address: ${address}` : \"\"\n      }${contractAddress ? ` on contract: ${contractAddress}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to close an auction that has not ended\n */\nexport class AuctionHasNotEndedError extends Error {\n  constructor(id?: string, endTime?: BigNumberish) {\n    super(\n      `Auction has not ended yet${id ? `, id: ${id}` : \"\"}${\n        endTime ? `, end time: ${endTime.toString()}` : \"\"\n      }`,\n    );\n  }\n}\n","import { MetadataURIOrObject } from \"../core/types\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport { UploadError } from \"./error\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\nif (!globalThis.File) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.File = require(\"@web-std/file\").File;\n}\n\n/**\n *\n * @param ipfsUrl - the ipfs:// uri\n * @param gatewayUrl - the gateway url\n * @returns the fully formed IPFS url\n * @internal\n */\nexport function replaceIpfsWithGateway(ipfsUrl: string, gatewayUrl: string) {\n  if (!ipfsUrl || typeof ipfsUrl !== \"string\") {\n    return \"\";\n  }\n  if (!gatewayUrl.endsWith(\"/\")) {\n    gatewayUrl = `${gatewayUrl}/`;\n  }\n  return ipfsUrl.replace(\"ipfs://\", gatewayUrl);\n}\nexport function recursiveResolveGatewayUrl(json: any, storage: IStorage) {\n  if (typeof json === \"object\") {\n    const keylist = Object.keys(json);\n    keylist.forEach((key: string) => {\n      if (typeof json[key] === \"object\") {\n        json[key] = recursiveResolveGatewayUrl(json[key], storage);\n      } else if (typeof json[key] === \"string\") {\n        json[key] = storage.resolveFullUrl(json[key]);\n      }\n    });\n  }\n  return json;\n}\n\n/**\n * A helper function to upload arbitrary data to IPFS and return the resulting IPFS uri.\n * @param data - stringified JSON || File\n * @param contractAddress - (Optional) the contract address to associate the data with\n * @param signerAddress - (Optional) the wallet address of the actor that is uploading the file\n * @returns The `ipfs://<hash>` uri of the uploaded file\n * @public\n */\nexport async function uploadToIPFS(\n  data: string | File | FileOrBuffer,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  const headers = {\n    \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    \"X-Public-Address\": signerAddress || \"\",\n  };\n  const formData = new FormData();\n  formData.append(\"file\", data as any);\n  const res = await fetch(\"https://upload.nftlabs.co/upload\", {\n    method: \"POST\",\n    body: formData as any,\n    headers,\n  });\n  try {\n    const body = await res.json();\n    return body.IpfsUri;\n  } catch (e) {\n    throw new UploadError(`Failed to upload to IPFS: ${e}`);\n  }\n}\n\n/**\n * @internal\n */\nexport async function uploadMetadata(\n  metadata: MetadataURIOrObject,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  }\n  async function _fileHandler(object: any) {\n    const keys = Object.keys(object);\n    for (const key in keys) {\n      const val = object[keys[key]];\n      const shouldUpload = val instanceof File || val instanceof Buffer;\n\n      if (shouldUpload) {\n        object[keys[key]] = await uploadToIPFS(\n          object[keys[key]],\n          contractAddress,\n          signerAddress,\n        );\n      }\n      if (shouldUpload && typeof object[keys[key]] !== \"string\") {\n        throw new Error(\"Upload to IPFS failed\");\n      }\n      if (typeof val === \"object\") {\n        object[keys[key]] = await _fileHandler(object[keys[key]]);\n      }\n    }\n    return object;\n  }\n\n  metadata = await _fileHandler(metadata);\n\n  return await uploadToIPFS(\n    JSON.stringify(metadata),\n    contractAddress,\n    signerAddress,\n  );\n}\n","import { arrayify } from \"@ethersproject/bytes\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { ProviderOrSigner } from \"../core/types\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { recursiveResolveGatewayUrl } from \"./ipfs\";\n\n/**\n * The typical contract metadata found on the modules.\n * @public\n */\nexport interface ContractMetadata {\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  external_link?: string;\n  seller_fee_basis_points?: number;\n  fee_recipient?: string;\n  [key: string]: any;\n}\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC721 = arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC1155 = arrayify(\"0xd9b67a26\");\n\nconst contractUriABI = [\n  {\n    inputs: [] as [],\n    name: \"contractURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * @internal\n */\nexport async function getContractMetadata(\n  provider: ProviderOrSigner,\n  address: string,\n  storage: IStorage,\n  resolveGateway = false,\n): Promise<ContractMetadata> {\n  const contract = new Contract(address, contractUriABI, provider);\n  const uri = await contract.contractURI();\n  const meta = await storage.get(uri);\n\n  try {\n    let json = JSON.parse(meta);\n    if (resolveGateway) {\n      json = recursiveResolveGatewayUrl(json, storage);\n    }\n    const entity: ContractMetadata = {\n      ...json,\n    };\n    return entity;\n  } catch (e) {\n    throw new Error(\n      `Failed to parse metadata for contract ${address} with uri ${uri}`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport async function isContract(\n  provider: Provider,\n  address: string,\n): Promise<boolean> {\n  return (await provider.getCode(address)) !== \"0x\";\n}\n","export enum ChainId {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Kovan = 42,\n  BSC = 56,\n  xDai = 100,\n  Polygon = 137,\n  Moonriver = 1285,\n  Mumbai = 80001,\n  Harmony = 1666600000,\n  Localhost = 1337,\n  Hardhat = 31337,\n  Fantom = 250,\n  FantomTestnet = 4002,\n  Avalanche = 43114,\n  AvalancheFujiTestnet = 43113,\n}\n\nexport type SUPPORTED_CHAIN_ID =\n  | ChainId.Mainnet\n  | ChainId.Rinkeby\n  | ChainId.Mumbai\n  | ChainId.Polygon\n  | ChainId.Fantom\n  | ChainId.FantomTestnet\n  | ChainId.Avalanche\n  | ChainId.AvalancheFujiTestnet;\n\nexport const SUPPORTED_CHAIN_IDS: SUPPORTED_CHAIN_ID[] = [\n  ChainId.Mainnet,\n  ChainId.Rinkeby,\n  ChainId.Polygon,\n  ChainId.Mumbai,\n  ChainId.Fantom,\n  ChainId.FantomTestnet,\n  ChainId.Avalanche,\n  ChainId.AvalancheFujiTestnet,\n];\n","import { ERC20__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumberish, Signer } from \"ethers\";\nimport { ProviderOrSigner } from \"../core/types\";\nimport { ChainId, SUPPORTED_CHAIN_ID } from \"./chain\";\n\n/**\n * Currency metadata.\n * @public\n */\nexport interface Currency {\n  name: string;\n  symbol: string;\n  decimals: number;\n}\n\nexport interface NativeToken extends Currency {\n  wrapped: {\n    address: string;\n    name: string;\n    symbol: string;\n  };\n}\n\n/**\n * Currency metadata & value.\n * @public\n */\nexport interface CurrencyValue extends Currency {\n  value: string;\n  displayValue: string;\n}\n\n/**\n * @internal\n */\nexport const NATIVE_TOKEN_ADDRESS =\n  \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\nconst NATIVE_TOKENS: Record<SUPPORTED_CHAIN_ID | ChainId.Hardhat, NativeToken> =\n  {\n    [ChainId.Mainnet]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n    [ChainId.Rinkeby]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n    [ChainId.Polygon]: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n        name: \"Wrapped Matic\",\n        symbol: \"WMATIC\",\n      },\n    },\n    [ChainId.Mumbai]: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n        name: \"Wrapped Matic\",\n        symbol: \"WMATIC\",\n      },\n    },\n    [ChainId.Avalanche]: {\n      name: \"Avalanche\",\n      symbol: \"AVAX\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n        name: \"Wrapped AVAX\",\n        symbol: \"WAVAX\",\n      },\n    },\n    [ChainId.AvalancheFujiTestnet]: {\n      name: \"Avalanche\",\n      symbol: \"AVAX\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n        name: \"Wrapped AVAX\",\n        symbol: \"WAVAX\",\n      },\n    },\n    [ChainId.Fantom]: {\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n        name: \"Wrapped Fantom\",\n        symbol: \"WFTM\",\n      },\n    },\n    [ChainId.FantomTestnet]: {\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n        name: \"Wrapped Fantom\",\n        symbol: \"WFTM\",\n      },\n    },\n    [ChainId.Hardhat]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n  };\n\n/**\n * @internal\n */\nexport async function getCurrencyMetadata(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n): Promise<Currency> {\n  try {\n    if (isNativeToken(asset)) {\n      let provider: Provider;\n      if (Signer.isSigner(providerOrSigner)) {\n        provider = (providerOrSigner as Signer).provider as Provider;\n      } else {\n        provider = providerOrSigner as Provider;\n      }\n      const network = await provider.getNetwork();\n      const nativeToken = getNativeTokenByChainId(network.chainId);\n      return {\n        name: nativeToken.name,\n        symbol: nativeToken.symbol,\n        decimals: nativeToken.decimals,\n      };\n    } else {\n      const erc20 = ERC20__factory.connect(asset, providerOrSigner);\n      const [name, symbol, decimals] = await Promise.all([\n        erc20.name(),\n        erc20.symbol(),\n        erc20.decimals(),\n      ]);\n      return {\n        name,\n        symbol,\n        decimals,\n      };\n    }\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n  return {\n    name: \"\",\n    symbol: \"\",\n    decimals: 0,\n  };\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyValue(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n  price: BigNumberish,\n): Promise<CurrencyValue> {\n  const metadata = await getCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: price.toString(),\n    displayValue: formatUnits(price, metadata.decimals),\n  };\n}\n\n/**\n * @internal\n */\nexport function isNativeToken(tokenAddress: string): boolean {\n  return (\n    tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS ||\n    tokenAddress.toLowerCase() === AddressZero\n  );\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyBalance(\n  providerOrSigner: ProviderOrSigner,\n  tokenAddress: string,\n  walletAddress: string,\n): Promise<CurrencyValue> {\n  const provider = getProvider(providerOrSigner);\n  let balance;\n  if (isNativeToken(tokenAddress)) {\n    balance = await provider.getBalance(walletAddress);\n  } else {\n    try {\n      const erc20 = ERC20__factory.connect(tokenAddress, provider);\n      balance = await erc20.balanceOf(walletAddress);\n    } catch (e) {\n      console.error(e);\n      throw new Error(\"invalid ERC20 token address\");\n    }\n  }\n\n  return getCurrencyValue(providerOrSigner, tokenAddress, balance);\n}\n\nfunction getProvider(providerOrSigner: ProviderOrSigner): Provider {\n  if (Signer.isSigner(providerOrSigner)) {\n    return (providerOrSigner as Signer).provider as Provider;\n  } else {\n    return providerOrSigner as Provider;\n  }\n}\n\nexport function getNativeTokenByChainId(chainId: ChainId): NativeToken {\n  return NATIVE_TOKENS[chainId as SUPPORTED_CHAIN_ID];\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { ChainId } from \"./chain\";\n\n/**\n *\n * @internal\n */\nexport type ChainlinkInfo = {\n  vrfCoordinator: string;\n  linkTokenAddress: string;\n  keyHash: string;\n  fees: BigNumber;\n};\n\n/**\n *\n * @internal\n */\nexport const ChainlinkVrf: Record<number, ChainlinkInfo> = {\n  [ChainId.Polygon]: {\n    vrfCoordinator: \"0x3d2341ADb2D31f1c5530cDC622016af293177AE0\",\n    linkTokenAddress: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n    keyHash:\n      \"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Mumbai]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Rinkeby]: {\n    vrfCoordinator: \"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\",\n    linkTokenAddress: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n    keyHash:\n      \"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\",\n    fees: ethers.utils.parseEther(\"0.1\"),\n  },\n  [ChainId.Mainnet]: {\n    vrfCoordinator: \"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\",\n    linkTokenAddress: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    keyHash:\n      \"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\",\n    fees: ethers.utils.parseEther(\"2\"),\n  },\n  [ChainId.Hardhat]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n};\n","import { $enum } from \"ts-enum-util\";\n\n/**\n * The type of Modules that are available.\n * @public\n */\nexport enum ModuleType {\n  CURRENCY = 0,\n  TOKEN = 0,\n  COLLECTION = 1,\n  BUNDLE = 1,\n  NFT = 2,\n  DYNAMIC_NFT = 3,\n  ACCESS_NFT = 4,\n  PACK = 5,\n  MARKET = 6,\n  DROP = 7,\n  DATASTORE = 8,\n  SPLITS = 9,\n  VOTE = 10,\n  BUNDLE_DROP = 11,\n  MARKETPLACE = 12,\n  BUNDLE_SIGNATURE = 13,\n}\n/**\n *\n * @param moduleName - a supported module name\n * @returns The {@link ModuleType} or undefined\n * @public\n */\n\nexport function convertNameToModuleType(\n  moduleName?: string,\n): ModuleType | undefined {\n  return $enum(ModuleType).getValueOrDefault(\n    moduleName?.toUpperCase(),\n    undefined,\n  );\n}\n\n/**\n *\n * @param moduleType - A {@link ModuleType}\n * @returns The name of the given {@link ModuleType} or undefined\n * @public\n */\nexport function convertModuleTypeToName(\n  moduleType: ModuleType,\n): keyof typeof ModuleType | undefined {\n  return $enum(ModuleType).getKeyOrDefault(moduleType, undefined);\n}\n","import {\n  LazyMintERC1155,\n  LazyMintERC721,\n  LazyNFT,\n  NFT,\n  NFTCollection,\n  SignatureMint1155,\n} from \"@3rdweb/contracts\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { JSONValue, ProviderOrSigner } from \"../core/types\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { NotFoundError } from \"./error\";\nimport { recursiveResolveGatewayUrl } from \"./ipfs\";\n\n// support erc721 and erc1155\nconst tokenUriABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"uri\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * The shared NFT metadata.\n * @public\n */\nexport interface NFTMetadata {\n  id: string;\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  external_url?: string;\n  animation_url?: string;\n  properties?: Record<string, JSONValue>;\n}\n\n/**\n * The shared NFT metadata, including the current owner address.\n * @public\n */\nexport interface NFTMetadataOwner {\n  owner: string;\n  metadata: NFTMetadata;\n}\n\n/**\n * @internal\n */\nexport type NFTContractTypes =\n  | NFT\n  | NFTCollection\n  | LazyNFT\n  | LazyMintERC721\n  | LazyMintERC1155\n  | SignatureMint1155;\n\n/**\n/* @internal\n */\nexport async function getMetadataWithoutContract(\n  provider: ProviderOrSigner,\n  contractAddress: string,\n  tokenId: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const contract = new Contract(contractAddress, tokenUriABI, provider) as NFT;\n  return getTokenMetadata(contract, tokenId, storage);\n}\n\n/**\n/* @internal\n */\nexport async function getTokenMetadata(\n  contract: NFTContractTypes,\n  tokenId: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const uri = await getTokenUri(contract, tokenId);\n  if (!uri) {\n    throw new NotFoundError();\n  }\n\n  try {\n    const meta = await storage.get(uri);\n    const json = recursiveResolveGatewayUrl(JSON.parse(meta), storage);\n    const entity: NFTMetadata = {\n      ...json,\n      id: tokenId,\n      uri,\n    };\n    return entity;\n  } catch (e) {\n    console.error(\"failed to fetch nft\", e);\n    return {\n      id: tokenId,\n      uri,\n    };\n  }\n}\n\nexport async function getTokenMetadataUsingStorage(\n  contractAddress: string,\n  provider: ProviderOrSigner,\n  tokenId: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const contract = new Contract(contractAddress, tokenUriABI, provider) as NFT;\n\n  const uri = await getTokenUri(contract, tokenId);\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  try {\n    const json = JSON.parse(await storage.get(uri));\n    const entity: NFTMetadata = {\n      ...json,\n      id: tokenId,\n    };\n    return entity;\n  } catch (e) {\n    console.error(\"failed to fetch nft\", e);\n    return {\n      id: tokenId,\n      uri,\n    };\n  }\n}\n\n/**\n/* @internal\n */\nexport async function getTokenUri(\n  contract: NFTContractTypes,\n  tokenId: string,\n): Promise<string> {\n  let uri = \"\";\n  try {\n    uri = await contract.tokenURI(tokenId);\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  if (!uri) {\n    try {\n      uri = await (contract as NFTCollection).uri(tokenId);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n\n  if (!uri) {\n    try {\n      uri = await (contract as SignatureMint1155).uri(tokenId);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n  return uri;\n}\n","import { BytesLike, ethers } from \"ethers\";\n\n/**\n * Roles are used to handle permissions on modules that extend {@link ModuleWithRoles}.\n * @public\n */\nexport interface IRoles {\n  /**\n   * This admin role allows the wallet to modify contract metadata and {@link ModuleWithRoles.grantRole | grant} and {@link ModuleWithRoles.revokeRole | revoke} Roles.\n   * @public\n   */\n  admin: \"admin\";\n  /**\n   * The minter role allows the wallet to mint new assets.\n   * ({@link NFTModule.mint | NFTs}, {@link TokenModule.mint | Tokens}, {@link PackModule.create | Packs}, etc)\n   * @public\n   */\n  minter: \"minter\";\n  /**\n   * The pauser role allows the wallet to pause all external contract interactions.\n   * @public\n   */\n  pauser: \"pauser\";\n  /**\n   * The transfer role allows the wallet to transfer and receive assets\n   * **even** when the module is set to be non-transferrable.\n   * @public\n   */\n  transfer: \"transfer\";\n  /**\n   * The editor role allows the wallet to edit data in the {@link DatastoreModule}.\n   * @alpha\n   */\n  editor: \"editor\";\n  /**\n   * The lister role allows the wallet to list assets on the {@link MarketModule}.\n   * @public\n   */\n  lister: \"lister\";\n\n  /**\n   * The contract address allowed to list assets from\n   * @internal\n   */\n  asset: \"asset\";\n}\n\n/**\n * {@inheritDoc IRoles}\n * @public\n */\nexport type Role = keyof IRoles;\n\nexport type SetAllRoles = {\n  [key in keyof IRoles]?: string[];\n};\n\n/**\n *\n * @internal\n */\nexport const RolesMap: IRoles = {\n  admin: \"admin\",\n  minter: \"minter\",\n  pauser: \"pauser\",\n  transfer: \"transfer\",\n  editor: \"editor\",\n  lister: \"lister\",\n  asset: \"asset\",\n} as const;\n\n/**\n *\n * @internal\n */\nconst _role: Record<Role, string> = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  editor: \"EDITOR_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\",\n};\n\n/**\n * @internal\n */\nexport function getRoleHash(role: Role): BytesLike {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers.utils.id(_role[role]);\n}\n","import { ChainId } from \"./chain\";\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId?: number): string | null {\n  if (!chainId) {\n    return null;\n  }\n\n  if (chainId === ChainId.Polygon) {\n    return \"https://gasstation-mainnet.matic.network\";\n  }\n\n  return null;\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nexport async function getGasPriceForChain(\n  chainId: number,\n  speed: string,\n  maxGasPrice: number,\n): Promise<number | null> {\n  const gasStationUrl = getGasStationUrl(chainId);\n  if (!gasStationUrl) {\n    return null;\n  }\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    let gas = data[speed];\n\n    if (chainId === ChainId.Polygon || chainId === ChainId.Mumbai) {\n      // the minimum gas on chain is 30, +1 for priority. prevent gas station report false price and cause tx to fail.\n      gas = Math.max(gas, 31);\n    }\n    if (gas > 0) {\n      return Math.min(gas, maxGasPrice);\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return null;\n}\n","const genericMessage = \"Invariant Violation\";\n\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\n/**\n * Error that may get thrown when an invariant assummption fails.\n * @public\n */\nexport class InvariantError extends Error {\n  /**\n   * @internal\n   */\n  framesToPop = 1;\n  /**\n   * @internal\n   */\n  name = genericMessage;\n  /**\n   * @internal\n   */\n  constructor(message: string = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message,\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n/**\n * @internal\n * @param condition - any truthy condition to assert\n * @param message  - optional message to use if the condition is falsy\n */\nexport function invariant(condition: any, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n","import { TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"@ethersproject/providers\";\nimport { ethers, Signer } from \"ethers\";\n\n/**\n * @internal\n */\nexport interface EIP712StandardDomain {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n}\n\n/**\n * @internal\n */\nexport interface EIP712PolygonDomain {\n  name: string;\n  version: string;\n  verifyingContract: string;\n  salt: string;\n}\n\n/**\n * @internal\n */\nexport type EIP712Domain = EIP712StandardDomain | EIP712PolygonDomain;\n\n/**\n * eip712 sign typed data with different wallet handling including ledger live\n * @internal\n */\nexport async function signTypedData(\n  signer: Signer,\n  domain: EIP712Domain,\n  types: Record<string, Array<TypedDataField>>,\n  message: Record<string, any>,\n) {\n  const provider = signer?.provider as JsonRpcProvider;\n  if (!provider) {\n    throw new Error(\"missing provider\");\n  }\n\n  const payload = ethers.utils._TypedDataEncoder.getPayload(\n    domain,\n    types,\n    message,\n  );\n\n  let signature = \"\";\n\n  // an indirect way for accessing walletconnect's underlying provider\n  if ((provider as any)?.provider?.isWalletConnect) {\n    signature = await provider.send(\"eth_signTypedData\", [\n      (await signer.getAddress()).toLowerCase(),\n      JSON.stringify(payload),\n    ]);\n  } else {\n    try {\n      signature = await (signer as JsonRpcSigner)._signTypedData(\n        domain,\n        types,\n        message,\n      );\n    } catch (err: any) {\n      if (err?.message?.includes(\"Method eth_signTypedData_v4 not supported\")) {\n        signature = await provider.send(\"eth_signTypedData\", [\n          (await signer.getAddress()).toLowerCase(),\n          JSON.stringify(payload),\n        ]);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  // fix ledger live where signature result in v = 0, 1. ethers magically fix it in split/join.\n  return {\n    payload,\n    signature: ethers.utils.joinSignature(\n      ethers.utils.splitSignature(signature),\n    ),\n  };\n}\n","export enum EventType {\n  /**\n   * The event is triggered when the transaction is submitted and completed.\n   * The transaction is submitted when it is sent to the relayer or the blockchain.\n   * The transaction is completed when it is confirmed by the blockchain.\n   *\n   * status: \"submitted\" | \"completed\"\n   * transactionHash: string of the transaction hash\n   */\n  Transaction = \"transaction\",\n\n  /**\n   * The event is triggered when wallet sign message is requested and completed.\n   *\n   * status: \"submitted\" | \"completed\"\n   * message: message to sign\n   * signature: signature of the message (only available when status is \"completed\")\n   */\n  Signature = \"signature\",\n}\n","import { AccessControlEnumerable } from \"@3rdweb/contracts\";\nimport { Log, TransactionReceipt } from \"@ethersproject/providers\";\nimport {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  ethers,\n  Signer,\n} from \"ethers\";\nimport { getContractMetadata, isContract } from \"../common/contract\";\nimport { MissingRoleError } from \"../common/error\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { ModuleType } from \"../common/module-type\";\nimport { getRoleHash, Role, SetAllRoles } from \"../common/role\";\nimport { signTypedData } from \"../common/sign\";\nimport { ISDKOptions } from \"../interfaces/ISdkOptions\";\nimport { ModuleMetadata } from \"../types/ModuleMetadata\";\nimport { EventType } from \"./events\";\nimport { ThirdwebSDK } from \"./index\";\nimport type {\n  GaslessTransaction,\n  MetadataURIOrObject,\n  ProviderOrSigner,\n} from \"./types\";\n\n/**\n * The root Module class. All other Modules extend this.\n * @remarks This should never be instantiated directly.\n * @public\n */\nexport class Module<TContract extends BaseContract = BaseContract> {\n  /**\n   * @readonly\n   */\n  public readonly address: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly ipfsGatewayUrl: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly options: ISDKOptions;\n\n  protected readonly sdk: ThirdwebSDK;\n\n  /**\n   * @internal\n   */\n  private _providerOrSigner: ProviderOrSigner | null = null;\n  /**\n   * @internal\n   */\n  protected get providerOrSigner(): ProviderOrSigner {\n    return this.signer || this._providerOrSigner || this.getProviderOrSigner();\n  }\n\n  private set providerOrSigner(value: ProviderOrSigner) {\n    this._providerOrSigner = value;\n  }\n\n  /**\n   * @internal\n   */\n  private _signer: Signer | null = null;\n  /**\n   * @internal\n   */\n  protected get signer(): Signer | null {\n    return this._signer;\n  }\n\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  /**\n   * Contract connects to the SDK signer or provider\n   * @internal\n   */\n  public contract: TContract;\n  /**\n   * Contract connects to the {@link ISDKOptions.readOnlyRpcUrl} if provided, otherwise connect to signer or provider\n   * @internal\n   */\n  public readOnlyContract: TContract;\n\n  /**\n   * @internal\n   */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    this.address = address;\n    this.options = options;\n    this.ipfsGatewayUrl = options.ipfsGatewayUrl;\n    this.setProviderOrSigner(providerOrSigner);\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n    this.sdk = sdk;\n  }\n\n  /**\n   * @public\n   * @returns whether the given contract exists on-chain\n   */\n  public async exists(): Promise<boolean> {\n    const provider = await this.getProvider();\n    invariant(provider, \"exists() -- No Provider\");\n    return isContract(provider, this.address);\n  }\n\n  /**\n   * @public\n   * Get the metadata of the contract.\n   *\n   * @param resolveUrls - Whether to resolve the urls in the metadata to a gateway.\n   */\n  public async getMetadata(resolveUrls = true): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const contract = this.connectContract();\n    const type = this.getModuleType();\n\n    return {\n      metadata: await getContractMetadata(\n        await this.getProvider(),\n        contract.address,\n        this.sdk.getStorage(),\n        resolveUrls,\n      ),\n      address: contract.address,\n      type,\n    };\n  }\n\n  /**\n   * @public\n   * Set new metadata on the contract and return it if successful.\n   * @param metadata - The metadata to set.\n   */\n  public async setMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n    return this.getMetadata();\n  }\n\n  /**\n   * @internal\n   */\n  public setProviderOrSigner(providerOrSigner: ProviderOrSigner) {\n    this.providerOrSigner = providerOrSigner;\n    if (Signer.isSigner(providerOrSigner)) {\n      this.signer = providerOrSigner;\n    }\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n  }\n\n  /**\n   * @internal\n   */\n  public clearSigner(): void {\n    this.signer = null;\n  }\n\n  /**\n   * @internal\n   */\n  private getProviderOrSigner(): ProviderOrSigner {\n    return this.signer || this.providerOrSigner;\n  }\n\n  /**\n   * @internal\n   */\n  protected getSigner(): Signer | null {\n    if (Signer.isSigner(this.signer)) {\n      return this.signer;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  protected hasValidSigner(): boolean {\n    return Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @internal\n   */\n  protected async getSignerAddress(): Promise<string> {\n    const signer = this.getSigner();\n    invariant(signer, \"Cannot get signer address without valid signer\");\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  protected async getProvider() {\n    return this.readOnlyContract.provider;\n  }\n\n  /**\n   * @internal\n   */\n  protected async getChainID(): Promise<number> {\n    const provider = await this.getProvider();\n    invariant(provider, \"getChainID() -- No Provider\");\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected connectContract(): TContract {\n    throw new Error(\"connectContract has to be implemented\");\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    throw new Error(\"getModuleType has to be implemented\");\n  }\n\n  /**\n   * @internal\n   */\n  protected async getCallOverrides(): Promise<CallOverrides> {\n    const chainId = await this.getChainID();\n    const speed = this.options.gasSpeed;\n    const maxGasPrice = this.options.maxGasPriceInGwei;\n    const gasPriceChain = await getGasPriceForChain(\n      chainId,\n      speed,\n      maxGasPrice,\n    );\n    if (!gasPriceChain) {\n      return {};\n    }\n    // TODO: support EIP-1559 by try-catch, provider.getFeeData();\n    return {\n      gasPrice: ethers.utils.parseUnits(gasPriceChain.toString(), \"gwei\"),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private emitTransactionEvent(\n    status: \"submitted\" | \"completed\",\n    transactionHash: string,\n  ) {\n    this.sdk.event.emit(EventType.Transaction, {\n      status,\n      transactionHash,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  protected async sendTransaction(\n    fn: string,\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    return this.sendContractTransaction(this.contract, fn, args, callOverrides);\n  }\n\n  /**\n   * @internal\n   */\n  protected async sendContractTransaction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n\n    if (\n      this.options.transactionRelayerUrl ||\n      this.options.gasless.biconomy.apiKey\n    ) {\n      const provider = await this.getProvider();\n      const txHash = await this.sendGaslessTransaction(\n        contract,\n        fn,\n        args,\n        callOverrides,\n      );\n      this.emitTransactionEvent(\"submitted\", txHash);\n      const receipt = await provider.waitForTransaction(txHash);\n      this.emitTransactionEvent(\"completed\", txHash);\n      return receipt;\n    } else {\n      const tx = await this.sendTransactionByFunction(\n        contract,\n        fn,\n        args,\n        callOverrides,\n      );\n      this.emitTransactionEvent(\"submitted\", tx.hash);\n      const receipt = tx.wait();\n      this.emitTransactionEvent(\"completed\", tx.hash);\n      return receipt;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendTransactionByFunction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<ContractTransaction> {\n    const func: ethers.ContractFunction = contract.functions[fn];\n    if (!func) {\n      throw new Error(\"invalid function\");\n    }\n    return await func(...args, callOverrides);\n  }\n\n  /**\n   * @internal\n   */\n  private async sendGaslessTransaction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    invariant(\n      signer,\n      \"Cannot execute gasless transaction without valid signer\",\n    );\n    const provider = await this.getProvider();\n    invariant(provider, \"no provider to execute transaction\");\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.address;\n    const value = callOverrides?.value || 0;\n\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\n        \"Cannot send native token value with gasless transaction\",\n      );\n    }\n\n    const data = contract.interface.encodeFunctionData(fn, args);\n\n    const gasEstimate = await contract.estimateGas[fn](...args);\n    let gas = gasEstimate.mul(2);\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // it'd estimate ~21740 on polygon.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gasEstimate.lt(25000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    const tx: GaslessTransaction = {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: fn,\n      functionArgs: args,\n      callOverrides,\n    };\n\n    const txHash = await this.options.gaslessSendFunction(contract, tx);\n    return txHash;\n  }\n\n  /**\n   * @internal\n   */\n  protected async signTypedDataEmitEvent(\n    signer: ethers.Signer,\n    domain: {\n      name: string;\n      version: string;\n      chainId: number;\n      verifyingContract: string;\n    },\n    types: any,\n    message: any,\n  ): Promise<BytesLike> {\n    let signature = \"\";\n\n    this.sdk.event.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature,\n    });\n\n    const { signature: sig } = await signTypedData(\n      signer,\n      domain,\n      types,\n      message,\n    );\n    signature = sig;\n\n    this.sdk.event.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature,\n    });\n    return signature;\n  }\n\n  protected parseEventLogs(eventName: string, logs?: Log[]): any {\n    if (!logs) {\n      return null;\n    }\n    for (const log of logs) {\n      try {\n        const event = this.contract.interface.decodeEventLog(\n          eventName,\n          log.data,\n          log.topics,\n        );\n        return event;\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n    }\n    return null;\n  }\n\n  protected parseLogs<T = any>(\n    eventName: string,\n    logs?: Log[],\n    contract: BaseContract = this.contract,\n  ): T[] {\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n    const topic = contract.interface.getEventTopic(eventName);\n    const parsedLogs = logs.filter((x) => x.topics.indexOf(topic) >= 0);\n    return parsedLogs.map(\n      (l) => contract.interface.parseLog(l) as unknown as T,\n    );\n  }\n}\n\n/**\n * Extends the {@link Module} class to add {@link Role} functionality.\n *\n * @public\n */\nexport class ModuleWithRoles<\n  TContract extends AccessControlEnumerable = AccessControlEnumerable,\n> extends Module<TContract> {\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    throw new Error(\"getModuleRoles has to be implemented by a subclass\");\n  }\n\n  /**\n   * @internal\n   */\n  private get roles() {\n    return this.getModuleRoles();\n  }\n\n  /** @internal */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    super(providerOrSigner, address, options, sdk);\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   *\n   * @param role - The {@link IRoles | role} to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\n   * @see {@link ModuleWithRoles.getAllRoleMembers | getAllRoleMembers} to get get a list of addresses for all supported roles on the module.\n   * @example Say you want to get the list of addresses that are members of the {@link IRoles.minter | minter} role.\n   * ```typescript\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\n   * ```\n   *\n   * @public\n   */\n  public async getRoleMembers(role: Role): Promise<string[]> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const contract = this.contract;\n    const roleHash = getRoleHash(role);\n    const count = (await contract.getRoleMemberCount(roleHash)).toNumber();\n    return await Promise.all(\n      Array.from(Array(count).keys()).map((i) =>\n        contract.getRoleMember(roleHash, i),\n      ),\n    );\n  }\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the module.\n   *\n   * @see {@link ModuleWithRoles.getRoleMembers | getRoleMembers} to get a list of addresses that are members of a specific role.\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the module does not support roles this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async getAllRoleMembers(): Promise<Partial<Record<Role, string[]>>> {\n    invariant(this.roles.length, \"this module has no support for roles\");\n    const roles: Partial<Record<Role, string[]>> = {};\n    for (const role of this.roles) {\n      roles[role] = await this.getRoleMembers(role);\n    }\n    return roles;\n  }\n  /**\n   * Call this to OVERWRITE the list of addresses that are members of specific roles.\n   *\n   * Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ModuleWithRoles.grantRole | grantRole} and {@link ModuleWithRoles.grantRole | revokeRole} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\n   * @example Say you want to overwrite the list of addresses that are members of the {@link IRoles.minter | minter} role.\n   * ```typescript\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\n   * await module.setAllRoleMembers({\n   *  minter: []\n   * });\n   * console.log(await module.getRoleMemberList(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   *\n   * */\n  public async setAllRoleMembers(\n    rolesWithAddresses: SetAllRoles,\n  ): Promise<any> {\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(\n      roles.every((role) => this.roles.includes(role as Role)),\n      \"this module does not support the given role\",\n    );\n    const currentRoles = await this.getAllRoleMembers();\n    const encoded: string[] = [];\n    // add / rmove admin role at the end so we don't revoke admin then grant\n    roles\n      .sort((role) => (role === \"admin\" ? 1 : -1))\n      .forEach(async (role) => {\n        const addresses = rolesWithAddresses[role as Role] || [];\n        const currentAddresses = currentRoles[role as Role] || [];\n        const toAdd = addresses.filter(\n          (address) => !currentAddresses.includes(address),\n        );\n        const toRemove = currentAddresses.filter(\n          (address) => !addresses.includes(address),\n        );\n        if (toAdd.length) {\n          toAdd.forEach((address) => {\n            encoded.push(\n              this.contract.interface.encodeFunctionData(\"grantRole\", [\n                getRoleHash(role as Role),\n                address,\n              ]),\n            );\n          });\n        }\n        if (toRemove.length) {\n          toRemove.forEach(async (address) => {\n            const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n              address,\n            )) as any;\n            encoded.push(\n              this.contract.interface.encodeFunctionData(revokeFunctionName, [\n                getRoleHash(role as Role),\n                address,\n              ]),\n            );\n          });\n        }\n      });\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n  /**\n   *\n   * Call this to revoke all roles given to a specific address.\n   * @param address - The address to revoke all roles for.\n   * @returns A list of roles that were revoked.\n   *\n   * @public\n   *\n   */\n\n  public async revokeAllRolesFromAddress(address: string): Promise<Role[]> {\n    const currentRoles = await this.getAllRoleMembers();\n    const encoded: string[] = [];\n    const rolesRemoved: Role[] = [];\n    // revoke / renounce admin role at the end\n    Object.keys(currentRoles)\n      .sort((role) => (role === \"admin\" ? 1 : -1))\n      .forEach(async (role) => {\n        if (currentRoles[role as Role]?.includes(address)) {\n          const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n            address,\n          )) as any;\n          encoded.push(\n            this.contract.interface.encodeFunctionData(revokeFunctionName, [\n              getRoleHash(role as Role),\n              address,\n            ]),\n          );\n          rolesRemoved.push(role as Role);\n        }\n      });\n    await this.sendTransaction(\"multicall\", [encoded]);\n    return rolesRemoved;\n  }\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks\n   *\n   * Make sure you are sure you want to grant the role to the address.\n   *\n   * @param role - The {@link IRoles | role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async grantRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    return await this.sendTransaction(\"grantRole\", [\n      getRoleHash(role),\n      address,\n    ]);\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the {@link IRoles.admin | admin} role, you will no longer be able to administer the module.\n   * There is no way to recover from this.\n   *\n   * @param role - The {@link IRoles | role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async revokeRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n    return await this.sendTransaction(revokeFunctionName, [\n      getRoleHash(role),\n      address,\n    ]);\n  }\n\n  private async getRevokeRoleFunctionName(address: string): Promise<string> {\n    const signerAddress = await this.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n\n  /**\n   * Prepares any set of metadata for uploading by recursively converting all Buffer|Blob|File objects\n   * into a hash of the object after its been uploaded to distributed storage (e.g. IPFS). After uploading\n   * any File|Buffer|Blob, the metadata is serialized to a string.\n   *\n   * @param metadata - The list of metadata to prepare for upload.\n   * @returns - The serialized metadata object.\n   */\n  public async prepareMetadata(metadata: MetadataURIOrObject): Promise<string> {\n    if (typeof metadata === \"string\") {\n      return metadata;\n    }\n\n    const _fileHandler = async (object: any) => {\n      const keys = Object.keys(object);\n      for (const key in keys) {\n        const val = object[keys[key]];\n        const shouldUpload = val instanceof File || val instanceof Buffer;\n        if (shouldUpload) {\n          object[keys[key]] = await this.sdk\n            .getStorage()\n            .upload(object[keys[key]]);\n        }\n        if (shouldUpload && typeof object[keys[key]] !== \"string\") {\n          throw new Error(\"Upload to IPFS failed\");\n        }\n        if (typeof val === \"object\") {\n          object[keys[key]] = await _fileHandler(object[keys[key]]);\n        }\n      }\n      return object;\n    };\n\n    metadata = await _fileHandler(metadata);\n    // TODO: use json2typescript to convert metadata to string\n    return JSON.stringify(metadata);\n  }\n\n  /**\n   * Prepares a list of metadata for uploading.\n   *\n   * @param metadata - List of metadata to prepare for upload.\n   * @returns - List of metadata prepared for upload.\n   */\n  public async prepareBatchMetadata(\n    metadata: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    return await Promise.all(\n      metadata.map(async (m) => await this.prepareMetadata(m)),\n    );\n  }\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   */\n  protected async onlyRoles(roles: Role[], address: string): Promise<void> {\n    await Promise.all(\n      roles.map(async (role) => {\n        const members = await this.getRoleMembers(role);\n        if (\n          !members.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n        ) {\n          throw new MissingRoleError(address, role);\n        }\n      }),\n    );\n  }\n}\n","import { AddressZero } from \"@ethersproject/constants\";\nimport {\n  ERC20__factory,\n  ERC721__factory,\n  SignatureMint1155,\n  SignatureMint1155__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BytesLike, ethers, Signer } from \"ethers\";\nimport { ModuleType, NATIVE_TOKEN_ADDRESS, Role, RolesMap } from \"../common\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport {\n  MintRequestStructOutput,\n  MintWithSignatureEvent,\n} from \"@3rdweb/contracts/dist/SignatureMint1155\";\nimport {\n  Erc1155SignaturePayload,\n  NewErc1155SignaturePayload,\n} from \"../types/signature-minting\";\nimport { hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes } from \"ethers/lib/utils\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport interface TokenERC1155Metadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  quantityOwnedByAddress: BigNumber;\n}\n\n/**\n * @beta\n */\n\nexport interface TokenERC1155CreateAndMintArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\n\nexport interface TokenERC1155AlreadyMintedArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\nconst MintRequest = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"tokenId\", type: \"uint256\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"quantity\", type: \"uint256\" },\n  { name: \"pricePerToken\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\n/**\n * Create a collection of NFTs that lets you optionally mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getBundleModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class SignatureMint1155Module\n  extends ModuleWithRoles<SignatureMint1155>\n  implements ITransferable\n{\n  public static moduleType: ModuleType = ModuleType.BUNDLE_SIGNATURE;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return SignatureMint1155Module.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): SignatureMint1155 {\n    return SignatureMint1155__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return SignatureMint1155Module.moduleType;\n  }\n\n  /**\n   *\n   * Get a single bundle item by tokenId.\n   * @param tokenId - the unique token id of the nft\n   * @returns A promise that resolves to a `BundleMetadata`.\n   */\n  public async get(\n    tokenId: string,\n    address?: string,\n  ): Promise<TokenERC1155Metadata> {\n    const [metadata, supply, ownedByAddress] = await Promise.all([\n      getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage()),\n      this.readOnlyContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(\"0\")),\n      address ? (await this.balanceOf(address, tokenId)).toNumber() : 0,\n    ]);\n    return {\n      supply,\n      metadata,\n      quantityOwnedByAddress: BigNumber.from(ownedByAddress),\n    };\n  }\n\n  /**\n   * Get NFT Data\n   *\n   * @remarks Get data associated with NFTs in this module.\n   *\n   * @example\n   * ```javascript\n   * // You can get every NFT in the module\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   *\n   * // Or you can get optionally get the NFTs owned by a specific wallet\n   * const address = \"{{wallet_address}}\"; // The address you want to get the NFTs for;\n   * const ownedNfts = await module.getAll(address);\n   * console.log(ownedNfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(address?: string): Promise<TokenERC1155Metadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.get(i.toString(), address),\n      ),\n    );\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   * // The token ID of the NFT you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await module.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(\n      await this.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(\n    address: string,\n    operator: string,\n    assetContract?: string,\n    assetId?: BigNumberish,\n  ): Promise<boolean> {\n    if (!assetContract) {\n      return await this.readOnlyContract.isApprovedForAll(address, operator);\n    }\n    if (!assetId) {\n      throw new Error(\"tokenId is required\");\n    }\n    const contract = ERC721__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n    const approved = await contract.isApprovedForAll(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    const isTokenApproved =\n      (await contract.getApproved(assetId)).toLowerCase() ===\n      this.address.toLowerCase();\n    return approved || isTokenApproved;\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of NFTs you want to send\n   * const amount = 1;\n   *\n   * await module.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.transferFrom(\n      await this.getSignerAddress(),\n      to,\n      { tokenId, amount },\n      [0],\n    );\n  }\n\n  public async createAndMint(args: TokenERC1155CreateAndMintArgs) {\n    await this.createAndMintTo(await this.getSignerAddress(), args);\n  }\n\n  public async createAndMintTo(\n    to: string,\n    args: TokenERC1155CreateAndMintArgs,\n  ) {\n    const uri = await this.sdk.getStorage().uploadMetadata(args.metadata);\n    await this.sendTransaction(\"mintTo\", [\n      to,\n      ethers.constants.MaxUint256,\n      uri,\n      args.supply,\n    ]);\n  }\n\n  public async createAndMintBatch(args: TokenERC1155CreateAndMintArgs[]) {\n    await this.createAndMintBatchTo(await this.getSignerAddress(), args);\n  }\n\n  public async createAndMintBatchTo(\n    to: string,\n    args: TokenERC1155CreateAndMintArgs[],\n  ) {\n    const metadatas = args.map((a) => a.metadata);\n    const amounts = args.map((a) => a.supply);\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const encoded = uris.map((uri, index) =>\n      this.readOnlyContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        ethers.constants.MaxUint256,\n        uri,\n        amounts[index],\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async mintAdditionalCopiesTo(\n    to: string,\n    args: TokenERC1155AlreadyMintedArgs,\n  ) {\n    await this.sendTransaction(\"mintTo\", [to, args.tokenId, \"\", args.amount]);\n  }\n\n  public async mintAdditionalCopiesBatchTo(\n    to: string,\n    args: TokenERC1155AlreadyMintedArgs[],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    const encoded = ids.map((id, index) =>\n      this.readOnlyContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        id,\n        \"\",\n        amounts[index],\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Burn NFT\n   *\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   * // The number of specified NFTs you want to burn\n   * const amount = 1\n   *\n   * await module.burn({ tokenId, amount });\n   * ```\n   */\n  public async burn(\n    args: TokenERC1155AlreadyMintedArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.burnFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnBatch(\n    args: TokenERC1155AlreadyMintedArgs[],\n  ): Promise<TransactionReceipt> {\n    return await this.burnBatchFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnFrom(\n    account: string,\n    args: TokenERC1155AlreadyMintedArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [\n      account,\n      args.tokenId,\n      args.amount,\n    ]);\n  }\n\n  public async burnBatchFrom(\n    account: string,\n    args: TokenERC1155AlreadyMintedArgs[],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: TokenERC1155AlreadyMintedArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  /**\n   * Transfer Many NFTs\n   *\n   * @remarks Transfer NFTs from the one wallet to another.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to send the NFT from\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The data of the NFTs you want to send\n   * const data = [{\n   *   tokenId: 1, // The token ID of the NFT you want to send\n   *   amount: 1, // The number of this NFT you want to send\n   * }, {\n   *   tokenId: 2,\n   *   amount: 1,\n   * }]\n   *\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await module.transferBatchFrom(fromAddress, toAddress, data);\n   * ```\n   */\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: TokenERC1155AlreadyMintedArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  /**\n   * Set the royalty recipient and fee for this contract\n   * @param recipientAddress\n   * @param fee\n   */\n  public async setDefaultRoyaltyInfo(\n    recipientAddress: string,\n    fee: number,\n  ): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.fee_recipient = recipientAddress;\n    metadata.seller_fee_basis_points = fee;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setDefaultRoyaltyInfo\", [\n        recipientAddress,\n        fee,\n      ]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Set the royalty recipient and fee for a particular token\n   * @param recipientAddress\n   * @param fee\n   */\n  public async setTokenRoyaltyInfo(\n    tokenId: BigNumberish,\n    recipientAddress: string,\n    fee: number,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyInfoForToken\", [\n      tokenId,\n      recipientAddress,\n      fee,\n    ]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<TokenERC1155Metadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenIdToMint();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (item) => {\n        const token = await this.get(item.tokenId.toString());\n        return { ...token, ownedByAddress: item.balance };\n      }),\n    );\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of the contract\n   *\n   * @returns - The royalty recipient and BPS\n   */\n  public async getDefaultRoyaltyInfo(): Promise<[string, number]> {\n    return await this.readOnlyContract.getDefaultRoyaltyInfo();\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of a particular token\n   *\n   * @returns - The royalty recipient and BPS\n   */\n  public async getTokenRoyaltyInfo(\n    tokenId: BigNumberish,\n  ): Promise<[string, number]> {\n    return await this.readOnlyContract.getRoyaltyInfoForToken(tokenId);\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  // Signature based minting\n\n  public async mintWithSignature(\n    req: Erc1155SignaturePayload,\n    signature: string,\n  ): Promise<BigNumber> {\n    const message = { ...this.mapPayload(req), uri: req.uri };\n    const overrides = await this.getCallOverrides();\n    await this.setAllowance(\n      BigNumber.from(message.pricePerToken).mul(req.quantity),\n      req.currencyAddress,\n      overrides,\n    );\n\n    const receipt = await this.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n\n    const t = await this.parseLogs<MintWithSignatureEvent>(\n      \"MintWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n\n    return t[0].args.tokenIdMinted;\n  }\n\n  public async verify(\n    mintRequest: Erc1155SignaturePayload,\n    signature: string,\n  ): Promise<boolean> {\n    const message = this.mapPayload(mintRequest);\n    const v = await this.readOnlyContract.verify(\n      { ...message, uri: mintRequest.uri },\n      signature,\n    );\n    return v[0];\n  }\n\n  public async generateSignatureBatch(\n    payloads: NewErc1155SignaturePayload[],\n  ): Promise<{ payload: Erc1155SignaturePayload; signature: string }[]> {\n    const resolveId = (mintRequest: NewErc1155SignaturePayload): string => {\n      if (mintRequest.id === undefined) {\n        const buffer = Buffer.alloc(16);\n        uuidv4({}, buffer);\n        return hexlify(toUtf8Bytes(buffer.toString(\"hex\")));\n      } else {\n        return hexlify(mintRequest.id as string);\n      }\n    };\n\n    await this.onlyRoles([\"minter\"], await this.getSignerAddress());\n\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(payloads.map((r) => r.metadata));\n\n    const chainId = await this.getChainID();\n    const signer = this.getSigner() as Signer;\n\n    return await Promise.all(\n      payloads.map(async (m, i) => {\n        const id = resolveId(m);\n        const uri = uris[i];\n        return {\n          payload: {\n            ...m,\n            id,\n            uri,\n          },\n          signature: (\n            await this.signTypedDataEmitEvent(\n              signer,\n              {\n                name: \"SignatureMint1155\",\n                version: \"1\",\n                chainId,\n                verifyingContract: this.address,\n              },\n              { MintRequest },\n              {\n                uri,\n                ...(this.mapPayload(m) as any),\n                uid: id,\n              },\n            )\n          ).toString(),\n        };\n      }),\n    );\n  }\n\n  public async generateSignature(\n    mintRequest: NewErc1155SignaturePayload,\n  ): Promise<{ payload: Erc1155SignaturePayload; signature: string }> {\n    return (await this.generateSignatureBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private mapPayload(\n    mintRequest: Erc1155SignaturePayload | NewErc1155SignaturePayload,\n  ): MintRequestStructOutput {\n    return {\n      to: mintRequest.to,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      tokenId: mintRequest.tokenId,\n      quantity: mintRequest.quantity,\n      pricePerToken: mintRequest.price,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTimeEpochSeconds,\n      validityStartTimestamp: mintRequest.mintStartTimeEpochSeconds,\n      uid: mintRequest.id,\n    } as MintRequestStructOutput;\n  }\n\n  // TODO: write in common place and stop duping\n  private async setAllowance(\n    value: BigNumber,\n    currencyAddress: string,\n    overrides: any,\n  ): Promise<any> {\n    if (\n      currencyAddress === NATIVE_TOKEN_ADDRESS ||\n      currencyAddress === AddressZero\n    ) {\n      overrides[\"value\"] = value;\n    } else {\n      const erc20 = ERC20__factory.connect(\n        currencyAddress,\n        this.providerOrSigner,\n      );\n      const owner = await this.getSignerAddress();\n      const spender = this.address;\n      const allowance = await erc20.allowance(owner, spender);\n\n      if (allowance.lt(value)) {\n        await this.sendContractTransaction(erc20, \"increaseAllowance\", [\n          spender,\n          value.sub(allowance),\n        ]);\n      }\n      return overrides;\n    }\n  }\n}\n","import { ethers } from \"ethers\";\nimport { ChainId, SUPPORTED_CHAIN_ID } from \"./chain\";\n\nexport const FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\nexport const CONTRACT_ADDRESSES: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  Record<\"registry\" | \"biconomyForwarder\", string>\n> = {\n  [ChainId.Mainnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\",\n  },\n  [ChainId.Rinkeby]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0xFD4973FeB2031D4409fB57afEE5dF2051b171104\",\n  },\n  [ChainId.Polygon]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n  },\n  [ChainId.Mumbai]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\",\n  },\n  [ChainId.Avalanche]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\",\n  },\n  [ChainId.Fantom]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: ethers.constants.AddressZero,\n  },\n  [ChainId.FantomTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: ethers.constants.AddressZero,\n  },\n  [ChainId.Hardhat]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: ethers.constants.AddressZero,\n  },\n};\n\nexport function getContractAddressByChainId(\n  chainId: ChainId,\n  contractName: \"registry\" | \"biconomyForwarder\" = \"registry\",\n): string | undefined {\n  return CONTRACT_ADDRESSES[chainId as SUPPORTED_CHAIN_ID][contractName];\n}\n","import { BaseContract, BigNumber } from \"ethers\";\n\n/**\n * @internal\n */\nexport const ForwardRequest = [\n  { name: \"from\", type: \"address\" },\n  { name: \"to\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"gas\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"data\", type: \"bytes\" },\n];\n\n/**\n * @internal\n */\nexport const BiconomyForwarderAbi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"uint256\", name: \"batchId\", type: \"uint256\" },\n    ],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _nonces: Record<string, BigNumber> = {};\nconst _noncesSyncTimestamp: Record<string, number> = {};\n\n/**\n * @internal\n */\nexport async function getAndIncrementNonce(\n  forwarder: BaseContract,\n  forwarderFunction: string,\n  forwarderArgs: any[],\n): Promise<BigNumber> {\n  // address is only used for internal caching :)\n  const address = forwarderArgs.join(\"|\");\n\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n\n  if (!(address in _nonces) || shouldSync) {\n    const nonceResult = await forwarder.functions[forwarderFunction](\n      ...forwarderArgs,\n    );\n    if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n      _nonces[address] = BigNumber.from(nonceResult[0]);\n    } else {\n      _nonces[address] = BigNumber.from(nonceResult);\n    }\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n","import { BigNumber, BigNumberish, Contract, ethers, Signer } from \"ethers\";\nimport { EIP712Domain, EIP712StandardDomain, signTypedData } from \"./sign\";\n\nconst NAME_ABI = [\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst DOMAIN_SEPARATOR_ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeperator\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst NONCES_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"user\", type: \"address\" }],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"nonce\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nasync function getSignerNonce(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, NONCES_ABI, signer);\n  try {\n    return await contract.nonces(await signer.getAddress());\n  } catch (err) {\n    return await contract.getNonce(await signer.getAddress());\n  }\n}\n\nasync function getDomainSeperator(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n  try {\n    return await contract.DOMAIN_SEPARATOR();\n  } catch (err) {\n    return await contract.getDomainSeperator();\n  }\n}\n\nasync function getTokenName(signer: Signer, contractAddress: string) {\n  return new Contract(contractAddress, NAME_ABI, signer).name();\n}\n\n/**\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\n */\nasync function getChainDomainSeperator(\n  signer: Signer,\n  domain: EIP712StandardDomain,\n) {\n  const contractDomainSeparator = await getDomainSeperator(\n    signer,\n    domain.verifyingContract,\n  );\n\n  const polygonDomain: EIP712Domain = {\n    name: domain.name,\n    version: domain.version,\n    verifyingContract: domain.verifyingContract,\n    salt: ethers.utils.hexZeroPad(\n      BigNumber.from(domain.chainId).toHexString(),\n      32,\n    ),\n  };\n\n  if (\n    ethers.utils._TypedDataEncoder.hashDomain(polygonDomain) ===\n    contractDomainSeparator\n  ) {\n    return polygonDomain;\n  }\n\n  return domain;\n}\n\n/**\n * @internal\n */\nexport async function signDAIPermit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  allowed = true,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    nonce,\n    deadline,\n    value: 0,\n    allowed,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"holder\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"expiry\", type: \"uint256\" },\n      { name: \"allowed\", type: \"bool\" },\n    ],\n  };\n\n  const { signature } = await signTypedData(signer, domain, types, {\n    holder: owner,\n    spender,\n    nonce,\n    expiry: deadline,\n    allowed,\n  });\n\n  return {\n    message,\n    signature,\n  };\n}\n\n/**\n * @internal\n */\nexport async function signEIP2612Permit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  value: BigNumberish,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    value,\n    nonce,\n    deadline,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"owner\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"value\", type: \"uint256\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ],\n  };\n\n  const { signature } = await signTypedData(signer, domain, types, message);\n  return {\n    message,\n    signature,\n  };\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport FileOrBuffer from \"../FileOrBuffer\";\n\n/**\n * CommonModuleMetadata defines the common properties of a module deployment.\n */\n@JsonObject(\"CommonModuleMetadata\")\nexport class CommonModuleMetadata {\n  /**\n   * The name of the module.\n   */\n  @JsonProperty(\"name\", String)\n  name = \"\";\n\n  /**\n   * The description of the module.\n   */\n  @JsonProperty(\"description\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  description?: string = undefined;\n\n  /**\n   * An image for the module.\n   *\n   * If the image is a File or Buffer, it will be uploaded to IPFS.\n   * If the image is a string, it will be used as-is (in case you already uploaded it to IPFS\n   * and the property is the IPFS hash uri).\n   */\n  @JsonProperty(\"image\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  image?: string | FileOrBuffer = undefined;\n\n  /**\n   * An external link for the module.\n   */\n  @JsonProperty(\"external_link\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  externalLink?: string = undefined;\n}\n\nexport default CommonModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"BundleDropModuleMetadata\")\nexport class BundleDropModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints? = 0;\n\n  /**\n   * The amount of fees collected on the primary sale, represented as basis points. The default is 0.\n   *\n   * For example, if the primary sale is $100 and the primary fee is 1000 BPS, then the primary fee of $10\n   * is distributed to the primary sale recipient.\n   *\n   * The destination for this fee is either the project address, or a Splits contract address\n   * if it was set using the `setModuleRoyaltyTreasury` method.\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"primary_sale_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleFeeBasisPoints? = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n  /**\n   * The address of the receiver of the initial sale.You can use this field to\n   * distribute the initial sale proceeds. All drop contracts are required to set this field,\n   * even if the tokens are planned to be free. If you plan to do a free drop, you can set this\n   * field to `AddressZero`\n   *\n   * This does not effect royalties in any way.\n   *\n   * For example, if a token is sold for $100, and there is a 0% fee,\n   * then $100 will be distributed to the address set on this property.\n   *\n   * If the token is sold for $100, and there is a 10% primary sale fee,\n   * then $90 will be distributed to the address set on this property.\n   *\n   * All secondary sales will use the `sellerFeeBasisPoints` and royalty recipient address.\n   */\n  @JsonProperty(\"primary_sale_recipient_address\", String)\n  primarySaleRecipientAddress = \"\";\n}\n\n// For backwards compatibility\nexport default BundleDropModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CollectionModuleMetadata\")\nexport class BundleModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n\nexport type CollectionModuleMetadata = BundleModuleMetadata;\n\nexport default BundleModuleMetadata;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport { CommonModuleMetadata } from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CurrencyModuleMetadata\")\nexport class CurrencyModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The symbol for the Currency (required)\n   */\n  @JsonProperty(\"symbol\", String)\n  symbol = \"\";\n}\n\nexport default CurrencyModuleMetadata;\n","import { JsonObject } from \"json2typescript\";\nimport { CommonModuleMetadata } from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DatastoreModuleMetadata\")\nexport class DatastoreModuleMetadata extends CommonModuleMetadata {}\n\nexport default DatastoreModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport { CommonModuleMetadata } from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DropModuleMetadata\")\nexport class DropModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints? = 0;\n\n  /**\n   * The amount of fees collected on the primary sale, represented as basis points. The default is 0.\n   *\n   * For example, if the primary sale is $100 and the primary fee is 1000 BPS, then the primary fee of $10\n   * is distributed to the primary sale recipient.\n   *\n   * The destination for this fee is either the project address, or a Splits contract address\n   * if it was set using the `setModuleRoyaltyTreasury` method.\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"primary_sale_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleFeeBasisPoints? = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the Drop Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n\n  /**\n   * The max supply\n   *\n   * @deprecated - No longer applicable. This value is ignored.\n   */\n  @JsonProperty(\"max_supply\", Number, PropertyConvertingMode.IGNORE_NULLABLE)\n  maxSupply? = 1;\n\n  /**\n   * The address of the receiver of the initial sale.You can use this field to\n   * distribute the initial sale proceeds. All drop contracts are required to set this field,\n   * even if the tokens are planned to be free. If you plan to do a free drop, you can set this\n   * field to `AddressZero`\n   *\n   * This does not effect royalties in any way.\n   *\n   * For example, if a token is sold for $100, and there is a 0% fee,\n   * then $100 will be distributed to the address set on this property.\n   *\n   * If the token is sold for $100, and there is a 10% primary sale fee,\n   * then $90 will be distributed to the address set on this property.\n   *\n   * All secondary sales will use the `sellerFeeBasisPoints` and royalty recipient address.\n   */\n  @JsonProperty(\"primary_sale_recipient_address\", String)\n  primarySaleRecipientAddress = \"\";\n\n  /**\n   * The IPFS base URI thats prepended to all token URIs. This allows\n   * you to batch upload all the metadata for the tokens ahead of time\n   * so they can be lazy minted later\n   *\n   * e.g. if a Drop Collection has a token URI of /ipfs/BOREDAPES/TOKEN1, then the IPFS base URI is /BOREDAPES/\n   *\n   * @deprecated - No longer applicable. This value is ignored.\n   */\n  @JsonProperty(\n    \"base_token_uri\",\n    String,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  baseTokenUri? = \"\";\n}\n\nexport default DropModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"MarketModuleMetadata\")\nexport class MarketModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The fee collected on all sales out of this marketplace. This fee\n   * only applies to items sold from the marketplace and does not\n   * include any resale royalties that occur outside of this marketplace.\n   * The default is 0 (no fees).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  marketFeeBasisPoints = 0;\n}\n\nexport default MarketModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"MarketplaceModuleMetadata\")\nexport class MarketplaceModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The fee collected on all sales out of this marketplace. This fee\n   * only applies to items sold from the marketplace and does not\n   * include any resale royalties that occur outside of this marketplace.\n   * The default is 0 (no fees).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  marketFeeBasisPoints = 0;\n}\n\nexport default MarketplaceModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"NftModuleMetadata\")\nexport class NftModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the NFT Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n\n  /**\n   * The address of the receiver of the initial sale.You can use this field to\n   * distribute the initial sale proceeds. All drop contracts are required to set this field,\n   * even if the tokens are planned to be free. If you plan to do a free drop, you can set this\n   * field to `AddressZero`\n   *\n   * This does not effect royalties in any way.\n   *\n   * For example, if a token is sold for $100, and there is a 0% fee,\n   * then $100 will be distributed to the address set on this property.\n   *\n   * If the token is sold for $100, and there is a 10% primary sale fee,\n   * then $90 will be distributed to the address set on this property.\n   *\n   * All secondary sales will use the `sellerFeeBasisPoints` and royalty recipient address.\n   */\n  @JsonProperty(\n    \"default_sale_recipient_address\",\n    String,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  defaultSaleRecipientAddress? = \"\";\n\n  /**\n   * The amount of fees collected on the primary sale, represented as basis points. The default is 0.\n   *\n   * For example, if the primary sale is $100 and the primary fee is 1000 BPS, then the primary fee of $10\n   * is distributed to the primary sale recipient.\n   *\n   * The destination for this fee is either the project address, or a Splits contract address\n   * if it was set using the `setModuleRoyaltyTreasury` method.\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"sale_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleFeeBasisPoints? = 0;\n}\n\nexport default NftModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"PackModuleMetadata\")\nexport class PackModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n\nexport default PackModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\nimport { NewSplitRecipient } from \"./NewSplitRecipient\";\n\n@JsonObject(\"SplitsModuleMetadata\")\nexport class SplitsModuleMetadata extends CommonModuleMetadata {\n  recipientSplits: NewSplitRecipient[] = [];\n\n  @JsonProperty(\"is_royalty\", Boolean, PropertyConvertingMode.IGNORE_NULLABLE)\n  isRoyalty?: boolean = false;\n}\n\nexport default SplitsModuleMetadata;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"TokenModuleMetadata\")\nexport class TokenModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The symbol for the Currency (required)\n   */\n  @JsonProperty(\"symbol\", String)\n  symbol = \"\";\n}\n\nexport default TokenModuleMetadata;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"VoteModuleMetadata\")\nexport class VoteModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The wait time before a proposal can begin being voted on (seconds).\n   */\n  @JsonProperty(\"proposal_start_time_in_seconds\", Number)\n  proposalStartWaitTimeInSeconds = 0;\n\n  /**\n   * How long a proposal is open for voting (seconds).\n   */\n  @JsonProperty(\"proposal_voting_time_in_seconds\", Number)\n  proposalVotingTimeInSeconds = 0;\n\n  /**\n   * **Do not set this property directly. It will be set by the SDK. Unless you know what you're doing.**\n   *\n   * Every proposal will wait `votingDelay` number of blocks before it can be voted on.\n   */\n  @JsonProperty(\"voting_delay\", Number)\n  votingDelay? = 0;\n\n  /**\n   * **Do not set this property directly. It will be set by the SDK. Unless you know what you're doing.**\n   *\n   * The voting period is the number of blocks that a proposal will be open for voting.\n   * This varies by chain.\n   */\n  @JsonProperty(\"voting_period\", Number)\n  votingPeriod? = 0;\n\n  /**\n   * The ERC20 token address that is used in the voting process.\n   */\n  @JsonProperty(\"voting_token_address\", String)\n  votingTokenAddress = \"\";\n\n  /**\n   * Quorum required for a proposal to be successful. This value should be between 0-100 and represents a percentage.\n   *\n   * By default it is set to 0.\n   */\n  @JsonProperty(\"voting_quorum_fraction\", Number)\n  votingQuorumFraction = 0;\n\n  /**\n   * The minimum number of tokens required to propose a proposal.\n   */\n  @JsonProperty(\"proposal_token_threshold\", String)\n  minimumNumberOfTokensNeededToPropose = \"0\";\n}\n\nexport default VoteModuleMetadata;\n","import { Provider } from \"@ethersproject/providers\";\nimport {\n  ChainId,\n  SUPPORTED_CHAIN_ID,\n  SUPPORTED_CHAIN_IDS,\n} from \"../common/chain\";\nimport { invariant } from \"../common/invariant\";\n\n/**\n * Fallback map of default block mining times in seconds.\n\n */\nexport const DEFAULT_BLOCK_TIMES_FALLBACK: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  { secondsBetweenBlocks: number; synced: boolean }\n> = {\n  [ChainId.Mainnet]: {\n    secondsBetweenBlocks: 15,\n    synced: false,\n  },\n  [ChainId.Rinkeby]: {\n    secondsBetweenBlocks: 15,\n    synced: false,\n  },\n  [ChainId.Polygon]: {\n    secondsBetweenBlocks: 2.5,\n    synced: false,\n  },\n  [ChainId.Mumbai]: {\n    secondsBetweenBlocks: 2.5,\n    synced: false,\n  },\n  [ChainId.Fantom]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.FantomTestnet]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.Avalanche]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.Hardhat]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n};\n\n/**\n * Given a time in second, return the block number that the time is in.\n *\n * @param timeInEpochSeconds - The time in seconds.\n * @param chainId - The chain id.\n * @returns - The block number.\n */\nexport async function estimateBlockAtTime(\n  timeInEpochSeconds: number,\n  provider: Provider,\n): Promise<number> {\n  const secondsUntil = Math.floor(timeInEpochSeconds - Date.now() / 1000);\n\n  const chainId = (await provider.getNetwork()).chainId as SUPPORTED_CHAIN_ID;\n  invariant(\n    SUPPORTED_CHAIN_IDS.includes(chainId),\n    `Chain id ${chainId} is not supported`,\n  );\n\n  invariant(\n    timeInEpochSeconds >= Date.now() / 1000,\n    \"This function should not be used to estimate past block times\",\n  );\n\n  const estimateSecondsBetweenBlocks = async (): Promise<number> => {\n    const blockTimes = [];\n\n    const latest = await provider.getBlock(\"latest\");\n    for (let i = 0; i < 5; i++) {\n      const current = await provider.getBlock(latest.number - i);\n      const previous = await provider.getBlock(latest.number - i - 1);\n\n      const diff = current.timestamp - previous.timestamp;\n      blockTimes.push(diff);\n    }\n\n    const sum = blockTimes.reduce((result, a) => result + a, 0);\n    return sum / blockTimes.length;\n  };\n\n  if (DEFAULT_BLOCK_TIMES_FALLBACK[chainId].synced) {\n    return DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks;\n  }\n\n  const latestBlock = await provider.getBlock(\"latest\");\n\n  let secondsBetweenBlocks: number;\n  try {\n    secondsBetweenBlocks = await estimateSecondsBetweenBlocks();\n    DEFAULT_BLOCK_TIMES_FALLBACK[chainId] = {\n      synced: true,\n      secondsBetweenBlocks,\n    };\n  } catch (err) {\n    secondsBetweenBlocks =\n      DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks;\n  }\n\n  console.log(\"Seconds until block\", secondsUntil);\n  const blocksUntil = Math.ceil(secondsUntil / secondsBetweenBlocks);\n  return latestBlock.number + blocksUntil;\n}\n","import { Coin, Coin__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { RestrictedTransferError } from \"../common/error\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\n\nexport interface ITokenMintArgs {\n  address: string;\n  amount: BigNumberish;\n}\n\nexport interface ITokenMintFromArgs extends ITokenMintArgs {\n  fromAddress: string;\n}\n\n/**\n * Create a standard crypto token or crypto currency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getTokenModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class TokenModule\n  extends ModuleWithRoles<Coin>\n  implements ITransferable\n{\n  public static moduleType: ModuleType = ModuleType.CURRENCY as const;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return TokenModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Coin {\n    return Coin__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return TokenModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  public async getValue(value: BigNumberish): Promise<CurrencyValue> {\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      this.address,\n      BigNumber.from(value),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  public async balance(): Promise<CurrencyValue> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await module.balanceOf(address);\n   * console.log(balance);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  public async balanceOf(address: string): Promise<CurrencyValue> {\n    return await this.getValue(await this.readOnlyContract.balanceOf(address));\n  }\n\n  public async allowance(spender: string): Promise<BigNumber> {\n    return await this.allowanceOf(await this.getSignerAddress(), spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const address = \"{{wallet_address}}\";\n   *\n   * // Address of the wallet to check token allowance\n   * const otherAddress = \"0x...\";\n   *\n   * const allowance = await module.allowanceOf(address, otherAddress);\n   * console.log(allowance);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  public async allowanceOf(owner: string, spender: string): Promise<BigNumber> {\n    return await this.readOnlyContract.allowance(owner, spender);\n  }\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  public async getVoteBalance(): Promise<BigNumber> {\n    return await this.getVoteBalanceOf(await this.getSignerAddress());\n  }\n\n  public async getVoteBalanceOf(account: string): Promise<BigNumber> {\n    return await this.readOnlyContract.getVotes(account);\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegation(): Promise<string> {\n    return await this.getDelegationOf(await this.getSignerAddress());\n  }\n\n  public async getDelegationOf(account: string): Promise<string> {\n    return await this.readOnlyContract.delegates(account);\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  public async delegateTo(\n    delegateeAddress: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"delegate\", [delegateeAddress]);\n  }\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   *\n   * // The amount of tokens you want to send\n   * const amount = 0;\n   *\n   * await module.transfer(toAddress, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    if (await this.isTransferRestricted()) {\n      throw new RestrictedTransferError(this.address);\n    }\n\n    return await this.sendTransaction(\"transfer\", [to, amount]);\n  }\n\n  public async setAllowance(\n    spender: string,\n    amount: BigNumber,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"approve\", [spender, amount]);\n  }\n\n  // owner functions\n  public async mint(amount: BigNumberish) {\n    await this.mintTo(await this.getSignerAddress(), amount);\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the tokens to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to mint\n   * const amount = ethers.utils.parseEther(\"1.5\");\n   *\n   * await module.mintTo(toAddress, amount);\n   * ```\n   */\n  public async mintTo(to: string, amount: BigNumberish) {\n    await this.sendTransaction(\"mint\", [to, amount]);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many different wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     address: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    address: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await module.mintBatchTo(data);\n   * ```\n   */\n  public async mintBatchTo(args: ITokenMintArgs[]) {\n    const encoded = [];\n    for (const arg of args) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"mint\", [\n          arg.address,\n          arg.amount,\n        ]),\n      );\n    }\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Lets you get a all token holders and their corresponding balances\n   * @beta - This can be very slow for large numbers of token holders\n   * @param queryParams - Optional query params\n   * @returns - A JSON object of all token holders and their corresponding balances\n   */\n  public async getAllHolderBalances(): Promise<Record<string, BigNumber>> {\n    const a = await this.contract.queryFilter(this.contract.filters.Transfer());\n    const txns = a.map((b) => b.args);\n    const balances: {\n      [key: string]: BigNumber;\n    } = {};\n    txns.forEach((item) => {\n      const from = item.from;\n      const to = item.to;\n      const amount = item.value;\n\n      if (!(from === AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return balances;\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 100;\n   *\n   * await module.burn(amount);\n   * ```\n   */\n  public async burn(amount: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [amount]);\n  }\n\n  public async burnFrom(\n    from: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burnFrom\", [from, amount]);\n  }\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 100\n   *\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await module.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  public async transferFrom(\n    from: string,\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async transferBatch(args: ITokenMintArgs[]) {\n    const encoded = args.map((arg) =>\n      this.contract.interface.encodeFunctionData(\"transfer\", [\n        arg.address,\n        arg.amount,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async transferFromBatch(args: ITokenMintFromArgs[]) {\n    const encoded = args.map((arg) =>\n      this.contract.interface.encodeFunctionData(\"transferFrom\", [\n        arg.fromAddress,\n        arg.address,\n        arg.amount,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n\n/**\n * @deprecated - see {@link TokenModule}\n */\nexport class CurrencyModule extends TokenModule {}\n","import { SignatureMint1155Module } from \"./signature-mint-1155\";\nimport {\n  Coin__factory,\n  DataStore__factory,\n  IERC20__factory,\n  LazyMintERC1155__factory,\n  LazyMintERC721__factory,\n  Marketplace__factory,\n  Market__factory,\n  NFTCollection__factory,\n  Pack__factory,\n  ProtocolControl,\n  ProtocolControl__factory,\n  Royalty__factory,\n  SignatureMint1155__factory,\n  SignatureMint721__factory,\n  Splits__factory,\n  VotingGovernor__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, Contract, ethers, Signer } from \"ethers\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { JsonConvert } from \"json2typescript\";\nimport {\n  ChainlinkVrf,\n  CurrencyValue,\n  getCurrencyValue,\n  isNativeToken,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { SUPPORTED_CHAIN_ID } from \"../common/chain\";\nimport { getContractMetadata } from \"../common/contract\";\nimport {\n  getCurrencyBalance,\n  getNativeTokenByChainId,\n} from \"../common/currency\";\nimport { invariant } from \"../common/invariant\";\nimport { ModuleType } from \"../common/module-type\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport IAppModule from \"../interfaces/IAppModule\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport {\n  BundleDropModuleMetadata,\n  BundleModuleMetadata,\n  CommonModuleMetadata,\n  CurrencyModuleMetadata,\n  DatastoreModuleMetadata,\n  DropModuleMetadata,\n  MarketModuleMetadata,\n  NewSplitRecipient,\n  NftModuleMetadata,\n  PackModuleMetadata,\n  SplitsModuleMetadata,\n  TokenModuleMetadata,\n  VoteModuleMetadata,\n} from \"../types/module-deployments\";\nimport MarketplaceModuleMetadata from \"../types/module-deployments/MarketplaceModuleMetadata\";\nimport { ModuleMetadata, ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { DEFAULT_BLOCK_TIMES_FALLBACK } from \"../utils/blockTimeEstimator\";\nimport { BundleDropModule } from \"./bundleDrop\";\nimport { CollectionModule } from \"./collection\";\nimport { DatastoreModule } from \"./datastore\";\nimport { DropModule } from \"./drop\";\nimport { MarketModule } from \"./market\";\nimport { MarketplaceModule } from \"./marketplace\";\nimport { NFTModule } from \"./nft\";\nimport { PackModule } from \"./pack\";\nimport { SplitsModule } from \"./royalty\";\nimport { CurrencyModule, TokenModule } from \"./token\";\nimport { VoteModule } from \"./vote\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getAppModule}\n * @public\n */\nexport class AppModule\n  extends ModuleWithRoles<ProtocolControl>\n  implements IAppModule\n{\n  private _shouldCheckVersion = true;\n  private _isV1 = false;\n  private jsonConvert = new JsonConvert();\n\n  public static roles = [RolesMap.admin] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return CurrencyModule.roles;\n  }\n\n  /**\n   * The internal module type for the app module.\n   * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.\n   * @internal\n   * @readonly\n   */\n  private moduleType: ModuleType = -1;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): ProtocolControl {\n    return ProtocolControl__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return this.moduleType;\n  }\n\n  /**\n   * @internal\n   *\n   */\n  private async getModuleAddress(moduleType: ModuleType): Promise<string[]> {\n    return await this.readOnlyContract.getAllModulesOfType(moduleType);\n  }\n\n  private async getNFTAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.NFT);\n  }\n\n  private async getBundleAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.BUNDLE);\n  }\n\n  private async getPackAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.PACK);\n  }\n\n  private async getCurrencyAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.CURRENCY);\n  }\n\n  private async getMarketAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.MARKET);\n  }\n\n  private async getDropAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DROP);\n  }\n\n  private async getDatastoreAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DATASTORE);\n  }\n\n  public async getRoyaltyTreasury(address?: string): Promise<string> {\n    return await this.readOnlyContract.getRoyaltyTreasury(\n      address || AddressZero,\n    );\n  }\n\n  /**\n   * @internal\n   * @param addresses - The addresses of the modules to get metadata for.\n   */\n  public async getAllContractMetadata(\n    addresses: string[],\n    resolveGateway = true,\n  ): Promise<ModuleMetadataNoType[]> {\n    const metadatas = await Promise.all(\n      addresses.map((address) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          address,\n          this.sdk.getStorage(),\n          resolveGateway,\n        ),\n      ),\n    );\n    return addresses\n      .filter((d) => d)\n      .map((address, i) => {\n        return {\n          address,\n          metadata: metadatas[i],\n        };\n      });\n  }\n\n  /**\n   * Method to get a list of pack module metadata.\n   * @returns A promise of an array of Pack modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getPackModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getPackAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.PACK,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of NFT module metadata.\n   * @returns A promise of an array of NFT modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getNFTModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getNFTAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.NFT,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of Bundle module metadata.\n   * @returns A promise of an array of Bundle modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCollectionModules(): Promise<ModuleMetadata[]> {\n    return await this.getBundleModules();\n  }\n\n  public async getBundleModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getBundleAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.BUNDLE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Currency module metadata.\n   * @returns A promise of an array of Currency modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCurrencyModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getCurrencyAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.CURRENCY,\n    }));\n  }\n\n  /**\n   * Method to get a list of Datastore module metadata.\n   * @alpha\n   * @returns A promise of an array of Datastore modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDatastoreModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getDatastoreAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.DATASTORE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Market module metadata.\n   * @returns A promise of an array of Market modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getMarketModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getMarketAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.MARKET,\n    }));\n  }\n\n  /**\n   * Method to get a list of Drop module metadata.\n   * @returns A promise of an array of Drop modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDropModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getDropAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.DROP,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of all module metadata on a given app.\n   * @public\n   * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.\n   * @returns Array of module metadata\n   */\n  public async getAllModuleMetadata(\n    filterByModuleType?: ModuleType[],\n    resolveGateway = true,\n  ): Promise<ModuleMetadata[]> {\n    const moduleTypesToGet = filterByModuleType || [\n      ModuleType.NFT,\n      ModuleType.BUNDLE,\n      ModuleType.PACK,\n      ModuleType.TOKEN,\n      ModuleType.MARKET,\n      ModuleType.DATASTORE,\n      ModuleType.DROP,\n      ModuleType.BUNDLE_DROP,\n      ModuleType.VOTE,\n    ];\n    return (\n      await Promise.all(\n        moduleTypesToGet.map(async (moduleType) => {\n          const moduleAddresses = await this.getModuleAddress(moduleType);\n          return (\n            await this.getAllContractMetadata(moduleAddresses, resolveGateway)\n          ).map((m) => ({\n            ...m,\n            type: moduleType,\n          }));\n        }),\n      )\n    ).reduce((acc, curr) => acc.concat(curr), []);\n  }\n\n  /**\n   * Trusted forwarder is used to forward gasless transactions. Trusted Forwarder of each module cannot be changed once it is deployed.\n   *\n   * @returns The address of the trusted forwarder contract\n   */\n  public async getForwarder(): Promise<string> {\n    return await this.readOnlyContract.getForwarder();\n  }\n\n  // owner functions\n  /**\n   * Set trusted forwarder for the modules. Every module that is deployed after this call will use the new forwarder.\n   * Trusted forwarder is used to forward gasless transactions. Trusted Forwarder of each module cannot be changed once it is deployed.\n   *\n   * @param address - The address of the trusted forwarder contract\n   */\n  public async setForwarder(address: string): Promise<void> {\n    await this.contract.setForwarder(address);\n  }\n\n  /**\n   * @deprecated - Use setMetadata() instead\n   */\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyTreasury(\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    try {\n      return await this.sendTransaction(\"setRoyaltyTreasury\", [treasury]);\n    } catch (e: any) {\n      if (e?.message?.includes(\"provider shares too low\")) {\n        throw new Error(\n          `Missing thirdweb fees. Please set it to a Royalty Splits address, which can deployed using \"deployRoyaltySplitsModule({...})\".`,\n        );\n      }\n      throw e;\n    }\n  }\n\n  public async setModuleRoyaltyTreasury(\n    moduleAddress: string,\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    // Note: connecting module address contract. Only need to access setContractURI abi\n    // any Interface with setContractURI can be used.\n    const moduleContract = new Contract(\n      moduleAddress,\n      ProtocolControl__factory.createInterface(),\n      this.providerOrSigner,\n    );\n\n    const metadata = await getContractMetadata(\n      this.providerOrSigner,\n      moduleAddress,\n      this.sdk.getStorage(),\n      false,\n    );\n    const uri = await this.sdk.getStorage().uploadMetadata({\n      ...metadata,\n      fee_recipient: treasury,\n    });\n\n    // static call to make sure the call won't fail.\n    try {\n      await this.contract.callStatic.setModuleRoyaltyTreasury(\n        moduleAddress,\n        treasury,\n      );\n      await moduleContract.callStatic.setContractURI(uri);\n    } catch (e: any) {\n      if (e?.message?.includes(\"provider shares too low\")) {\n        throw new Error(\n          `Missing thirdweb fees. Please set it to a Royalty Splits address, which can deployed using \"deployRoyaltySplitsModule({...})\".`,\n        );\n      }\n      throw e;\n    }\n\n    // can't multicall cause 2 different modules. sad.\n    await this.sendContractTransaction(moduleContract, \"setContractURI\", [uri]);\n    return await this.sendTransaction(\"setModuleRoyaltyTreasury\", [\n      moduleAddress,\n      treasury,\n    ]);\n  }\n\n  /**\n   * Checks to see if an address is either the current protocol\n   * control address, or a splits module address.\n   *\n   * @internal\n   * @param address - The address to check.\n   * @returns - True if the address is of this protocol control or if its a split module.\n   */\n  private async isValidRoyaltyRecipient(address: string): Promise<boolean> {\n    if (address.toLowerCase() === this.address.toLowerCase()) {\n      return true;\n    }\n\n    const contract = this.sdk.getSplitsModule(address);\n    try {\n      await contract.balanceOf(this.address);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  public async withdrawFunds(\n    to: string,\n    currency: string,\n  ): Promise<TransactionReceipt> {\n    const provider = this.readOnlyContract.provider;\n    let lastTransaction: TransactionReceipt | null = null;\n    const isNative = isNativeToken(currency);\n    if (isNative) {\n      currency = ethers.constants.AddressZero;\n    }\n\n    // should fetch for contract only, not treasury\n    const balance = await getCurrencyBalance(provider, currency, this.address);\n    const bn = BigNumber.from(balance.value);\n\n    // tries to withdraw from the project\n    if (bn.gt(0)) {\n      // v1 erc20 doesn't work, so check for v2 or native\n      const isV2 = !(await this.isV1());\n      if (isV2 || isNative) {\n        lastTransaction = await this.sendTransaction(\"withdrawFunds\", [\n          to,\n          currency,\n        ]);\n      }\n    }\n\n    // tries to withdraw from the splits\n    const treasury = await this.getRoyaltyTreasury();\n    if (treasury !== this.address) {\n      const treasuryBalance = await getCurrencyBalance(\n        provider,\n        currency,\n        treasury,\n      );\n      if (BigNumber.from(treasuryBalance.value).gt(0)) {\n        const royalty = Royalty__factory.connect(\n          treasury,\n          this.getSigner() as Signer,\n        );\n        if (isNative) {\n          lastTransaction = await this.sendContractTransaction(\n            royalty,\n            \"distribute()\",\n            [],\n          );\n        } else {\n          lastTransaction = await this.sendContractTransaction(\n            royalty,\n            \"distribute(address)\",\n            [currency],\n          );\n        }\n      }\n    }\n\n    if (!lastTransaction) {\n      throw new Error(\"no funds to withdraw\");\n    }\n\n    return lastTransaction;\n  }\n\n  /**\n   * Helper method that handles `image` property uploads if its a file\n   *\n   * @param metadata - The metadata of the module to be deployed\n   * @returns - The sanitized metadata with an uploaded image ipfs hash\n   */\n  private async _prepareMetadata(metadata: CommonModuleMetadata): Promise<any> {\n    if (typeof metadata.image === \"string\") {\n      return Promise.resolve(metadata);\n    }\n    if (metadata.image === undefined) {\n      return Promise.resolve(metadata);\n    }\n\n    metadata.image = await this.sdk\n      .getStorage()\n      .upload(\n        metadata.image as FileOrBuffer,\n        this.address,\n        await this.getSignerAddress(),\n      );\n    return Promise.resolve(metadata);\n  }\n\n  /**\n   * Helper method that deploys a module and returns its address\n   *\n   * @internal\n   *\n   * @param moduleType - The ModuleType to deploy\n   * @param args - Constructor arguments for the module\n   * @param factory - The ABI factory used to call the `deploy` method\n   * @returns The address of the deployed module\n   */\n  private async _deployModule<T extends ModuleType>(\n    moduleType: T,\n    args: any[],\n    factory: any,\n  ): Promise<string> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    const gasPrice = await this.sdk.getGasPrice();\n    const txOpts = gasPrice\n      ? { gasPrice: ethers.utils.parseUnits(gasPrice.toString(), \"gwei\") }\n      : {};\n\n    const tx = await new ethers.ContractFactory(factory.abi, factory.bytecode)\n      .connect(this.signer as Signer)\n      .deploy(...args, txOpts);\n\n    await tx.deployed();\n    const contractAddress = tx.address;\n\n    const addModuleTx = await this.contract.addModule(\n      contractAddress,\n      moduleType,\n      txOpts,\n    );\n    await addModuleTx.wait();\n    return contractAddress;\n  }\n\n  /**\n   * Throws an error if metadata is invalid\n   *\n   * @param metadata - The metadata to validate\n   */\n  private async verifyMetadata(metadata: {\n    feeRecipient?: string;\n  }): Promise<void> {\n    const shouldUpdateRecipient =\n      metadata.feeRecipient && metadata.feeRecipient !== this.address;\n\n    const isValidFeeRecipient = await this.isValidRoyaltyRecipient(\n      metadata.feeRecipient ? metadata.feeRecipient : this.address,\n    );\n    if (shouldUpdateRecipient && !isValidFeeRecipient) {\n      throw new Error(\n        \"Invalid fee recipient, can only be the Project address or a Splits module address\",\n      );\n    }\n  }\n\n  /**\n   * Deploys a collection module.\n   *\n   * @param metadata - Metadata about the module.\n   * @returns A promise with the newly created module.\n   */\n  public async deployBundleModule(\n    metadata: BundleModuleMetadata,\n  ): Promise<CollectionModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      BundleModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.COLLECTION,\n      [\n        this.address,\n        await this.getForwarder(),\n        metadataUri,\n        BigNumber.from(\n          metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        ),\n      ],\n      NFTCollection__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n\n    return this.sdk.getBundleModule(address);\n  }\n\n  /**\n   * Deploys a Splits module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed splits module\n   */\n  public async deploySplitsModule(\n    metadata: SplitsModuleMetadata,\n  ): Promise<SplitsModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      SplitsModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.SPLITS,\n      [\n        this.address,\n        await this.getForwarder(),\n        metadataUri,\n        metadata.recipientSplits.map((s) => s.address),\n        metadata.recipientSplits.map((s) => s.shares),\n      ],\n      metadata.isRoyalty ? Royalty__factory : Splits__factory,\n    );\n\n    return this.sdk.getSplitsModule(address);\n  }\n\n  /**\n   * Deploys a Royalty Splits module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed splits module\n   */\n  public async deployRoyaltySplitsModule(\n    metadata: SplitsModuleMetadata,\n  ): Promise<SplitsModule> {\n    metadata.isRoyalty = true;\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      SplitsModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.SPLITS,\n      [\n        this.address,\n        await this.getForwarder(),\n        metadataUri,\n        metadata.recipientSplits.map((s) => s.address),\n        metadata.recipientSplits.map((s) => s.shares),\n      ],\n      Royalty__factory,\n    );\n\n    return this.sdk.getSplitsModule(address);\n  }\n\n  /**\n   * Deploys a NFT module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed NFT module\n   */\n  public async deployNftModule(\n    metadata: NftModuleMetadata,\n  ): Promise<NFTModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      NftModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.NFT,\n      [\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        metadataUri,\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadata.defaultSaleRecipientAddress\n          ? metadata.defaultSaleRecipientAddress\n          : await this.getSignerAddress(),\n        metadata.sellerFeeBasisPoints,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      SignatureMint721__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getNFTModule(address);\n  }\n\n  /**\n   * Deploys a currency module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed currency module\n   */\n  public async deployCurrencyModule(\n    metadata: CurrencyModuleMetadata,\n  ): Promise<CurrencyModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      CurrencyModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.CURRENCY,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.getForwarder(),\n        metadataUri,\n      ],\n      Coin__factory,\n    );\n\n    return this.sdk.getCurrencyModule(address);\n  }\n\n  /**\n   * Deploys a token module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed currency module\n   */\n  public async deployTokenModule(\n    metadata: TokenModuleMetadata,\n  ): Promise<TokenModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      CurrencyModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.CURRENCY,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.getForwarder(),\n        metadataUri,\n      ],\n      Coin__factory,\n    );\n\n    return this.sdk.getTokenModule(address);\n  }\n\n  /**\n   * Deploys a Marketplace module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Marketplace module\n   */\n  public async deployMarketModule(\n    metadata: MarketModuleMetadata,\n  ): Promise<MarketModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      MarketModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.MARKET,\n      [\n        this.address,\n        await this.getForwarder(),\n        metadataUri,\n        metadata.marketFeeBasisPoints ? metadata.marketFeeBasisPoints : 0,\n      ],\n      Market__factory,\n    );\n\n    return this.sdk.getMarketModule(address);\n  }\n\n  /**\n   * Deploys a Pack module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Pack module\n   */\n  public async deployPackModule(\n    metadata: PackModuleMetadata,\n  ): Promise<PackModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      PackModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const chainId = await this.getChainID();\n    const { vrfCoordinator, linkTokenAddress, keyHash, fees } =\n      ChainlinkVrf[chainId as keyof typeof ChainlinkVrf];\n\n    const address = await this._deployModule(\n      ModuleType.PACK,\n      [\n        this.address,\n        metadataUri,\n        vrfCoordinator,\n        linkTokenAddress,\n        keyHash,\n        fees,\n        await this.getForwarder(),\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n      ],\n      Pack__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getPackModule(address);\n  }\n\n  /**\n   * Deploys a Drop module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Drop module\n   */\n  public async deployDropModule(\n    metadata: DropModuleMetadata,\n  ): Promise<DropModule> {\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.DROP,\n      [\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        metadataUri,\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadata.primarySaleRecipientAddress,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      LazyMintERC721__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getDropModule(address);\n  }\n\n  /**\n   * Deploys a BundleSignature module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed BundleSignature module\n   */\n  public async deployBundleSignatureModule(\n    metadata: DropModuleMetadata,\n  ): Promise<SignatureMint1155Module> {\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const royaltyTreasury = await this.getRoyaltyTreasury();\n\n    const address = await this._deployModule(\n      ModuleType.BUNDLE_SIGNATURE,\n      [\n        metadataUri,\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadata.primarySaleRecipientAddress,\n        metadata.feeRecipient ? metadata.feeRecipient : royaltyTreasury,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      SignatureMint1155__factory,\n    );\n    if (metadata.feeRecipient && metadata.feeRecipient !== royaltyTreasury) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getBundleSignatureModule(address);\n  }\n\n  /**\n   * Deploys a Bundle Drop module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Bundle Drop module\n   */\n  public async deployBundleDropModule(\n    metadata: BundleDropModuleMetadata,\n  ): Promise<BundleDropModule> {\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.BUNDLE_DROP,\n      [\n        metadataUri,\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadata.primarySaleRecipientAddress,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      LazyMintERC1155__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getBundleDropModule(address);\n  }\n\n  /**\n   * Deploys a Datastore module\n   *\n   * @alpha\n   * @param metadata - The module metadata\n   * @returns - The deployed Datastore module\n   */\n  public async deployDatastoreModule(\n    metadata: DatastoreModuleMetadata,\n  ): Promise<DatastoreModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DatastoreModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.DATASTORE,\n      [this.address, await this.getForwarder(), metadataUri],\n      DataStore__factory,\n    );\n\n    return this.sdk.getDatastoreModule(address);\n  }\n\n  /**\n   * Deploys a Vote module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed vote module\n   */\n  public async deployVoteModule(\n    metadata: VoteModuleMetadata,\n  ): Promise<VoteModule> {\n    invariant(\n      metadata.votingTokenAddress !== \"\" &&\n        isAddress(metadata.votingTokenAddress),\n      \"Voting Token Address must be a valid address\",\n    );\n    invariant(\n      metadata.votingQuorumFraction >= 0 &&\n        metadata.votingQuorumFraction <= 100,\n      \"Quofrum Fraction must be in the range of 0-100 representing percentage\",\n    );\n\n    const chainId = await this.getChainID();\n    const timeBetweenBlocks =\n      DEFAULT_BLOCK_TIMES_FALLBACK[chainId as SUPPORTED_CHAIN_ID];\n\n    const waitTimeInBlocks =\n      metadata.proposalStartWaitTimeInSeconds /\n      timeBetweenBlocks.secondsBetweenBlocks;\n    const votingTimeInBlocks =\n      metadata.proposalVotingTimeInSeconds /\n      timeBetweenBlocks.secondsBetweenBlocks;\n\n    metadata.votingDelay = waitTimeInBlocks;\n    metadata.votingPeriod = votingTimeInBlocks;\n\n    // verify making sure that the voting token address is valid\n    try {\n      await Coin__factory.connect(\n        metadata.votingTokenAddress,\n        this.readOnlyContract.provider,\n      ).callStatic.getPastTotalSupply(0);\n    } catch (e) {\n      invariant(false, \"Token is not compatible with the vote module\");\n    }\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      VoteModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.VOTE,\n      [\n        metadata.name,\n        metadata.votingTokenAddress,\n        BigNumber.from(Math.ceil(metadata.votingDelay)),\n        BigNumber.from(Math.ceil(metadata.votingPeriod)),\n        BigNumber.from(metadata.minimumNumberOfTokensNeededToPropose),\n        metadata.votingQuorumFraction,\n        await this.getForwarder(),\n        metadataUri,\n      ],\n      VotingGovernor__factory,\n    );\n\n    return this.sdk.getVoteModule(address);\n  }\n\n  public async shouldUpgradeToV2(): Promise<boolean> {\n    if ((await this.isV1()) && this.hasValidSigner()) {\n      const isAdmin = await this.readOnlyContract.hasRole(\n        ethers.utils.hexZeroPad([0], 32),\n        await this.getSignerAddress(),\n      );\n      if (isAdmin && (await this.getRoyaltyTreasury()) === this.address) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public async shouldUpgradeModuleList(): Promise<ModuleMetadata[]> {\n    // if it's v1, we don't want module's fee_recipient to be set to protocol control\n    // it should be set to protocol control's `this.getRoyaltyTreasury()`\n    if (!(await this.isV1())) {\n      return [];\n    }\n\n    // not ready for upgrade yet. need to upgrade app first.\n    // otherwise royalty of sub-modules may point to wrong royalty treasury\n    if ((await this.getRoyaltyTreasury()) === this.address) {\n      return [];\n    }\n\n    const modules = await this.getAllModuleMetadata(\n      [\n        ModuleType.NFT,\n        ModuleType.BUNDLE,\n        ModuleType.PACK,\n        ModuleType.DROP,\n        ModuleType.BUNDLE_DROP,\n      ],\n      false,\n    );\n\n    return modules.filter(\n      (m) =>\n        m.metadata?.fee_recipient?.toLowerCase() === this.address.toLowerCase(),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  public async upgradeModuleList(moduleAddresses: string[]) {\n    const signer = this.getSigner();\n    invariant(signer, \"needs a signer\");\n\n    // already filtered to make sure that the fee_recipient is set to the app\n    const allUpgradableModules = await this.shouldUpgradeModuleList();\n\n    // this already returns the correct metadata array with non-resolved metadata...\n    const moduleMetadatas = allUpgradableModules.filter((m) =>\n      moduleAddresses.includes(m.address),\n    );\n\n    const royaltyTreasury = await this.getRoyaltyTreasury();\n\n    // map to address, new updated metadata\n    const metadataUris = await Promise.all(\n      moduleMetadatas.map((m) => {\n        return this.sdk.getStorage().uploadMetadata({\n          ...m.metadata,\n          fee_recipient: royaltyTreasury,\n        });\n      }),\n    );\n\n    const nonce = await signer.getTransactionCount(\"pending\");\n    const txData = metadataUris.map((uri) =>\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    const txs = txData.map((data, i) => ({\n      to: moduleMetadatas[i].address,\n      nonce: nonce + i,\n      data,\n    }));\n\n    // batch send :)\n    const txns = await Promise.all(txs.map((tx) => signer.sendTransaction(tx)));\n\n    // have to actually wait for each txn to be confirmed until we're finished\n    return await Promise.all(txns.map((tx) => tx.wait()));\n  }\n\n  /**\n   *  @internal\n   * Upgrades the protocol control to v2. In v2, the royalty treasury needs to be set to be set to a splits contract.\n   *\n   * @param splitsModuleAddress - Optional. By default, it automatically creates a Splits for the project.\n   * @param splitsRecipients - Optiional. By default, it is the signer who upgrades.\n   */\n  public async upgradeToV2(\n    upgradeOptions: {\n      splitsModuleAddress?: string;\n      splitsRecipients?: NewSplitRecipient[];\n    } = {},\n  ) {\n    if (await this.isV1UpgradedOrV2()) {\n      return;\n    }\n\n    let splitsAddress = \"\";\n    if (upgradeOptions.splitsModuleAddress) {\n      splitsAddress = upgradeOptions.splitsModuleAddress;\n    } else {\n      if (!upgradeOptions.splitsRecipients) {\n        upgradeOptions.splitsRecipients = [\n          {\n            address: await this.getSignerAddress(),\n            shares: 100,\n          },\n        ];\n      }\n\n      const metadata = (await this.getMetadata()).metadata;\n      splitsAddress = (\n        await this.deploySplitsModule({\n          name: `${metadata?.name} Royalty Treasury`,\n          recipientSplits: upgradeOptions.splitsRecipients,\n          isRoyalty: true,\n        })\n      ).address;\n    }\n\n    return await this.setRoyaltyTreasury(splitsAddress);\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<BigNumber> {\n    const projectBalance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n\n    let treasuryBalance = BigNumber.from(0);\n    const treasury = await this.getRoyaltyTreasury();\n    if (treasury.toLowerCase() !== this.address.toLowerCase()) {\n      treasuryBalance = await this.readOnlyContract.provider.getBalance(\n        treasury,\n      );\n    }\n\n    return projectBalance.add(treasuryBalance);\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    let balance = BigNumber.from(0);\n    if (isNativeToken(tokenAddress)) {\n      balance = await this.balance();\n    } else {\n      const erc20 = IERC20__factory.connect(\n        tokenAddress,\n        this.readOnlyContract.provider,\n      );\n\n      // TODO: multicall :)\n      // only fetch project's erc20 balance if it's not v1\n      if (!(await this.isV1())) {\n        try {\n          balance = balance.add(await erc20.balanceOf(this.address));\n        } catch (e) {\n          // invalid token address\n          console.error(e);\n          throw new Error(\"invalid token address\");\n        }\n      }\n\n      // if it's not upgraded or v2, erc20 balance wont show up\n      const treasury = await this.getRoyaltyTreasury();\n      if (treasury.toLowerCase() !== this.address.toLowerCase()) {\n        try {\n          balance = balance.add(await erc20.balanceOf(treasury));\n        } catch (e) {\n          // invalid token address\n          console.error(e);\n          throw new Error(\"invalid token address\");\n        }\n      }\n    }\n\n    return await getCurrencyValue(this.providerOrSigner, tokenAddress, balance);\n  }\n\n  /**\n   * @internal\n   * Check if contract is v1 or v2. If the contract doesn't have version = v1 contract.\n   */\n  async isV1(): Promise<boolean> {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.callStatic.version();\n        this._isV1 = false;\n      } catch (e) {\n        this._isV1 = true;\n      }\n      this._shouldCheckVersion = false;\n    }\n    return this._isV1;\n  }\n\n  /**\n   * @internal\n   */\n  async isV1UpgradedOrV2(): Promise<boolean> {\n    return !(await this.isV1()) || !(await this.shouldUpgradeToV2());\n  }\n\n  public async deployMarketplaceModule(\n    metadata: MarketplaceModuleMetadata,\n  ): Promise<MarketplaceModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      MarketplaceModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.MARKETPLACE,\n      [\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadataUri,\n        metadata.marketFeeBasisPoints,\n      ],\n      Marketplace__factory,\n    );\n\n    return this.sdk.getMarketplaceModule(address);\n  }\n}\n","import {\n  ERC20__factory,\n  ERC721__factory,\n  NFTCollection as NFTBundleContract,\n  NFTCollection__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BytesLike } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport { UnderlyingType } from \"./pack\";\n\n/**\n * @beta\n */\n\nexport interface BundleMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: BigNumber;\n  underlyingType: UnderlyingType;\n}\n\nexport interface CollectionMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: BigNumber;\n}\n\n/**\n * @beta\n */\n\nexport interface INFTBundleCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\nexport interface INFTCollectionCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\n\n/**\n * @beta\n */\n\nexport interface INFTCollectionBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\nexport interface INFTBundleBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Create a collection of NFTs that lets you optionally mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getBundleModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class BundleModule\n  extends ModuleWithRoles<NFTBundleContract>\n  implements ITransferable\n{\n  public static moduleType: ModuleType = ModuleType.BUNDLE;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return BundleModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): NFTBundleContract {\n    return NFTCollection__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return BundleModule.moduleType;\n  }\n\n  /**\n   *\n   * Get a single bundle item by tokenId.\n   * @param tokenId - the unique token id of the nft\n   * @returns A promise that resolves to a `BundleMetadata`.\n   */\n  public async get(tokenId: string, address?: string): Promise<BundleMetadata> {\n    const [metadata, supply, ownedByAddress, state] = await Promise.all([\n      getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage()),\n      this.readOnlyContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(\"0\")),\n      address ? (await this.balanceOf(address, tokenId)).toNumber() : 0,\n      this.readOnlyContract.tokenState(tokenId),\n    ]);\n    return {\n      creator: state.creator,\n      supply,\n      metadata,\n      ownedByAddress: BigNumber.from(ownedByAddress),\n      underlyingType: state.underlyingType,\n    };\n  }\n\n  /**\n   * Get NFT Data\n   *\n   * @remarks Get data associated with NFTs in this module.\n   *\n   * @example\n   * ```javascript\n   * // You can get every NFT in the module\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   *\n   * // Or you can get optionally get the NFTs owned by a specific wallet\n   * const address = \"{{wallet_address}}\"; // The address you want to get the NFTs for;\n   * const ownedNfts = await module.getAll(address);\n   * console.log(ownedNfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(address?: string): Promise<BundleMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.get(i.toString(), address),\n      ),\n    );\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   * // The token ID of the NFT you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await module.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(\n      await this.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(\n    address: string,\n    operator: string,\n    assetContract?: string,\n    assetId?: BigNumberish,\n  ): Promise<boolean> {\n    if (!assetContract) {\n      return await this.readOnlyContract.isApprovedForAll(address, operator);\n    }\n    if (!assetId) {\n      throw new Error(\"tokenId is required\");\n    }\n    const contract = ERC721__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n    const approved = await contract.isApprovedForAll(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    const isTokenApproved =\n      (await contract.getApproved(assetId)).toLowerCase() ===\n      this.address.toLowerCase();\n    return approved || isTokenApproved;\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of NFTs you want to send\n   * const amount = 1;\n   *\n   * await module.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.transferFrom(\n      await this.getSignerAddress(),\n      to,\n      { tokenId, amount },\n      [0],\n    );\n  }\n\n  // owner functions\n  public async create(metadata: MetadataURIOrObject): Promise<BundleMetadata> {\n    return (await this.createBatch([metadata]))[0];\n  }\n\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<BundleMetadata[]> {\n    const metadataWithSupply = metadatas.map((m) => ({\n      metadata: m,\n      supply: 0,\n    }));\n    return this.createAndMintBatch(metadataWithSupply);\n  }\n\n  /**\n   * Mint NFT\n   *\n   * @remarks Mint an NFT with a specified supply.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1, // The number of this NFT you want to mint\n   * }\n   *\n   * await module.createAndMint(metadataWithSupply);\n   * ```\n   */\n  public async createAndMint(\n    metadataWithSupply: INFTBundleCreateArgs,\n  ): Promise<BundleMetadata> {\n    return (await this.createAndMintBatch([metadataWithSupply]))[0];\n  }\n\n  /**\n   * Mint Many NFTs\n   *\n   * @remarks Mint many different NFTs with specified supplies.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 1, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 1,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * await module.createAndMintBatch(metadataWithSupply);\n   * ```\n   */\n  public async createAndMintBatch(\n    metadataWithSupply: INFTBundleCreateArgs[],\n  ): Promise<BundleMetadata[]> {\n    const metadatas = metadataWithSupply.map((a) => a.metadata);\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const supplies = metadataWithSupply.map((a) => a.supply);\n    const to = await this.getSignerAddress();\n    const receipt = await this.sendTransaction(\"createNativeTokens\", [\n      to,\n      uris,\n      supplies,\n      [0],\n    ]);\n    const event = this.parseEventLogs(\"NativeTokens\", receipt?.logs);\n    const tokenIds = event?.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async createWithToken(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTBundleCreateArgs,\n  ) {\n    const token = ERC20__factory.connect(tokenContract, this.providerOrSigner);\n    const allowance = await token.allowance(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    if (allowance < tokenAmount) {\n      await token.increaseAllowance(this.address, tokenAmount);\n    }\n    const uri = await this.sdk.getStorage().uploadMetadata(args.metadata);\n    await this.sendTransaction(\"wrapERC20\", [\n      tokenContract,\n      tokenAmount,\n      args.supply,\n      uri,\n    ]);\n  }\n  public async createWithErc20(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTBundleCreateArgs,\n  ) {\n    return this.createWithToken(tokenContract, tokenAmount, args);\n  }\n\n  public async createWithNFT(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    const asset = ERC721__factory.connect(tokenContract, this.providerOrSigner);\n\n    if (\n      !(await asset.isApprovedForAll(\n        await this.getSignerAddress(),\n        this.address,\n      ))\n    ) {\n      const isTokenApproved =\n        (await asset.getApproved(tokenId)).toLowerCase() ===\n        this.address.toLowerCase();\n      if (!isTokenApproved) {\n        await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n          this.address,\n        ]);\n      }\n    }\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    await this.sendTransaction(\"wrapERC721\", [tokenContract, tokenId, uri]);\n  }\n  public async unwrapNFT(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"redeemERC721\", [tokenId]);\n  }\n  public async unwrapToken(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"redeemERC20\", [tokenId, amount]);\n  }\n\n  public async createWithERC721(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    return this.createWithNFT(tokenContract, tokenId, metadata);\n  }\n\n  public async mint(args: INFTBundleBatchArgs) {\n    await this.mintTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintTo(\n    to: string,\n    args: INFTBundleBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"mint\", [to, args.tokenId, args.amount, data]);\n  }\n\n  public async mintBatch(args: INFTBundleBatchArgs[]) {\n    await this.mintBatchTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintBatchTo(\n    to: string,\n    args: INFTBundleBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"mintBatch\", [to, ids, amounts, data]);\n  }\n\n  /**\n   * Burn NFT\n   *\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   * // The number of specified NFTs you want to burn\n   * const amount = 1\n   *\n   * await module.burn({ tokenId, amount });\n   * ```\n   */\n  public async burn(args: INFTBundleBatchArgs): Promise<TransactionReceipt> {\n    return await this.burnFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnBatch(\n    args: INFTBundleBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    return await this.burnBatchFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnFrom(\n    account: string,\n    args: INFTBundleBatchArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [\n      account,\n      args.tokenId,\n      args.amount,\n    ]);\n  }\n\n  public async burnBatchFrom(\n    account: string,\n    args: INFTBundleBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: INFTBundleBatchArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  /**\n   * Transfer Many NFTs\n   *\n   * @remarks Transfer NFTs from the one wallet to another.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to send the NFT from\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The data of the NFTs you want to send\n   * const data = [{\n   *   tokenId: 1, // The token ID of the NFT you want to send\n   *   amount: 1, // The number of this NFT you want to send\n   * }, {\n   *   tokenId: 2,\n   *   amount: 1,\n   * }]\n   *\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await module.transferBatchFrom(fromAddress, toAddress, data);\n   * ```\n   */\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: INFTBundleBatchArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<BundleMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (item) => {\n        const token = await this.get(item.tokenId.toString());\n        return { ...token, ownedByAddress: item.balance };\n      }),\n    );\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n","/**\n * @internal\n */\n\nexport function isMetadataEqual(old: any, changed: any): boolean {\n  if (typeof old === \"object\" && typeof changed === \"object\") {\n    const oldKeys = Object.keys(old).sort();\n    const changedKeys = Object.keys(changed).sort();\n    if (oldKeys === changedKeys) {\n      for (let i = 0; i < oldKeys.length; i++) {\n        if (!isMetadataEqual(old[oldKeys[i]], changed[changedKeys[i]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return old === changed;\n}\n","export enum ListingType {\n  Direct = 0,\n  Auction = 1,\n}\n","enum ClaimConditionType {\n  StartTime,\n  LimitPerWallet,\n  MerkleRoot,\n  WaitTimeBetweenClaims,\n}\n\n/**\n * Questions:\n *\n * 1. Can there only be a single `startTimestamp` condition? What is a `startTimestamp` condition?\n *\n * 2. What is `maxMintSupply`?\n *\n * 3. What is `currentMintSupply`?\n *\n * 4. What is `quantityLimitPerTransaction`?\n *\n * 5. What is `waitTimeSecondsLimitPerTransaction`?\n *\n * 6. Can there only be one `pricePerToken`?\n *\n * 7. Can there only be one `pricePerToken`?\n *\n */\n\nexport default ClaimConditionType;\n","export enum ProposalState {\n  Pending,\n  Active,\n  Canceled,\n  Defeated,\n  Succeeded,\n  Queued,\n  Expired,\n  Executed,\n}\n","export enum VoteType {\n  Against = 0,\n  For = 1,\n  Abstain = 2,\n}\n","export enum ClaimEligibility {\n  NotEnoughSupply = \"There is not enough supply to claim.\",\n\n  AddressNotAllowed = \"This address is not on the allowlist.\",\n\n  WaitBeforeNextClaimTransaction = \"Not enough time since last claim transaction. Please wait.\",\n\n  AlreadyClaimed = \"You have already claimed the token.\",\n\n  NotEnoughTokens = \"There are not enough tokens in the wallet to pay for the claim.\",\n\n  NoActiveClaimPhase = \"There is no active claim phase at the moment. Please check back in later.\",\n}\n","import { isAddress } from \"@ethersproject/address\";\nimport { BytesLike, hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { InvalidAddressError } from \"../common/error\";\nimport { invariant } from \"../common/invariant\";\nimport { PublicMintCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { SnapshotInfo } from \"../types/snapshots/SnapshotInfo\";\n\nexport default class ClaimConditionPhase {\n  // In seconds\n  private _conditionStartTime = Math.floor(Date.now() / 1000);\n\n  private _currencyAddress = \"\";\n\n  private _price: BigNumberish = 0;\n\n  private _maxQuantity: BigNumberish = BigNumber.from(0);\n\n  private _quantityLimitPerTransaction: BigNumberish =\n    ethers.constants.MaxUint256;\n\n  private _merkleRootHash: BytesLike = hexZeroPad([0], 32);\n\n  private _merkleCondition?: SnapshotInfo = undefined;\n\n  private _snapshot?: string[] = undefined;\n\n  private createSnapshot: (leafs: string[]) => Promise<SnapshotInfo>;\n\n  private _waitInSeconds: BigNumberish = 0;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor(createSnapshotFunc: (leafs: string[]) => Promise<SnapshotInfo>) {\n    this.createSnapshot = createSnapshotFunc;\n  }\n\n  /**\n   * Set the price claim condition for the drop.\n   *\n   * @param price - The price of the currency in wei. Must be >= 0.\n   * @param tokenAddress - The address of an ERC20 contract to use as the currency for the claim. By default this is the native currency address which is 0x0000000000000000000000000000000000000000 address.\n   */\n  public setPrice(\n    price: BigNumberish,\n    tokenAddress: string = AddressZero,\n  ): ClaimConditionPhase {\n    if (!isAddress(tokenAddress)) {\n      throw new InvalidAddressError(tokenAddress);\n    }\n    invariant(price >= 0, \"Price cannot be negative\");\n\n    this._price = price;\n    this._currencyAddress = tokenAddress;\n    return this;\n  }\n\n  /**\n   * Set the start time for the claim condition.\n   *\n   * @param startTime - The start time for the claim condition. Can be a Date object or a number of seconds since the epoch.\n   */\n  public setConditionStartTime(when: Date | number): ClaimConditionPhase {\n    if (typeof when === \"number\") {\n      this._conditionStartTime = Math.floor(when);\n    } else {\n      // if its starting in the past, just set it to now\n      this._conditionStartTime = Math.floor(when.getTime() / 1000);\n    }\n    return this;\n  }\n\n  /**\n   * Override the maxQuantity for the claim condition after creating the phase.\n   *\n   * @param maxQuantity - The max quantity NFTs that can be claimed in this phase.\n   */\n  public setMaxQuantity(maxQuantity: BigNumberish): ClaimConditionPhase {\n    this._maxQuantity = maxQuantity;\n    return this;\n  }\n\n  /**\n   * The max quantity of NFTs that can be claimed in a single transaction.\n   *\n   * @param max - The max quantity NFTs that can be claimed in a single transaction.\n   */\n  public setMaxQuantityPerTransaction(max: BigNumberish): ClaimConditionPhase {\n    const maxQuantity = BigNumber.from(max);\n    invariant(maxQuantity.gte(1), \"Max quantity per transaction must be > 0\");\n    this._quantityLimitPerTransaction = maxQuantity;\n    return this;\n  }\n\n  /**\n   * Sets a merkle root hash for the claim condition.\n   *\n   * @param root - The merkle root hash\n   */\n  public setMerkleRoot(root: string): ClaimConditionPhase {\n    this._merkleRootHash = root;\n    return this;\n  }\n\n  /**\n   * Sets a snapshot for the claim condition. You can use a snapshot\n   * to verify a merkle tree condition.\n   *\n   * @param root - The merkle root hash\n   */\n  public setSnapshot(addresses: string[]): ClaimConditionPhase {\n    this._snapshot = addresses;\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  public getSnapshot(): SnapshotInfo | undefined {\n    return this._merkleCondition;\n  }\n\n  /**\n   * Helper method that provides defaults for each claim condition.\n   * @internal\n   */\n  public async buildPublicClaimCondition(): Promise<PublicMintCondition> {\n    if (this._snapshot) {\n      this._merkleCondition = await this.createSnapshot(this._snapshot);\n    }\n\n    return {\n      startTimestamp: BigNumber.from(this._conditionStartTime.toString()),\n      pricePerToken: this._price,\n      currency: this._currencyAddress || AddressZero,\n      maxMintSupply: this._maxQuantity,\n      waitTimeSecondsLimitPerTransaction: this._waitInSeconds,\n      quantityLimitPerTransaction: this._quantityLimitPerTransaction,\n      currentMintSupply: 0,\n      merkleRoot: this._merkleCondition?.merkleRoot\n        ? this._merkleCondition.merkleRoot\n        : this._merkleRootHash,\n    };\n  }\n\n  /**\n   * Wait time enforced after calling `claim` before the next `claim` can be called.\n   *\n   * @param waitInSeconds - The wait time in seconds.\n   */\n  public setWaitTimeBetweenClaims(\n    waitInSeconds: BigNumberish,\n  ): ClaimConditionPhase {\n    this._waitInSeconds = waitInSeconds;\n    return this;\n  }\n}\n","import { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { FunctionDeprecatedError } from \"../common/error\";\nimport { PublicClaimCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { SnapshotInfo } from \"../types/snapshots/SnapshotInfo\";\nimport ClaimConditionPhase from \"./ClaimConditionPhase\";\n\nclass ClaimConditionFactory {\n  private phases: ClaimConditionPhase[] = [];\n  private createSnapshot: (leafs: string[]) => Promise<SnapshotInfo>;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor(createSnapshotFunc: (leafs: string[]) => Promise<SnapshotInfo>) {\n    this.createSnapshot = createSnapshotFunc;\n  }\n\n  /**\n   * Used internally when creating a drop module/updating\n   * the claim conditions of a drop module.\n   *\n   * @internal\n   *\n   * @returns - The claim conditions that will be used when validating a users claim transaction.\n   */\n  public async buildConditions(): Promise<PublicClaimCondition[]> {\n    let sorted: PublicClaimCondition[] = [];\n    await Promise.all(\n      this.phases.map((c) => c.buildPublicClaimCondition()),\n    ).then((publicClaimConditions) => {\n      // TODO: write test to ensure they're sorted by start time, earliest first\n      sorted = publicClaimConditions.sort((a, b) => {\n        if (a.startTimestamp.eq(b.startTimestamp)) {\n          return 0;\n        } else if (a.startTimestamp.gt(b.startTimestamp)) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n    });\n\n    return sorted;\n  }\n\n  /**\n   * Used internally when creating a drop module/updating\n   * the claim conditions of a drop module.\n   *\n   * @internal\n   *\n   * @returns - The claim conditions that will be used when validating a users claim transaction.\n   */\n  public async buildConditionsForDropV1(): Promise<PublicClaimCondition[]> {\n    // v1 startTimestamp takes seconds from now.\n    // v2 takes unix timestamp in seconds.\n    let conditions = await Promise.all(\n      this.phases.map((c) => c.buildPublicClaimCondition()),\n    );\n\n    conditions = conditions.map((c) => {\n      const now = Math.floor(Date.now() / 1000);\n      return {\n        ...c,\n        startTimestamp: c.startTimestamp.lt(now)\n          ? BigNumber.from(0)\n          : c.startTimestamp.sub(now),\n      };\n    });\n\n    // TODO: write test to ensure they're sorted by start time, earliest first\n    const sorted = conditions.sort((a, b) => {\n      if (a.startTimestamp.eq(b.startTimestamp)) {\n        return 0;\n      } else if (a.startTimestamp.gt(b.startTimestamp)) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n\n    return sorted;\n  }\n\n  /**\n   * Converts a set of generic `PublicClaimCondition`s into a `ClaimConditionFactory`\n   *\n   * @param conditions - The conditions to load, should be returned directly from the contract.\n   * @returns - The loaded claim condition factory.\n   */\n  public fromPublicClaimConditions(conditions: PublicClaimCondition[]) {\n    const phases = [];\n    for (const condition of conditions) {\n      const phase = new ClaimConditionPhase(this.createSnapshot);\n\n      // If there's a price, there must also be an associated currency\n      if (condition.currency) {\n        phase.setPrice(condition.pricePerToken, condition.currency);\n      }\n\n      if (condition.maxMintSupply) {\n        phase.setMaxQuantity(condition.maxMintSupply);\n      }\n\n      phase.setConditionStartTime(\n        new Date(condition.startTimestamp.toNumber() * 1000),\n      );\n      phases.push(phase);\n    }\n    this.phases = phases;\n    return this;\n  }\n\n  /**\n   * Creates a new claim 'phase' with its own set of claim conditions\n   *\n   * @param startTime - The start time of the phase in epoch seconds or a `Date` object.\n   * @param maxQuantity - The max quantity of the phase. By default, this is set to be infinite. In most cases, if your drop only\n   has a single phase, you don't need to override this value. If your drop has multiple phases, you should override this value and specify how many tokens are available for each specific phase.\n    * @param maxQuantityPerTransaction - The maximum number of claims that can be made in a single transaction. By default, this is set to infinite which means that there is no limit.\n   *\n   * @returns - The claim condition builder.\n   */\n  public newClaimPhase({\n    startTime,\n    maxQuantity = ethers.constants.MaxUint256,\n    maxQuantityPerTransaction = ethers.constants.MaxUint256,\n  }: {\n    startTime: Date | number;\n    maxQuantity?: BigNumberish;\n    maxQuantityPerTransaction?: BigNumberish;\n  }): ClaimConditionPhase {\n    const condition = new ClaimConditionPhase(this.createSnapshot);\n\n    condition.setConditionStartTime(startTime);\n    condition.setMaxQuantity(BigNumber.from(maxQuantity));\n    condition.setMaxQuantityPerTransaction(\n      BigNumber.from(maxQuantityPerTransaction),\n    );\n\n    this.phases.push(condition);\n    return condition;\n  }\n\n  /**\n   * Removes a claim condition phase from the factory.\n   *\n   * @param phase - The phase to remove\n   */\n  public async deleteClaimPhase(index: number): Promise<void> {\n    if (index < 0 || index >= this.phases.length) {\n      return;\n    }\n\n    const sorted = await this.buildConditions();\n    const cleared = sorted.splice(index - 1, 1);\n    this.fromPublicClaimConditions(cleared);\n  }\n\n  /**\n   * @deprecated - Use {@link ClaimConditionFactory.deleteClaimPhase} instead.\n   */\n  public removeClaimPhase(_index: number): void {\n    throw new FunctionDeprecatedError(\"deleteClaimPhase\");\n  }\n\n  /**\n   * Helper method fetches all snapshots from a factory.\n   *\n   * @returns - All snapshots in the condition factory.\n   */\n  public allSnapshots(): SnapshotInfo[] {\n    return this.phases\n      .filter((p) => p.getSnapshot() !== undefined)\n      .map((p) => p.getSnapshot() as SnapshotInfo);\n  }\n}\n\nexport default ClaimConditionFactory;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\n\n/**\n * The model for a claim proof. Currently we support only an address\n * in the leaf of the merkle tree.\n */\n@JsonObject(\"ClaimProof\")\nexport class ClaimProof {\n  /**\n   * The address of the account that owns the claim.\n   */\n  @JsonProperty(\"address\", String)\n  address = \"\";\n\n  /**\n   * The proof of the claim (an array of hashes, depending on tree depth)\n   */\n  @JsonProperty(\"proof\", [String])\n  proof: string[] = [];\n}\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport { ClaimProof } from \"./ClaimProof\";\n\n@JsonObject(\"Snapshot\")\nexport class Snapshot {\n  @JsonProperty(\"merkleRoot\", String)\n  merkleRoot = \"\";\n\n  @JsonProperty(\"claims\", [ClaimProof])\n  claims: ClaimProof[] = [];\n}\n","import {\n  ERC20__factory,\n  LazyMintERC1155 as BundleDrop,\n  LazyMintERC1155__factory as BundleDrop__factory,\n} from \"@3rdweb/contracts\";\nimport { ClaimConditionStruct } from \"@3rdweb/contracts/dist/LazyMintERC1155\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike, Contract, ethers } from \"ethers\";\nimport { JsonConvert } from \"json2typescript\";\nimport {\n  getCurrencyValue,\n  isNativeToken,\n  ModuleType,\n  NATIVE_TOKEN_ADDRESS,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { invariant } from \"../common/invariant\";\nimport { isMetadataEqual } from \"../common/isMetadataEqual\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ClaimEligibility } from \"../enums\";\nimport ClaimConditionFactory from \"../factories/ClaimConditionFactory\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport { ClaimCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { Snapshot } from \"../types/snapshots\";\n\n/**\n * @beta\n */\nexport interface BundleDropCreateClaimCondition {\n  startTimestamp?: BigNumberish;\n  maxClaimableSupply: BigNumberish;\n  quantityLimitPerTransaction?: BigNumberish;\n  waitTimeInSecondsBetweenClaims?: BigNumberish;\n  pricePerToken?: BigNumberish;\n  currency?: string;\n  merkleRoot?: BytesLike;\n}\n\n/**\n * @beta\n */\nexport interface BundleDropMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @internal\n */\nconst OLD_CLAIM_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_quantity\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_proofs\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"claimConditionIndex\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"claimer\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quantityClaimed\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ClaimedTokens\",\n    type: \"event\",\n  },\n];\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getBundleDropModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class BundleDropModule\n  extends ModuleWithRoles<BundleDrop>\n  implements ITransferable\n{\n  private _shouldCheckVersion = true;\n  private _isNewClaim = false;\n  public static moduleType: ModuleType = ModuleType.BUNDLE_DROP;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return BundleDropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): BundleDrop {\n    return BundleDrop__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return BundleDropModule.moduleType;\n  }\n\n  private async transformResultToClaimCondition(\n    pm: ClaimConditionStruct,\n  ): Promise<ClaimCondition> {\n    const cv = await getCurrencyValue(\n      this.providerOrSigner,\n      pm.currency,\n      pm.pricePerToken,\n    );\n    return {\n      startTimestamp: new Date(\n        BigNumber.from(pm.startTimestamp).toNumber() * 1000,\n      ),\n      maxMintSupply: pm.maxClaimableSupply.toString(),\n      currentMintSupply: pm.supplyClaimed.toString(),\n      availableSupply: BigNumber.from(pm.maxClaimableSupply)\n        .sub(pm.supplyClaimed)\n        .toString(),\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n      waitTimeSecondsLimitPerTransaction:\n        pm.waitTimeInSecondsBetweenClaims.toString(),\n      price: BigNumber.from(pm.pricePerToken),\n      pricePerToken: BigNumber.from(pm.pricePerToken),\n      currency: pm.currency,\n      currencyContract: pm.currency,\n      currencyMetadata: cv,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.sdk.getStorage(),\n    );\n  }\n\n  public async get(tokenId: string): Promise<BundleDropMetadata> {\n    const [supply, metadata] = await Promise.all([\n      this.readOnlyContract.totalSupply(tokenId).catch(() => BigNumber.from(0)),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return {\n      supply,\n      metadata,\n    };\n  }\n\n  /**\n   * Get NFT Data\n   *\n   * @remarks Get data associated with NFTs in this module.\n   *\n   * @example\n   * ```javascript\n   * // Get data associated with every NFT in the module\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(): Promise<BundleDropMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<BundleDropMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenIdToMint();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => await this.get(b.tokenId.toString())),\n    );\n  }\n\n  public async getActiveClaimCondition(\n    tokenId: BigNumberish,\n  ): Promise<ClaimCondition> {\n    const index = await this.readOnlyContract.getIndexOfActiveCondition(\n      tokenId,\n    );\n    return this.transformResultToClaimCondition(\n      await this.readOnlyContract.getClaimConditionAtIndex(tokenId, index),\n    );\n  }\n\n  public async getAllClaimConditions(\n    tokenId: BigNumberish,\n  ): Promise<ClaimCondition[]> {\n    const claimCondition = await this.readOnlyContract.claimConditions(tokenId);\n    const count = claimCondition.totalConditionCount.toNumber();\n    const conditions = [];\n    for (let i = 0; i < count; i++) {\n      conditions.push(\n        await this.readOnlyContract.getClaimConditionAtIndex(tokenId, i),\n      );\n    }\n    return Promise.all(\n      conditions.map((c) => this.transformResultToClaimCondition(c)),\n    );\n  }\n\n  public async getDefaultSaleRecipient(): Promise<string> {\n    return await this.readOnlyContract.defaultSaleRecipient();\n  }\n\n  public async getSaleRecipient(tokenId: BigNumberish): Promise<string> {\n    const saleRecipient = await this.readOnlyContract.saleRecipient(tokenId);\n    if (saleRecipient === AddressZero) {\n      return this.readOnlyContract.defaultSaleRecipient();\n    }\n    return saleRecipient;\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   * // The token ID of the NFT you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await module.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(\n    address: string,\n    tokenId: BigNumberish,\n  ): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress(), tokenId);\n  }\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n\n  /*\n   *\n   * @deprecated - {@link BundleDropModule.mintBatch}\n   */\n  public async lazyMintBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<BundleDropMetadata[]> {\n    const tokenIds = await this.createBatch(metadatas);\n    return await Promise.all(tokenIds.map((t) => this.get(t.toString())));\n  }\n\n  /**\n   * Create Many NFTs\n   *\n   * @remarks Create and mint NFTs.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }];\n   *\n   * await module.createBatch(metadatas);\n   * ```\n   */\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    const startFileNumber = await this.readOnlyContract.nextTokenIdToMint();\n    const { baseUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n    const receipt = await this.sendTransaction(\"lazyMint\", [\n      metadatas.length,\n      `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`,\n    ]);\n    const event = this.parseEventLogs(\"LazyMintedTokens\", receipt?.logs);\n    const [startingIndex, endingIndex]: BigNumber[] = event;\n    const tokenIds = [];\n    for (let i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n      tokenIds.push(i.toString());\n    }\n    return tokenIds;\n  }\n\n  public async setSaleRecipient(\n    tokenId: BigNumberish,\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return this.sendTransaction(\"setSaleRecipient\", [tokenId, recipient]);\n  }\n\n  public async setDefaultSaleRecipient(\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return this.sendTransaction(\"setDefaultSaleRecipient\", [recipient]);\n  }\n\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of NFTs you want to send\n   * const amount = 1;\n   *\n   * await module.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      tokenId,\n      amount,\n      data,\n    ]);\n  }\n\n  /**\n   * Sets public claim conditions for the next minting using the\n   * claim condition factory.\n   *\n   * @param factory - The claim condition factory.\n   */\n  public async setClaimCondition(\n    tokenId: BigNumberish,\n    factory: ClaimConditionFactory,\n  ) {\n    const conditions = (await factory.buildConditions()).map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken: c.pricePerToken,\n      currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    const oldMerkle = metadata[\"merkle\"];\n\n    const existingMerkle = \"merkle\" in metadata ? metadata.merkle : {};\n    for (const key of Object.keys(existingMerkle)) {\n      merkleInfo[key] = existingMerkle[key];\n    }\n    metadata[\"merkle\"] = merkleInfo;\n\n    const encoded = [];\n    if (!isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n      const metadataUri = await this.sdk\n        .getStorage()\n        .upload(JSON.stringify(metadata));\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"setContractURI\", [\n          metadataUri,\n        ]),\n      );\n    }\n\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setClaimConditions\", [\n        tokenId,\n        conditions,\n      ]),\n    );\n\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n  public async updateClaimConditions(\n    tokenId: BigNumberish,\n    factory: ClaimConditionFactory,\n  ) {\n    const conditions = (await factory.buildConditions()).map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken: c.pricePerToken,\n      currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    const oldMerkle = metadata[\"merkle\"];\n\n    const existingMerkle = \"merkle\" in metadata ? metadata.merkle : {};\n    for (const key of Object.keys(existingMerkle)) {\n      merkleInfo[key] = existingMerkle[key];\n    }\n    metadata[\"merkle\"] = merkleInfo;\n\n    const encoded = [];\n    if (!isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n      const metadataUri = await this.sdk\n        .getStorage()\n        .upload(JSON.stringify(metadata));\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"setContractURI\", [\n          metadataUri,\n        ]),\n      );\n    }\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"updateClaimConditions\", [\n        tokenId,\n        conditions,\n      ]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Creates a claim condition factory\n   *\n   * @returns - A new claim condition factory\n   */\n  public getClaimConditionFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * @deprecated - Use the ClaimConditionFactory instead.\n   */\n  public async setPublicClaimConditions(\n    tokenId: BigNumberish,\n    conditions: BundleDropCreateClaimCondition[],\n  ) {\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: c.startTimestamp || 0,\n      maxClaimableSupply: c.maxClaimableSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxClaimableSupply,\n      waitTimeInSecondsBetweenClaims: c.waitTimeInSecondsBetweenClaims || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setClaimConditions\", [tokenId, _conditions]);\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  private async prepareClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ) {\n    const mintCondition = await this.getActiveClaimCondition(tokenId);\n    const overrides = (await this.getCallOverrides()) || {};\n\n    const addressToClaim = await this.getSignerAddress();\n    const { metadata } = await this.getMetadata();\n    if (!mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n      const snapshot = await this.sdk\n        .getStorage()\n        .get(metadata?.merkle[mintCondition.merkleRoot.toString()]);\n      const jsonConvert = new JsonConvert();\n      const snapshotData = jsonConvert.deserializeObject(\n        JSON.parse(snapshot),\n        Snapshot,\n      );\n      const item = snapshotData.claims.find(\n        (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n      );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n    }\n    if (mintCondition.pricePerToken.gt(0)) {\n      if (isNativeToken(mintCondition.currency)) {\n        overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n          quantity,\n        );\n      } else {\n        const erc20 = ERC20__factory.connect(\n          mintCondition.currency,\n          this.providerOrSigner,\n        );\n        const owner = await this.getSignerAddress();\n        const spender = this.address;\n        const allowance = await erc20.allowance(owner, spender);\n        const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n          BigNumber.from(quantity),\n        );\n\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n    }\n    return {\n      overrides,\n      proofs,\n    };\n  }\n\n  /**\n   * Claim a token to yourself\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n\n  public async claim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionReceipt> {\n    const claimData = await this.prepareClaim(tokenId, quantity, proofs);\n\n    if (await this.isNewClaim()) {\n      return await this.sendTransaction(\n        \"claim\",\n        [await this.getSignerAddress(), tokenId, quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    } else {\n      return await this.sendContractTransaction(\n        new Contract(this.address, OLD_CLAIM_ABI, this.providerOrSigner),\n        \"claim\",\n        [tokenId, quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    }\n  }\n\n  /**\n   * Claim NFTs to Wallet\n   *\n   * @remarks Let the a specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to claim the NFTs\n   * const address = \"{{wallet_address}}\";\n   *\n   * // The number of NFTs to claim\n   * const quantity = 1;\n   *\n   * // The token ID of the NFT you want to claim\n   * const tokenId = \"0\"\n   *\n   * await module.claimTo(tokenId, quantity, address);\n   * ```\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param addressToClaim - Address you want to send the token to\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claimTo(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToClaim: string,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionReceipt> {\n    const claimData = await this.prepareClaim(tokenId, quantity, proofs);\n\n    if (await this.isNewClaim()) {\n      return await this.sendTransaction(\n        \"claim\",\n        [addressToClaim, tokenId, quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    }\n\n    const encoded = [];\n\n    // forcing it old version of claim params\n    encoded.push(\n      new Contract(\n        this.address,\n        OLD_CLAIM_ABI,\n        this.providerOrSigner,\n      ).interface.encodeFunctionData(\"claim\", [\n        tokenId,\n        quantity,\n        claimData.proofs,\n      ]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"safeTransferFrom\", [\n        await this.getSignerAddress(),\n        addressToClaim,\n        tokenId,\n        quantity,\n        [0],\n      ]),\n    );\n\n    return await this.sendTransaction(\n      \"multicall\",\n      [encoded],\n      claimData.overrides,\n    );\n  }\n\n  public async burn(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    const account = await this.getSignerAddress();\n    return await this.sendTransaction(\"burn\", [account, tokenId, amount]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      tokenId,\n      amount,\n      data,\n    ]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  public getClaimConditionsFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   *\n   * @param tokenId - The token ID to get the total supply of\n   */\n\n  public async totalSupply(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Pulls the list of all addresses that have claimed a particular token\n   *\n   * @beta - This can be very slow for large numbers of token holders\n   *\n   * @param tokenId - The token id to get the claimers of\n   * @returns - A unique list of addresses that claimed the token\n   */\n  public async getAllClaimerAddresses(\n    tokenId: BigNumberish,\n  ): Promise<string[]> {\n    const a = await this.contract.queryFilter(\n      this.contract.filters.ClaimedTokens(null, BigNumber.from(tokenId)),\n    );\n    return Array.from(new Set(a.map((b) => b.args.claimer)));\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - The token id that would be claimed.\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The address that would be claiming the token.\n   */\n  public async getClaimIneligibilityReasons(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    if (addressToCheck === undefined) {\n      throw new Error(\"addressToCheck is required\");\n    }\n\n    try {\n      [activeConditionIndex, claimCondition] = await Promise.all([\n        this.readOnlyContract.getIndexOfActiveCondition(tokenId),\n        this.getActiveClaimCondition(tokenId),\n      ]);\n    } catch (err: any) {\n      if ((err.message as string).includes(\"no public mint condition.\")) {\n        reasons.push(ClaimEligibility.NoActiveClaimPhase);\n        return reasons;\n      }\n      console.error(\"Failed to get active claim condition\", err);\n      throw new Error(\"Failed to get active claim condition\");\n    }\n\n    if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n      reasons.push(ClaimEligibility.NotEnoughSupply);\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(claimCondition.merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRoot.toString();\n      const proofs = await this.getClaimerProofs(merkleLower, addressToCheck);\n      if (proofs.length === 0) {\n        const hashedAddress = ethers.utils\n          .keccak256(addressToCheck)\n          .toLowerCase();\n        if (hashedAddress !== merkleLower) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n        }\n      }\n      // TODO: compute proofs to root, need browser compatibility\n    }\n\n    // check for claim timestamp between claims\n    const timestampForNextClaim =\n      await this.readOnlyContract.getTimestampForNextValidClaim(\n        tokenId,\n        activeConditionIndex,\n        addressToCheck,\n      );\n\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (now.lt(timestampForNextClaim)) {\n      // if waitTimeSecondsLimitPerTransaction equals to timestampForNextClaim, that means that this is the first time this address claims this token\n      if (\n        BigNumber.from(claimCondition.waitTimeSecondsLimitPerTransaction).eq(\n          timestampForNextClaim,\n        )\n      ) {\n        const balance = await this.readOnlyContract.balanceOf(\n          addressToCheck,\n          tokenId,\n        );\n\n        if (balance.gte(1)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        }\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // check for wallet balance\n    if (claimCondition.pricePerToken.gt(0)) {\n      const totalPrice = claimCondition.pricePerToken.mul(quantity);\n      if (isNativeToken(claimCondition.currency)) {\n        const provider = await this.getProvider();\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const provider = await this.getProvider();\n        const balance = await ERC20__factory.connect(\n          claimCondition.currency,\n          provider,\n        ).balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /*\n   * Checks to see if the current signer can claim the specified number of tokens.\n   *\n   * @param tokenId - The id of the token to check.\n   * @param quantity - The quantity of tokens to check.\n   * @param addressToCheck - The wallet address to check.\n   * @returns - True if the current signer can claim the specified number of tokens, false otherwise.\n   */\n  public async canClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    if (!addressToCheck) {\n      addressToCheck = await this.getSignerAddress();\n    }\n    return (\n      (\n        await this.getClaimIneligibilityReasons(\n          tokenId,\n          quantity,\n          addressToCheck,\n        )\n      ).length === 0\n    );\n  }\n\n  /**\n   * Fetches the proof for the current signer for a particular wallet.\n   *\n   * @param merkleRoot - The merkle root of the condition to check.\n   * @returns - The proof for the current signer for the specified condition.\n   */\n  private async getClaimerProofs(\n    merkleRoot: string,\n    addressToClaim?: string,\n  ): Promise<string[]> {\n    if (!addressToClaim) {\n      addressToClaim = await this.getSignerAddress();\n    }\n    const { metadata } = await this.getMetadata();\n    const snapshot = await this.sdk\n      .getStorage()\n      .get(metadata?.merkle[merkleRoot]);\n    const jsonConvert = new JsonConvert();\n    const snapshotData = jsonConvert.deserializeObject(\n      JSON.parse(snapshot),\n      Snapshot,\n    );\n    const item = snapshotData.claims.find(\n      (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n    );\n    if (item === undefined) {\n      return [];\n    }\n    return item.proof;\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * @internal\n   */\n  private async isNewClaim(): Promise<boolean> {\n    await this.checkVersion();\n    return this._isNewClaim;\n  }\n\n  /**\n   * @internal\n   */\n  private async checkVersion() {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.VERSION();\n        this._isNewClaim = true;\n      } catch (e) {\n        this._isNewClaim = false;\n      }\n\n      this._shouldCheckVersion = false;\n    }\n  }\n}\n","import { DataStore, DataStore__factory } from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumberish, ethers } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { ModuleWithRoles } from \"../core/module\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getDatastoreModule}\n * @alpha\n */\nexport class DatastoreModule extends ModuleWithRoles<DataStore> {\n  public static moduleType: ModuleType = ModuleType.DATASTORE;\n\n  public static roles = [RolesMap.admin, RolesMap.editor] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DatastoreModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): DataStore {\n    return DataStore__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DatastoreModule.moduleType;\n  }\n\n  public async getUint(key: string): Promise<BigNumberish | undefined> {\n    const keyHash = ethers.utils.id(key.toString());\n    return await this.readOnlyContract.getUint(keyHash);\n  }\n\n  // write functions\n  public async setUint(\n    key: string,\n    value: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    const keyHash = ethers.utils.id(key.toString());\n    return await this.sendTransaction(\"setUint\", [keyHash, value]);\n  }\n}\n","import { BigNumberish } from \"ethers\";\n\nexport const DEFAULT_QUERY_ALL_COUNT = 100;\n\n// in the future we can support sorting too, but only pagination for now\nexport interface QueryAllParams {\n  start: BigNumberish;\n  count: BigNumberish;\n}\n","import {\n  ERC20__factory,\n  LazyMintERC721 as DropV2,\n  LazyMintERC721__factory as DropV2__factory,\n  LazyNFT as Drop,\n  LazyNFT__factory as Drop__factory,\n} from \"@3rdweb/contracts\";\nimport { ClaimConditionStructOutput } from \"@3rdweb/contracts/dist/LazyMintERC721\";\nimport { PublicMintConditionStruct } from \"@3rdweb/contracts/dist/LazyNFT\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  Contract,\n  ethers,\n} from \"ethers\";\nimport { JsonConvert } from \"json2typescript\";\nimport {\n  getCurrencyValue,\n  isNativeToken,\n  ModuleType,\n  NATIVE_TOKEN_ADDRESS,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { invariant } from \"../common/invariant\";\nimport { isMetadataEqual } from \"../common/isMetadataEqual\";\nimport { getTokenMetadata, NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ThirdwebSDK } from \"../core\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject, ProviderOrSigner } from \"../core/types\";\nimport { ClaimEligibility } from \"../enums\";\nimport ClaimConditionFactory from \"../factories/ClaimConditionFactory\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport { ISDKOptions } from \"../interfaces/ISdkOptions\";\nimport {\n  ClaimCondition,\n  PublicMintCondition,\n} from \"../types/claim-conditions/PublicMintCondition\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../types/QueryParams\";\nimport { Snapshot } from \"../types/snapshots/Snapshot\";\n\n/**\n * @beta\n */\nexport interface CreatePublicMintCondition {\n  startTimestampInSeconds?: BigNumberish;\n  maxMintSupply: BigNumberish;\n  quantityLimitPerTransaction?: BigNumberish;\n  waitTimeSecondsLimitPerTransaction?: BigNumberish;\n  pricePerToken?: BigNumberish;\n  currency?: string;\n  merkleRoot?: BytesLike;\n}\n\n/**\n * @internal\n */\nconst ABI_V1_22_0 = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"claimConditionIndex\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"claimer\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quantityClaimed\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ClaimedTokens\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_quantity\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_proofs\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\n/**\n * @internal\n */\nconst ABI_V1_24_0 = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"baseURI\",\n        type: \"string\",\n      },\n    ],\n    name: \"LazyMintedTokens\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_baseURIForTokens\",\n        type: \"string\",\n      },\n    ],\n    name: \"lazyMint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport interface BatchToReveal {\n  batchId: BigNumber;\n  batchUri: string;\n  placeholderMetadata: NFTMetadata;\n}\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getDropModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class DropModule\n  extends ModuleWithRoles<DropV2>\n  implements ITransferable\n{\n  private _shouldCheckVersion = true;\n  private _isV0 = false;\n  private _version = 0;\n  private v1Module: DropV1Module;\n\n  public static moduleType: ModuleType = ModuleType.DROP;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @internal\n   */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    super(providerOrSigner, address, options, sdk);\n    this.v1Module = new DropV1Module(providerOrSigner, address, options, sdk);\n  }\n\n  /**\n   * @internal\n   */\n  public setProviderOrSigner(providerOrSigner: ProviderOrSigner) {\n    super.setProviderOrSigner(providerOrSigner);\n    this.v1Module?.setProviderOrSigner(providerOrSigner);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): DropV2 {\n    return DropV2__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DropModule.moduleType;\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.sdk.getStorage(),\n    );\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this module.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    // if v1 module then use v1\n    if (await this.isV0()) {\n      return this.v1Module.getAll(queryParams);\n    }\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextTokenIdToMint()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId - start).keys()).map((i) =>\n        this.get((start + i).toString()),\n      ),\n    );\n  }\n\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    if (await this.isV0()) {\n      return this.v1Module.getAllUnclaimed();\n    }\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = BigNumber.from(\n      Math.min(\n        (await this.readOnlyContract.nextTokenIdToMint()).toNumber(),\n        start + count,\n      ),\n    );\n    const unmintedId = await this.readOnlyContract.nextTokenIdToClaim();\n    return (\n      await Promise.all(\n        Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map((i) =>\n          this.getTokenMetadata(unmintedId.add(i).toString()),\n        ),\n      )\n    ).map((metadata) => ({ owner: AddressZero, metadata }));\n  }\n\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    if (await this.isV0()) {\n      return this.v1Module.getAllClaimed();\n    }\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextTokenIdToClaim()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async ownerOf(tokenId: string): Promise<string> {\n    return await this.readOnlyContract.ownerOf(tokenId);\n  }\n\n  public async getDefaultSaleRecipient(): Promise<string> {\n    return await this.readOnlyContract.defaultSaleRecipient();\n  }\n\n  public async setDefaultSaleRecipient(\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setDefaultSaleRecipient\", [recipient]);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await module.getOwned(address);\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getOwned(_address?: string): Promise<NFTMetadataOwner[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * @deprecated - For backward compatibility reason\n   */\n  private transformResultToMintCondition(\n    pm: ClaimConditionStructOutput,\n  ): PublicMintCondition {\n    return {\n      startTimestamp: pm.startTimestamp,\n      maxMintSupply: pm.maxClaimableSupply,\n      currentMintSupply: pm.supplyClaimed,\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction,\n      waitTimeSecondsLimitPerTransaction: pm.waitTimeInSecondsBetweenClaims,\n      pricePerToken: pm.pricePerToken,\n      currency: pm.currency,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  private async transformResultToClaimCondition(\n    pm: ClaimConditionStructOutput,\n  ): Promise<ClaimCondition> {\n    const cv = await getCurrencyValue(\n      this.providerOrSigner,\n      pm.currency,\n      pm.pricePerToken,\n    );\n    return {\n      startTimestamp: new Date(\n        BigNumber.from(pm.startTimestamp).toNumber() * 1000,\n      ),\n      maxMintSupply: pm.maxClaimableSupply.toString(),\n      currentMintSupply: pm.supplyClaimed.toString(),\n      availableSupply: BigNumber.from(pm.maxClaimableSupply)\n        .sub(pm.supplyClaimed)\n        .toString(),\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n      waitTimeSecondsLimitPerTransaction:\n        pm.waitTimeInSecondsBetweenClaims.toString(),\n      price: BigNumber.from(pm.pricePerToken),\n      pricePerToken: BigNumber.from(pm.pricePerToken),\n      currency: pm.currency,\n      currencyContract: pm.currency,\n      currencyMetadata: cv,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getActiveClaimCondition} instead\n   */\n  public async getActiveMintCondition(): Promise<PublicMintCondition> {\n    if (await this.isV0()) {\n      return this.v1Module.getActiveMintCondition();\n    }\n    const index = await this.readOnlyContract.getIndexOfActiveCondition();\n    return this.transformResultToMintCondition(\n      await this.readOnlyContract.getClaimConditionAtIndex(index),\n    );\n  }\n\n  public async getActiveClaimCondition(): Promise<ClaimCondition> {\n    if (await this.isV0()) {\n      return this.v1Module.getActiveClaimCondition();\n    }\n    const index = await this.readOnlyContract.getIndexOfActiveCondition();\n    const mc = await this.readOnlyContract.getClaimConditionAtIndex(index);\n    return await this.transformResultToClaimCondition(mc);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getAllClaimConditions} instead\n   */\n  public async getAllMintConditions(): Promise<PublicMintCondition[]> {\n    if (await this.isV0()) {\n      return this.v1Module.getAllMintConditions();\n    }\n\n    const claimCondition = await this.readOnlyContract.claimConditions();\n    const count = claimCondition.totalConditionCount.toNumber();\n    const conditions = [];\n\n    for (let i = 0; i < count; i++) {\n      conditions.push(\n        this.transformResultToMintCondition(\n          await this.readOnlyContract.getClaimConditionAtIndex(i),\n        ),\n      );\n    }\n\n    return conditions;\n  }\n\n  public async getAllClaimConditions(): Promise<ClaimCondition[]> {\n    if (await this.isV0()) {\n      return this.v1Module.getAllClaimConditions();\n    }\n    const claimCondition = await this.readOnlyContract.claimConditions();\n    const count = claimCondition.totalConditionCount.toNumber();\n    const conditions = [];\n    for (let i = 0; i < count; i++) {\n      conditions.push(await this.readOnlyContract.getClaimConditionAtIndex(i));\n    }\n    return Promise.all(\n      conditions.map((c) => this.transformResultToClaimCondition(c)),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    if (await this.isV0()) {\n      return this.v1Module.totalSupply();\n    }\n    return await this.readOnlyContract.nextTokenIdToMint();\n  }\n\n  /**\n   * @internal\n   */\n  public async maxTotalSupply(): Promise<BigNumber> {\n    if (await this.isV0()) {\n      return this.v1Module.maxTotalSupply();\n    }\n    return await this.readOnlyContract.nextTokenIdToMint();\n  }\n\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    if (await this.isV0()) {\n      return this.v1Module.totalUnclaimedSupply();\n    }\n    return (await this.readOnlyContract.nextTokenIdToMint()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    if (await this.isV0()) {\n      return this.v1Module.totalClaimedSupply();\n    }\n    return await this.readOnlyContract.nextTokenIdToClaim();\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await module.balanceOf(address);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * await module.transfer(toAddress, tokenId);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\n   */\n  public async lazyMint(metadata: MetadataURIOrObject) {\n    if (await this.isV0()) {\n      await this.v1Module.lazyMint(metadata);\n      return;\n    }\n    await this.createBatch([metadata]);\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\n   */\n  public async lazyMintBatch(metadatas: MetadataURIOrObject[]) {\n    if (await this.isV0()) {\n      await this.v1Module.lazyMintBatch(metadatas);\n      return;\n    }\n    await this.createBatch(metadatas);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\n   */\n  public async setMintConditions(factory: ClaimConditionFactory) {\n    if (await this.isV0()) {\n      return this.v1Module.setMintConditions(factory);\n    }\n    return this.setClaimCondition(factory);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\n   */\n  public async setClaimConditions(factory: ClaimConditionFactory) {\n    return this.setClaimCondition(factory);\n  }\n\n  /**\n   * Sets public mint conditions for the next minting using the\n   * claim condition factory.\n   *\n   * @param factory - The claim condition factory.\n   */\n  public async setClaimCondition(factory: ClaimConditionFactory) {\n    if (await this.isV0()) {\n      return this.v1Module.setClaimCondition(factory);\n    }\n    const conditions = (await factory.buildConditions()).map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken: c.pricePerToken,\n      currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    const oldMerkle = metadata[\"merkle\"];\n\n    const defaultMerkleRoot = hexZeroPad([0], 32).toString();\n\n    if (factory.allSnapshots().length > 0) {\n      metadata[\"merkle\"] = merkleInfo;\n    } else if (\n      conditions.filter((c) => c.merkleRoot !== defaultMerkleRoot).length === 0\n    ) {\n      metadata[\"merkle\"] = {};\n    }\n\n    const encoded = [];\n    if (!isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n      const metadataUri = await this.sdk\n        .getStorage()\n        .upload(JSON.stringify(metadata));\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"setContractURI\", [\n          metadataUri,\n        ]),\n      );\n    }\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setClaimConditions\", [\n        conditions,\n      ]),\n    );\n\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async updateClaimConditions(factory: ClaimConditionFactory) {\n    if (await this.isV0()) {\n      return this.v1Module.setClaimCondition(factory);\n    }\n    const conditions = (await factory.buildConditions()).map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken: c.pricePerToken,\n      currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const encoded = [];\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    const oldMerkle = metadata[\"merkle\"];\n\n    if (factory.allSnapshots().length === 0 && \"merkle\" in metadata) {\n      metadata[\"merkle\"] = {};\n    } else {\n      metadata[\"merkle\"] = merkleInfo;\n    }\n\n    if (!isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n      const metadataUri = await this.sdk\n        .getStorage()\n        .upload(JSON.stringify(metadata));\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"setContractURI\", [\n          metadataUri,\n        ]),\n      );\n    }\n\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"updateClaimConditions\", [\n        conditions,\n      ]),\n    );\n\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n  /**\n   * Creates a claim condition factory\n   *\n   * @returns - A new claim condition factory\n   */\n  public getClaimConditionsFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.getClaimConditionsFactory} instead.\n   */\n  public getMintConditionsFactory(): ClaimConditionFactory {\n    return this.getClaimConditionsFactory();\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.setClaimConditions} instead.\n   */\n  public async setPublicMintConditions(\n    conditions: CreatePublicMintCondition[],\n  ) {\n    if (await this.isV0()) {\n      return this.v1Module.setPublicMintConditions(conditions);\n    }\n    const now = BigNumber.from(Date.now()).div(1000);\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: now.add(c.startTimestampInSeconds || 0),\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxMintSupply,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setClaimConditions\", [_conditions]);\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   *\n   */\n  public async getClaimIneligibilityReasons(\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    if (addressToCheck === undefined) {\n      throw new Error(\"addressToCheck is required\");\n    }\n\n    try {\n      [activeConditionIndex, claimCondition] = await Promise.all([\n        this.readOnlyContract.getIndexOfActiveCondition(),\n        this.getActiveClaimCondition(),\n      ]);\n    } catch (err: any) {\n      if ((err.message as string).includes(\"no public mint condition.\")) {\n        reasons.push(ClaimEligibility.NoActiveClaimPhase);\n        return reasons;\n      }\n      console.error(\"Failed to get active claim condition\", err);\n      throw new Error(\"Failed to get active claim condition\");\n    }\n\n    if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n      reasons.push(ClaimEligibility.NotEnoughSupply);\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(claimCondition.merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRoot.toString();\n      const proofs = await this.getClaimerProofs(merkleLower, addressToCheck);\n      if (proofs.length === 0) {\n        const hashedAddress = ethers.utils\n          .keccak256(addressToCheck)\n          .toLowerCase();\n        if (hashedAddress !== merkleLower) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n        }\n      }\n      // TODO: compute proofs to root, need browser compatibility\n    }\n\n    // check for claim timestamp between claims\n    const timestampForNextClaim =\n      await this.readOnlyContract.getTimestampForNextValidClaim(\n        activeConditionIndex,\n        addressToCheck,\n      );\n\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (now.lt(timestampForNextClaim)) {\n      // if waitTimeSecondsLimitPerTransaction equals to timestampForNextClaim, that means that this is the first time this address claims this token\n      if (\n        BigNumber.from(claimCondition.waitTimeSecondsLimitPerTransaction).eq(\n          timestampForNextClaim,\n        )\n      ) {\n        const balance = await this.readOnlyContract.balanceOf(addressToCheck);\n        if (balance.gte(1)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        }\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // check for wallet balance\n    if (claimCondition.pricePerToken.gt(0)) {\n      const totalPrice = claimCondition.pricePerToken.mul(quantity);\n      if (isNativeToken(claimCondition.currency)) {\n        const provider = await this.getProvider();\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const provider = await this.getProvider();\n        const balance = await ERC20__factory.connect(\n          claimCondition.currency,\n          provider,\n        ).balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check if they are claimable\n   * const quantity = 1;\n   *\n   * await module.canClaim(quantity);\n   * ```\n   */\n  public async canClaim(\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    if (addressToCheck === undefined) {\n      addressToCheck = await this.getSignerAddress();\n    }\n    if (await this.isV0()) {\n      return this.v1Module.canClaim(quantity, []);\n    }\n    return (\n      (await this.getClaimIneligibilityReasons(quantity, addressToCheck))\n        .length === 0\n    );\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n\n  private async prepareClaim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<{\n    overrides: ethers.CallOverrides;\n    proofs: BytesLike[];\n  }> {\n    const mintCondition = await this.getActiveClaimCondition();\n    const { metadata } = await this.getMetadata();\n\n    const addressToClaim = await this.getSignerAddress();\n\n    if (!mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n      const snapshot = await this.sdk\n        .getStorage()\n        .get(metadata?.merkle[mintCondition.merkleRoot.toString()]);\n      const jsonConvert = new JsonConvert();\n      const snapshotData = jsonConvert.deserializeObject(\n        JSON.parse(snapshot),\n        Snapshot,\n      );\n      const item = snapshotData.claims.find(\n        (c) => c.address.toLowerCase() === addressToClaim.toLowerCase(),\n      );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n    }\n\n    const overrides = (await this.getCallOverrides()) || {};\n    if (mintCondition.pricePerToken.gt(0)) {\n      if (isNativeToken(mintCondition.currency)) {\n        overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n          quantity,\n        );\n      } else {\n        const erc20 = ERC20__factory.connect(\n          mintCondition.currency,\n          this.providerOrSigner,\n        );\n        const owner = await this.getSignerAddress();\n        const spender = this.address;\n        const allowance = await erc20.allowance(owner, spender);\n        const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n          BigNumber.from(quantity),\n        );\n\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n    }\n    return {\n      overrides,\n      proofs,\n    };\n  }\n\n  /**\n   * Claim NFTs to Wallet\n   *\n   * @remarks Let the a specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to claim the NFTs\n   * const address = \"{{wallet_address}}\";\n   *\n   * // The number of NFTs to claim\n   * const quantity = 1;\n   *\n   * await module.claimTo(quantity, address);\n   * ```\n   *\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param addressToClaim - Address you want to send the token to\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claimTo(\n    quantity: BigNumberish,\n    addressToClaim: string,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionReceipt> {\n    const claimData = await this.prepareClaim(quantity, proofs);\n\n    if (await this.isNewClaim()) {\n      return await this.sendTransaction(\n        \"claim\",\n        [addressToClaim, quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    }\n\n    // backward compatibility for < 1.22.0 claim\n    const contract = new Contract(\n      this.address,\n      ABI_V1_22_0,\n      this.providerOrSigner,\n    );\n    const receipt = await this.sendContractTransaction(\n      contract,\n      \"claim\",\n      [quantity, claimData.proofs],\n      claimData.overrides,\n    );\n\n    const encoded = [];\n    const events = this.parseLogs(\"ClaimedTokens\", receipt?.logs, contract);\n    const startingIndex: BigNumber = events[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    for (let i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"transferFrom\", [\n          await this.getSignerAddress(),\n          addressToClaim,\n          i,\n        ]),\n      );\n    }\n\n    return await this.sendTransaction(\n      \"multicall\",\n      [encoded],\n      claimData.overrides,\n    );\n  }\n\n  /** Claim NFTs\n   *\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<NFTMetadataOwner[]> {\n    if (await this.isV0()) {\n      return this.v1Module.claim(quantity, proofs);\n    }\n    const claimData = await this.prepareClaim(quantity, proofs);\n\n    let receipt;\n    let contract: BaseContract = this.contract;\n    if (await this.isNewClaim()) {\n      receipt = await this.sendTransaction(\n        \"claim\",\n        [await this.getSignerAddress(), quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    } else {\n      // backward compatibility for < 1.22.0 claim\n      contract = new Contract(this.address, ABI_V1_22_0, this.providerOrSigner);\n      receipt = await this.sendContractTransaction(\n        contract,\n        \"claim\",\n        [quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    }\n\n    const events = this.parseLogs(\"ClaimedTokens\", receipt?.logs, contract);\n    const startingIndex: BigNumber = events[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const tokenIds = [];\n    for (let i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n      tokenIds.push(BigNumber.from(i.toString()));\n    }\n    return await Promise.all(\n      tokenIds.map(async (t) => await this.get(t.toString())),\n    );\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  /**\n   * Create batch allows you to create a batch of tokens\n   * in one transaction. This function can only be called\n   * once per module at the moment.\n   *\n   * @beta\n   *\n   * @param metadatas - The metadata to include in the batch.\n   */\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    if (await this.isV0()) {\n      return this.v1Module.createBatch(metadatas);\n    }\n    const startFileNumber = await this.readOnlyContract.nextTokenIdToMint();\n    const { baseUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n\n    let receipt;\n    let contract: BaseContract = this.contract;\n\n    if (await this.hasDelayedReveal()) {\n      receipt = await this.sendTransaction(\"lazyMint\", [\n        metadatas.length,\n        baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n        ethers.utils.toUtf8Bytes(\"\"),\n      ]);\n    } else {\n      contract = new Contract(this.address, ABI_V1_24_0, this.providerOrSigner);\n      receipt = await this.sendContractTransaction(contract, \"lazyMint\", [\n        metadatas.length,\n        baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n      ]);\n    }\n\n    const events = this.parseLogs(\"LazyMintedTokens\", receipt?.logs, contract);\n    const [startingIndex, endingIndex]: BigNumber[] = events[0].args;\n    const tokenIds = [];\n    for (let i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n      tokenIds.push(i.toString());\n    }\n    return tokenIds;\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  private async hashDelayRevealPassword(\n    batchTokenIndex: BigNumberish,\n    password: string,\n  ) {\n    const chainId = await this.getChainID();\n    const contractAddress = this.address;\n    return ethers.utils.solidityKeccak256(\n      [\"string\", \"uint256\", \"uint256\", \"address\"],\n      [password, chainId, batchTokenIndex, contractAddress],\n    );\n  }\n\n  /**\n   * Create batch allows you to create a batch of tokens\n   * in one transaction. This function can only be called\n   * once per module at the moment.\n   *\n   * @param metadatas - The metadata to include in the batch.\n   */\n  public async createDelayedRevealBatch(\n    placeholder: MetadataURIOrObject,\n    metadatas: MetadataURIOrObject[],\n    password: string,\n  ): Promise<string[]> {\n    if (!(await this.hasDelayedReveal())) {\n      throw new Error(\"delay reveal unsupported\");\n    }\n\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n\n    const { baseUri: placeholderUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch([placeholder], this.address);\n\n    const startFileNumber = await this.readOnlyContract.nextTokenIdToMint();\n    const { baseUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n\n    const baseUriId = await this.readOnlyContract.getBaseURICount();\n    const encryptedBaseUri = await this.readOnlyContract.encryptDecrypt(\n      ethers.utils.toUtf8Bytes(baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`),\n      await this.hashDelayRevealPassword(baseUriId, password),\n    );\n\n    const receipt = await this.sendTransaction(\"lazyMint\", [\n      metadatas.length,\n      placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`,\n      encryptedBaseUri,\n    ]);\n\n    const events = this.parseLogs(\"LazyMintedTokens\", receipt?.logs);\n    const [startingIndex, endingIndex]: BigNumber[] = events[0].args;\n    const tokenIds = [];\n    for (let i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n      tokenIds.push(i.toString());\n    }\n    return tokenIds;\n  }\n\n  public async reveal(batchId: BigNumberish, password: string) {\n    if (!(await this.hasDelayedReveal())) {\n      throw new Error(\"delay reveal unsupported\");\n    }\n\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n\n    const key = await this.hashDelayRevealPassword(batchId, password);\n\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contract.callStatic.reveal(batchId, key);\n\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\n          `Error revealing batch ${batchId} - make sure your password is correct`,\n        );\n      }\n    } catch (e) {\n      console.log(`Error revealing batch ${batchId}`, e);\n      throw new Error(\n        `Error revealing batch ${batchId} - make sure your password is correct`,\n      );\n    }\n\n    await this.sendTransaction(\"reveal\", [batchId, key]);\n  }\n\n  /**\n   * Gets a list of token uris that needs to be revealed.\n   */\n  public async getBatchesToReveal(): Promise<BatchToReveal[]> {\n    if (!(await this.hasDelayedReveal())) {\n      throw new Error(\"Contract does not support delay reveal\");\n    }\n\n    const count = await this.readOnlyContract.getBaseURICount();\n    if (count.isZero()) {\n      return [];\n    }\n\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(\n      countRangeArray.map((i) => this.readOnlyContract.baseURIIndices(i)),\n    );\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenUris = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.readOnlyContract.tokenURI(i),\n      ),\n    );\n\n    const tokenMetadatas = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.getTokenMetadata(i.toString()),\n      ),\n    );\n\n    // index is the uri indicies, which is end token id. different from uris\n    const encryptedBaseUris = await Promise.all(\n      Array.from([...uriIndices]).map((i) =>\n        this.readOnlyContract.encryptedBaseURI(i),\n      ),\n    );\n\n    return tokenUris\n      .map((uri, index) => ({\n        batchId: BigNumber.from(index),\n        batchUri: uri,\n        placeholderMetadata: tokenMetadatas[index],\n      }))\n      .filter(\n        (_, index) => ethers.utils.hexDataLength(encryptedBaseUris[index]) > 0,\n      );\n  }\n\n  /**\n   * @internal\n   *\n   * @returns - True if the batch has been created, false otherwise.\n   */\n  public async canCreateBatch(): Promise<boolean> {\n    if (await this.isV0()) {\n      return this.v1Module.canCreateBatch();\n    }\n    return true;\n  }\n\n  /**\n   * Check if contract is v0 or not. If the contract doesn't have nextTokenIdToMint = v0 contract.\n   * @internal\n   */\n  private async isV0(): Promise<boolean> {\n    await this.checkVersion();\n    return this._isV0;\n  }\n\n  /**\n   * @internal\n   */\n  private async isNewClaim(): Promise<boolean> {\n    await this.checkVersion();\n    return this._version >= 1;\n  }\n\n  /**\n   * @internal\n   */\n  public async hasDelayedReveal(): Promise<boolean> {\n    await this.checkVersion();\n    return this._version >= 2;\n  }\n\n  /**\n   * @internal\n   */\n  private async checkVersion() {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.nextTokenIdToMint();\n        this._isV0 = false;\n      } catch (e) {\n        this._isV0 = true;\n      }\n\n      try {\n        this._version = (await this.readOnlyContract.VERSION()).toNumber();\n      } catch (e) {\n        this._version = 0;\n      }\n\n      this._shouldCheckVersion = false;\n    }\n  }\n\n  /**\n   * Fetches the proof for the current signer for a particular wallet.\n   *\n   * @param merkleRoot - The merkle root of the condition to check.\n   * @returns - The proof for the current signer for the specified condition.\n   */\n  private async getClaimerProofs(\n    merkleRoot: string,\n    addressToClaim?: string,\n  ): Promise<string[]> {\n    if (!addressToClaim) {\n      addressToClaim = await this.getSignerAddress();\n    }\n    const { metadata } = await this.getMetadata();\n    const snapshot = await this.sdk\n      .getStorage()\n      .get(metadata?.merkle[merkleRoot]);\n    const jsonConvert = new JsonConvert();\n    const snapshotData = jsonConvert.deserializeObject(\n      JSON.parse(snapshot),\n      Snapshot,\n    );\n    const item = snapshotData.claims.find(\n      (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n    );\n\n    if (item === undefined) {\n      return [];\n    }\n    return item.proof;\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n\n/**\n * @internal\n * @deprecated - Should use DropV2\n */\nclass DropV1Module extends ModuleWithRoles<Drop> implements ITransferable {\n  public static moduleType: ModuleType = ModuleType.DROP;\n  storage = this.sdk.getStorage();\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Drop {\n    return Drop__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DropModule.moduleType;\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.sdk.getStorage(),\n    );\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextTokenId()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId - start).keys()).map((i) =>\n        this.get((start + i).toString()),\n      ),\n    );\n  }\n\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = BigNumber.from(\n      Math.min(\n        (await this.readOnlyContract.nextTokenId()).toNumber(),\n        start + count,\n      ),\n    );\n    const unmintedId = await this.readOnlyContract.nextMintTokenId();\n    return (\n      await Promise.all(\n        Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map((i) =>\n          this.getTokenMetadata(unmintedId.add(i).toString()),\n        ),\n      )\n    ).map((metadata) => ({ owner: AddressZero, metadata }));\n  }\n\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextMintTokenId()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async ownerOf(tokenId: string): Promise<string> {\n    return await this.readOnlyContract.ownerOf(tokenId);\n  }\n\n  public async getOwned(_address?: string): Promise<NFTMetadataOwner[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  private async transformResultToClaimCondition(\n    pm: PublicMintConditionStruct,\n  ): Promise<ClaimCondition> {\n    const cv = await getCurrencyValue(\n      this.providerOrSigner,\n      pm.currency,\n      pm.pricePerToken,\n    );\n    return {\n      startTimestamp: new Date(\n        BigNumber.from(pm.startTimestamp).toNumber() * 1000,\n      ),\n      maxMintSupply: pm.maxMintSupply.toString(),\n      currentMintSupply: pm.currentMintSupply.toString(),\n      availableSupply: BigNumber.from(pm.maxMintSupply)\n        .sub(pm.currentMintSupply)\n        .toString(),\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n      waitTimeSecondsLimitPerTransaction:\n        pm.waitTimeSecondsLimitPerTransaction.toString(),\n      price: BigNumber.from(pm.pricePerToken),\n      pricePerToken: BigNumber.from(pm.pricePerToken),\n      currency: pm.currency,\n      currencyContract: pm.currency,\n      currencyMetadata: cv,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getActiveClaimCondition} instead\n   */\n  public async getActiveMintCondition(): Promise<PublicMintCondition> {\n    const index =\n      await this.readOnlyContract.getLastStartedMintConditionIndex();\n    return await this.readOnlyContract.mintConditions(index);\n  }\n\n  public async getActiveClaimCondition(): Promise<ClaimCondition> {\n    const index =\n      await this.readOnlyContract.getLastStartedMintConditionIndex();\n    const mc = await this.readOnlyContract.mintConditions(index);\n    return await this.transformResultToClaimCondition(mc);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getAllClaimConditions} instead\n   */\n  public async getAllMintConditions(): Promise<PublicMintCondition[]> {\n    const conditions = [];\n    for (let i = 0; ; i++) {\n      try {\n        conditions.push(await this.readOnlyContract.mintConditions(i));\n      } catch (e) {\n        break;\n      }\n    }\n    return conditions;\n  }\n\n  public async getAllClaimConditions(): Promise<ClaimCondition[]> {\n    const conditions = [];\n    for (let i = 0; ; i++) {\n      try {\n        const mc = await this.readOnlyContract.mintConditions(i);\n        conditions.push(await this.transformResultToClaimCondition(mc));\n      } catch (e) {\n        break;\n      }\n    }\n    return conditions;\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextTokenId();\n  }\n\n  public async maxTotalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.maxTotalSupply();\n  }\n\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    return (await this.readOnlyContract.nextTokenId()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextMintTokenId();\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\n   */\n  public async lazyMint(metadata: MetadataURIOrObject) {\n    await this.lazyMintBatch([metadata]);\n  }\n\n  public async pinToIpfs(files: Buffer[]): Promise<string> {\n    return await this.storage.uploadBatch(files, this.address);\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\n   */\n  public async lazyMintBatch(metadatas: MetadataURIOrObject[]) {\n    const { baseUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const uris = Array.from(Array(metadatas.length).keys()).map(\n      (i) => `${baseUri}${i}/`,\n    );\n    await this.sendTransaction(\"lazyMintBatch\", [uris]);\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\n   */\n  public async lazyMintAmount(amount: BigNumberish) {\n    await this.sendTransaction(\"lazyMintAmount\", [amount]);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\n   */\n  public async setMintConditions(factory: ClaimConditionFactory) {\n    return this.setClaimCondition(factory);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\n   */\n  public async setClaimConditions(factory: ClaimConditionFactory) {\n    return this.setClaimCondition(factory);\n  }\n\n  /**\n   * Sets public mint conditions for the next minting using the\n   * claim condition factory.\n   *\n   * @param factory - The claim condition factory.\n   */\n  public async setClaimCondition(factory: ClaimConditionFactory) {\n    const conditions = await factory.buildConditionsForDropV1();\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    if (factory.allSnapshots().length === 0 && \"merkle\" in metadata) {\n      metadata[\"merkle\"] = {};\n    } else {\n      metadata[\"merkle\"] = merkleInfo;\n    }\n\n    const metatdataUri = await this.storage.upload(JSON.stringify(metadata));\n\n    const encoded = [\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [\n        metatdataUri,\n      ]),\n      this.contract.interface.encodeFunctionData(\"setPublicMintConditions\", [\n        conditions,\n      ]),\n    ];\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Creates a claim condition factory\n   *\n   * @returns - A new claim condition factory\n   */\n  public getClaimConditionsFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.getClaimConditionsFactory} instead.\n   */\n  public getMintConditionsFactory(): ClaimConditionFactory {\n    return this.getClaimConditionsFactory();\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.setClaimConditions} instead.\n   */\n  public async setPublicMintConditions(\n    conditions: CreatePublicMintCondition[],\n  ) {\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: c.startTimestampInSeconds || 0,\n      maxMintSupply: c.maxMintSupply,\n      currentMintSupply: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxMintSupply,\n      waitTimeSecondsLimitPerTransaction:\n        c.waitTimeSecondsLimitPerTransaction || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setPublicMintConditions\", [_conditions]);\n  }\n\n  public async canClaim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<boolean> {\n    try {\n      const mintCondition = await this.getActiveClaimCondition();\n      const overrides = (await this.getCallOverrides()) || {};\n\n      const owner = await this.getSignerAddress();\n      if (mintCondition.merkleRoot) {\n        proofs = await this.getClaimerProofs(\n          mintCondition?.merkleRoot as string,\n          owner,\n        );\n      }\n\n      if (mintCondition.pricePerToken.gt(0)) {\n        if (mintCondition.currency === AddressZero) {\n          overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n            quantity,\n          );\n        } else {\n          const erc20 = ERC20__factory.connect(\n            mintCondition.currency,\n            this.providerOrSigner,\n          );\n          const spender = this.address;\n          const allowance = await erc20.allowance(owner, spender);\n          const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n            BigNumber.from(quantity),\n          );\n\n          if (allowance.lt(totalPrice)) {\n            // TODO throw allowance error, maybe check balance?\n          }\n        }\n      }\n      await this.contract.callStatic.claim(quantity, proofs, overrides);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * Fetches the proof for the current signer for a particular wallet.\n   *\n   * @param merkleRoot - The merkle root of the condition to check.\n   * @returns - The proof for the current signer for the specified condition.\n   */\n  private async getClaimerProofs(\n    merkleRoot: string,\n    addressToClaim?: string,\n  ): Promise<string[]> {\n    if (!addressToClaim) {\n      addressToClaim = await this.getSignerAddress();\n    }\n    const { metadata } = await this.getMetadata();\n    const snapshot = await this.storage.get(metadata?.merkle[merkleRoot]);\n    const jsonConvert = new JsonConvert();\n    const snapshotData = jsonConvert.deserializeObject(\n      JSON.parse(snapshot),\n      Snapshot,\n    );\n    const item = snapshotData.claims.find(\n      (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n    );\n    if (item === undefined) {\n      return [];\n    }\n    return item.proof;\n  }\n\n  public async claim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<NFTMetadataOwner[]> {\n    const mintCondition = await this.getActiveClaimCondition();\n    const { metadata } = await this.getMetadata();\n\n    const addressToClaim = await this.getSignerAddress();\n\n    if (!mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n      const snapshot = await this.storage.get(\n        metadata?.merkle[mintCondition.merkleRoot.toString()],\n      );\n      const jsonConvert = new JsonConvert();\n      const snapshotData = jsonConvert.deserializeObject(\n        JSON.parse(snapshot),\n        Snapshot,\n      );\n      const item = snapshotData.claims.find(\n        (c) => c.address.toLowerCase() === addressToClaim.toLowerCase(),\n      );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n    }\n\n    const overrides = (await this.getCallOverrides()) || {};\n    if (mintCondition.pricePerToken.gt(0)) {\n      if (mintCondition.currency === AddressZero) {\n        overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n          quantity,\n        );\n      } else {\n        const erc20 = ERC20__factory.connect(\n          mintCondition.currency,\n          this.providerOrSigner,\n        );\n        const owner = await this.getSignerAddress();\n        const spender = this.address;\n        const allowance = await erc20.allowance(owner, spender);\n        const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n          BigNumber.from(quantity),\n        );\n\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n    }\n\n    const receipt = await this.sendTransaction(\n      \"claim\",\n      [quantity, proofs],\n      overrides,\n    );\n    const event = this.parseEventLogs(\"Claimed\", receipt?.logs);\n    const startingIndex: BigNumber = event.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const tokenIds = [];\n    for (let i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n      tokenIds.push(BigNumber.from(i.toString()));\n    }\n    return await Promise.all(\n      tokenIds.map(async (t) => await this.get(t.toString())),\n    );\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.storage.uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata();\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.storage.uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setBaseTokenUri(uri: string): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setBaseTokenURI\", [uri]);\n  }\n\n  public async setMaxTotalSupply(\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMaxTotalSupply\", [amount]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  /**\n   * Create batch allows you to create a batch of tokens\n   * in one transaction. This function can only be called\n   * once per module at the moment.\n   *\n   * @beta\n   *\n   * @param metadatas - The metadata to include in the batch.\n   */\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    if (!(await this.canCreateBatch())) {\n      throw new Error(\"Batch already created!\");\n    }\n\n    const startFileNumber = await this.readOnlyContract.nextMintTokenId();\n    const { baseUri } = await this.storage.uploadMetadataBatch(\n      metadatas,\n      this.address,\n      startFileNumber.toNumber(),\n    );\n    const encoded = [\n      this.contract.interface.encodeFunctionData(\"setBaseTokenURI\", [baseUri]),\n      this.contract.interface.encodeFunctionData(\"lazyMintAmount\", [\n        metadatas.length,\n      ]),\n    ];\n    await this.sendTransaction(\"multicall\", [encoded]);\n    return [];\n  }\n\n  /**\n   * @internal\n   *\n   * @returns - True if the batch has been created, false otherwise.\n   */\n  public async canCreateBatch(): Promise<boolean> {\n    return (await this.readOnlyContract.nextTokenId()).eq(0);\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n// This is a deprecated class, DropV1, see above\n","import {\n  ERC1155__factory,\n  ERC165__factory,\n  ERC20__factory,\n  ERC721__factory,\n  Market,\n  Market__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport {\n  ModuleType,\n  QuantityAboveLimitError,\n  MissingOwnerRoleError,\n  Role,\n  RolesMap,\n  MissingRoleError,\n} from \"../common\";\nimport { InterfaceId_IERC721 } from \"../common/contract\";\nimport { CurrencyValue, getCurrencyValue } from \"../common/currency\";\nimport { invariant } from \"../common/invariant\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * Filter options for the Market module.\n * @public\n */\nexport interface ListingFilter {\n  seller?: string;\n  tokenContract?: string;\n  tokenId?: string;\n}\n\n/**\n * Metadata for items listed on a Market module.\n * @public\n */\nexport interface ListingMetadata {\n  id: string;\n  seller: string;\n  tokenContract: string;\n  tokenId: string;\n  tokenMetadata?: NFTMetadata;\n  quantity: BigNumber;\n  tokensPerBuyer: BigNumber;\n  currencyContract: string;\n  currencyMetadata: CurrencyValue | null;\n  price: BigNumber;\n  saleStart: Date | null;\n  saleEnd: Date | null;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getMarketModule}\n * @public\n *\n * @deprecated\n */\nexport class MarketModule extends ModuleWithRoles<Market> {\n  public static moduleType: ModuleType = ModuleType.MARKET;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.lister,\n    RolesMap.pauser,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return MarketModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Market {\n    return Market__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return MarketModule.moduleType;\n  }\n\n  private async transformResultToListing(\n    listing: any,\n  ): Promise<ListingMetadata> {\n    let currency: CurrencyValue | null = null;\n\n    try {\n      currency = await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.pricePerToken,\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    let metadata: NFTMetadata | undefined = undefined;\n    try {\n      metadata = await getMetadataWithoutContract(\n        this.providerOrSigner,\n        listing.assetContract,\n        listing.tokenId.toString(),\n        this.sdk.getStorage(),\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    return {\n      id: listing.listingId.toString(),\n      seller: listing.seller,\n      tokenId: listing.tokenId.toString(),\n      tokenContract: listing.assetContract,\n      tokenMetadata: metadata,\n      quantity: listing.quantity,\n      price: listing.pricePerToken,\n      currencyContract: listing.currency,\n      tokensPerBuyer: listing.tokensPerBuyer,\n      currencyMetadata: currency,\n      saleStart: listing.saleStart.gt(0)\n        ? new Date(listing.saleStart.toNumber() * 1000)\n        : null,\n      saleEnd:\n        listing.saleEnd.gt(0) &&\n        listing.saleEnd.lte(Number.MAX_SAFE_INTEGER - 1)\n          ? new Date(listing.saleEnd.toNumber() * 1000)\n          : null,\n    };\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.get} instead.\n   */\n  public async getListing(listingId: string): Promise<ListingMetadata> {\n    return await this.get(listingId);\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.getAll} instead.\n   */\n  public async getAllListings(\n    filter?: ListingFilter,\n  ): Promise<ListingMetadata[]> {\n    return await this.getAll(filter);\n  }\n\n  public async get(listingId: string): Promise<ListingMetadata> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    return await this.transformResultToListing(listing);\n  }\n\n  public async getAll(filter?: ListingFilter): Promise<ListingMetadata[]> {\n    let listings: any[] = [];\n\n    if (!filter) {\n      listings = listings.concat(await this.readOnlyContract.getAllListings());\n    } else {\n      if (filter.tokenContract && filter.tokenId) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAsset(\n            filter.tokenContract,\n            filter.tokenId,\n          ),\n        );\n      } else if (filter.seller) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsBySeller(filter.seller),\n        );\n      } else if (filter.tokenContract) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAssetContract(\n            filter.tokenContract,\n          ),\n        );\n      } else {\n        listings = listings.concat(\n          await this.readOnlyContract.getAllListings(),\n        );\n      }\n    }\n\n    listings = listings\n      .filter((l) => {\n        if (l.quantity.eq(0)) {\n          return false;\n        }\n        if (filter) {\n          const filterSeller = filter?.seller || \"\";\n          const filterTokenContract = filter?.tokenContract || \"\";\n          const filterTokenId = filter?.tokenId || \"\";\n\n          if (\n            filterSeller &&\n            filterSeller.toLowerCase() !== l.seller.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenContract &&\n            filterTokenContract.toLowerCase() !== l.assetContract.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenId &&\n            filterTokenId.toLowerCase() !== l.tokenId.toString().toLowerCase()\n          ) {\n            return false;\n          }\n        }\n        return true;\n      })\n      .map((l) => this.transformResultToListing(l));\n    return await Promise.all(listings);\n  }\n\n  public async getMarketFeeBps(): Promise<BigNumber> {\n    return await this.readOnlyContract.marketFeeBps();\n  }\n\n  // write functions\n  public async list(\n    assetContract: string,\n    tokenId: string,\n    currencyContract: string,\n    price: BigNumberish,\n    quantity: BigNumberish,\n    tokensPerBuyer: BigNumberish = 0,\n    secondsUntilStart: BigNumberish = 0,\n    secondsUntilEnd: BigNumberish = 0,\n  ): Promise<ListingMetadata> {\n    try {\n      const from = await this.getSignerAddress();\n      const erc165 = ERC165__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n      invariant(quantity > 0, \"quantity must be greater than 0\");\n      // check for token approval\n      const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n      if (isERC721) {\n        const asset = ERC721__factory.connect(\n          assetContract,\n          this.providerOrSigner,\n        );\n\n        const approved = await asset.isApprovedForAll(from, this.address);\n        if (!approved) {\n          const isTokenApproved =\n            (await asset.getApproved(tokenId)).toLowerCase() ===\n            this.address.toLowerCase();\n\n          if (!isTokenApproved) {\n            await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n              this.address,\n              true,\n            ]);\n          }\n        }\n      } else {\n        const asset = ERC1155__factory.connect(\n          assetContract,\n          this.providerOrSigner,\n        );\n\n        const approved = await asset.isApprovedForAll(from, this.address);\n        if (!approved) {\n          await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n            this.address,\n            true,\n          ]);\n        }\n      }\n\n      const receipt = await this.sendTransaction(\"list\", [\n        assetContract,\n        tokenId,\n        currencyContract,\n        price,\n        quantity,\n        tokensPerBuyer,\n        secondsUntilStart,\n        secondsUntilEnd,\n      ]);\n      const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n      const listing = event?.listing;\n      return await this.transformResultToListing(listing);\n    } catch (e) {\n      const signer = await this.getSignerAddress();\n      if (\n        (await this.sdk.getNFTModule(assetContract).ownerOf(tokenId)) !== signer\n      ) {\n        throw new MissingOwnerRoleError();\n      } else if (\n        (await this.readOnlyContract.restrictedListerRoleOnly()) &&\n        !(signer in (await this.getRoleMembers(\"lister\"))) &&\n        !(signer in (await this.getRoleMembers(\"admin\")))\n      ) {\n        throw new MissingRoleError(signer, \"lister\");\n      }\n      throw e;\n    }\n  }\n\n  public async unlistAll(listingId: string) {\n    const maxQuantity = (await this.get(listingId)).quantity;\n    await this.unlist(listingId, maxQuantity);\n  }\n\n  public async unlist(listingId: string, quantity: BigNumberish) {\n    await this.sendTransaction(\"unlist\", [listingId, quantity]);\n  }\n\n  public async setRestrictedListerRoleOnly(restricted: boolean) {\n    await this.sendTransaction(\"setRestrictedListerRoleOnly\", [restricted]);\n  }\n\n  public async buy(\n    listingId: string,\n    quantity: BigNumberish,\n  ): Promise<ListingMetadata> {\n    try {\n      const listing = await this.get(listingId);\n      const owner = await this.getSignerAddress();\n      const spender = this.address;\n      const totalPrice = listing.price.mul(BigNumber.from(quantity));\n      if (\n        listing.currencyContract &&\n        listing.currencyContract !== AddressZero\n      ) {\n        const erc20 = ERC20__factory.connect(\n          listing.currencyContract,\n          this.providerOrSigner,\n        );\n        const allowance = await erc20.allowance(owner, spender);\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n\n      const receipt = await this.sendTransaction(\"buy\", [listingId, quantity]);\n      const event = this.parseEventLogs(\"NewSale\", receipt?.logs);\n      return await this.transformResultToListing(event?.listing);\n    } catch (e) {\n      const tokensPerBuyer = (\n        await this.get(listingId)\n      ).tokensPerBuyer.toNumber();\n      if (quantity > tokensPerBuyer) {\n        throw new QuantityAboveLimitError(tokensPerBuyer.toString());\n      }\n      throw e;\n    }\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setMarketFeeBps(fee: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMarketFeeBps\", [fee]);\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC165__factory,\n  ERC20__factory,\n  ERC721__factory,\n  Marketplace,\n  Marketplace__factory,\n} from \"@3rdweb/contracts\";\nimport {\n  ListingParametersStruct,\n  ListingStruct,\n} from \"@3rdweb/contracts/dist/IMarketplace\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport {\n  getCurrencyValue,\n  getRoleHash,\n  getTokenMetadataUsingStorage,\n  InterfaceId_IERC721,\n  ModuleType,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { isNativeToken } from \"../common/currency\";\nimport {\n  AuctionAlreadyStartedError,\n  AuctionHasNotEndedError,\n  ListingNotFoundError,\n  WrongListingTypeError,\n} from \"../common/error\";\nimport { invariant } from \"../common/invariant\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { ListingType } from \"../enums/marketplace/ListingType\";\nimport { IMarketplace } from \"../interfaces/modules\";\nimport {\n  AuctionListing,\n  NewAuctionListing,\n  NewDirectListing,\n  Offer,\n} from \"../types\";\nimport { DirectListing } from \"../types/marketplace/DirectListing\";\n\nexport interface MarketplaceFilter {\n  seller?: string;\n  tokenContract?: string;\n  tokenId?: number;\n  start?: number;\n  count?: number;\n}\n\nconst MAX_BPS = 10000;\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getMarketplaceModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class MarketplaceModule\n  extends ModuleWithRoles<Marketplace>\n  implements IMarketplace\n{\n  private _shouldCheckVersion = true;\n  private _isNewBuy = false;\n  public static moduleType: ModuleType = ModuleType.MARKETPLACE;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.lister,\n    RolesMap.asset,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return MarketplaceModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Marketplace {\n    return Marketplace__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return MarketplaceModule.moduleType;\n  }\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // in how many seconds with the listing open up\n   *   startTimeInSeconds: 0,\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1\",\n   * }\n   *\n   * await module.createDirectListing(listing);\n   * ```\n   */\n  public async createDirectListing(\n    listing: NewDirectListing,\n  ): Promise<BigNumber> {\n    this.validateNewListingParam(listing);\n\n    await this.handleTokenApproval(\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.getSignerAddress(),\n    );\n\n    const receipt = await this.sendTransaction(\"createListing\", [\n      {\n        assetContract: listing.assetContractAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: listing.buyoutPricePerToken,\n        currencyToAccept: listing.currencyContractAddress,\n        listingType: ListingType.Direct,\n        quantityToList: listing.quantity,\n        reservePricePerToken: listing.buyoutPricePerToken,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: listing.startTimeInSeconds,\n      } as ListingParametersStruct,\n    ]);\n\n    const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n    return event.listingId;\n  }\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // in how many seconds with the listing open up\n   *   startTimeInSeconds: 0,\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1\",\n   * }\n   *\n   * await module.createAuctionListing(auction);\n   * ```\n   */\n  public async createAuctionListing(\n    listing: NewAuctionListing,\n  ): Promise<BigNumber> {\n    this.validateNewListingParam(listing);\n\n    await this.handleTokenApproval(\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.getSignerAddress(),\n    );\n\n    const receipt = await this.sendTransaction(\"createListing\", [\n      {\n        assetContract: listing.assetContractAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: listing.buyoutPricePerToken,\n        currencyToAccept: listing.currencyContractAddress,\n        listingType: ListingType.Auction,\n        quantityToList: listing.quantity,\n        reservePricePerToken: listing.reservePricePerToken,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: listing.startTimeInSeconds,\n      } as ListingParametersStruct,\n    ]);\n\n    const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n    return event.listingId;\n  }\n\n  public async makeDirectListingOffer(offer: {\n    listingId: BigNumberish;\n    quantityDesired: BigNumberish;\n    currencyContractAddress: string;\n    pricePerToken: BigNumberish;\n  }): Promise<void> {\n    if (isNativeToken(offer.currencyContractAddress)) {\n      throw new Error(\n        \"You must use the wrapped native token address when making an offer with a native token\",\n      );\n    }\n\n    try {\n      await this.getDirectListing(offer.listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${offer.listingId}`);\n    }\n\n    const quantity = BigNumber.from(offer.quantityDesired);\n    const value = BigNumber.from(offer.pricePerToken).mul(quantity);\n    const overrides = (await this.getCallOverrides()) || {};\n    await this.setAllowance(value, offer.currencyContractAddress, overrides);\n\n    await this.sendTransaction(\n      \"offer\",\n      [\n        offer.listingId,\n        offer.quantityDesired,\n        offer.currencyContractAddress,\n        offer.pricePerToken,\n      ],\n      overrides,\n    );\n  }\n\n  private async setAllowance(\n    value: BigNumber,\n    currencyAddress: string,\n    overrides: any,\n  ): Promise<any> {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = value;\n    } else {\n      const erc20 = ERC20__factory.connect(\n        currencyAddress,\n        this.providerOrSigner,\n      );\n      const owner = await this.getSignerAddress();\n      const spender = this.address;\n      const allowance = await erc20.allowance(owner, spender);\n\n      if (allowance.lt(value)) {\n        await this.sendContractTransaction(erc20, \"increaseAllowance\", [\n          spender,\n          value.sub(allowance),\n        ]);\n      }\n    }\n    return overrides;\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listings\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await module.makeAuctionListingBid({ listingId, pricePerToken });\n   * ```\n   */\n  public async makeAuctionListingBid(bid: {\n    listingId: BigNumberish;\n    pricePerToken: BigNumberish;\n  }): Promise<void> {\n    const listing = await this.validateAuctionListing(\n      BigNumber.from(bid.listingId),\n    );\n\n    const bidBuffer = await this.getBidBufferBps();\n    const winningBid = await this.getWinningBid(bid.listingId);\n    if (winningBid) {\n      const isWinningBid = await this.isWinningBid(\n        winningBid.pricePerToken,\n        bid.pricePerToken,\n        bidBuffer,\n      );\n\n      invariant(\n        isWinningBid,\n        \"Bid price is too low based on the current winning bid and the bid buffer\",\n      );\n    } else {\n      const pricePerToken = BigNumber.from(bid.pricePerToken);\n      const reservePrice = BigNumber.from(listing.reservePrice);\n      invariant(\n        pricePerToken.gte(reservePrice),\n        \"Bid price is too low based on reserve price\",\n      );\n    }\n\n    const quantity = BigNumber.from(listing.quantity);\n    const value = BigNumber.from(bid.pricePerToken).mul(quantity);\n\n    const overrides = (await this.getCallOverrides()) || {};\n    await this.setAllowance(value, listing.currencyContractAddress, overrides);\n\n    await this.sendTransaction(\n      \"offer\",\n      [\n        bid.listingId,\n        listing.quantity,\n        listing.currencyContractAddress,\n        bid.pricePerToken,\n      ],\n      overrides,\n    );\n  }\n\n  public async isWinningBid(\n    winningPrice: BigNumberish,\n    newBidPrice: BigNumberish,\n    bidBuffer: BigNumberish,\n  ): Promise<boolean> {\n    bidBuffer = BigNumber.from(bidBuffer);\n    winningPrice = BigNumber.from(winningPrice);\n    newBidPrice = BigNumber.from(newBidPrice);\n    const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n    return buffer.gte(bidBuffer);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * module\n   *   .getAuctionWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getAuctionWinner(listingId: BigNumberish): Promise<string> {\n    const closedAuctions = await this.readOnlyContract.queryFilter(\n      this.contract.filters.AuctionClosed(),\n    );\n\n    const auction = closedAuctions.find((a) =>\n      a.args.listingId.eq(BigNumber.from(listingId)),\n    );\n\n    if (!auction) {\n      throw new Error(\n        `Could not find auction with listingId ${listingId} in closed auctions`,\n      );\n    }\n\n    return auction.args.winningBidder;\n  }\n\n  public async getDirectListing(\n    listingId: BigNumberish,\n  ): Promise<DirectListing> {\n    const listing = await this.readOnlyContract.listings(listingId);\n\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.address, listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(\n        this.address,\n        listingId.toString(),\n        \"Auction\",\n        \"Direct\",\n      );\n    }\n\n    return await this.mapDirectListing(listing);\n  }\n\n  public async getAuctionListing(\n    listingId: BigNumberish,\n  ): Promise<AuctionListing> {\n    const listing = await this.readOnlyContract.listings(listingId);\n\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.address, listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(\n        this.address,\n        listingId.toString(),\n        \"Direct\",\n        \"Auction\",\n      );\n    }\n    return await this.mapAuctionListing(listing);\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  private async mapDirectListing(\n    listing: ListingStruct,\n  ): Promise<DirectListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: listing.buyoutPricePerToken,\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      // TODO: fetch the asset\n      asset: await getTokenMetadataUsingStorage(\n        listing.assetContract,\n        this.providerOrSigner,\n        listing.tokenId.toString(),\n        this.sdk.getStorage(),\n      ),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct,\n    };\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  private async mapAuctionListing(\n    listing: ListingStruct,\n  ): Promise<AuctionListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: listing.buyoutPricePerToken,\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await getTokenMetadataUsingStorage(\n        listing.assetContract,\n        this.providerOrSigner,\n        listing.tokenId.toString(),\n        this.sdk.getStorage(),\n      ),\n      reservePriceCurrencyValuePerToken: await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.reservePricePerToken,\n      ),\n      reservePrice: listing.reservePricePerToken,\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction,\n    };\n  }\n\n  private async handleTokenApproval(\n    assetContract: string,\n    tokenId: BigNumberish,\n    from: string,\n  ): Promise<void> {\n    const erc165 = ERC165__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n\n    // check for token approval\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    if (isERC721) {\n      const asset = ERC721__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        const isTokenApproved =\n          (await asset.getApproved(tokenId)).toLowerCase() ===\n          this.address.toLowerCase();\n\n        if (!isTokenApproved) {\n          await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n            this.address,\n            true,\n          ]);\n        }\n      }\n    } else {\n      const asset = ERC1155__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n          this.address,\n          true,\n        ]);\n      }\n    }\n  }\n\n  /**\n   * This method checks if the given token is approved for the marketplace module.\n   * This is particularly useful for direct listings where the token\n   * being listed may be moved before the listing is actually closed.\n   *\n   * TODO: Ask Jake/Krishang: do we need to also check the owners balance of the token,\n   * based on the listing quantity? I.e. query the balance of the tokenId, and check if\n   * the seller holds enough of the token\n   *\n   * @internal\n   * @param assetContract - The address of the asset contract.\n   * @param tokenId - The token id of the token.\n   * @param from - The address of the account that owns the token.\n   * @returns - True if the marketplace is approved on the token, false otherwise.\n   */\n  private async isTokenApprovedForMarketplace(\n    assetContract: string,\n    tokenId: BigNumberish,\n    from: string,\n  ): Promise<boolean> {\n    try {\n      const erc165 = ERC165__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      // check for token approval\n      const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n      if (isERC721) {\n        const asset = ERC721__factory.connect(\n          assetContract,\n          this.providerOrSigner,\n        );\n\n        const approved = await asset.isApprovedForAll(from, this.address);\n        if (approved) {\n          return true;\n        }\n\n        return (\n          (await asset.getApproved(tokenId)).toLowerCase() ===\n          this.address.toLowerCase()\n        );\n      } else {\n        const asset = ERC1155__factory.connect(\n          assetContract,\n          this.providerOrSigner,\n        );\n\n        return await asset.isApprovedForAll(from, this.address);\n      }\n    } catch (err: any) {\n      console.error(\"Failed to check if token is approved\", err);\n      return false;\n    }\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  private async isStillValidDirectListing(\n    listing: DirectListing,\n    quantity?: BigNumberish,\n  ): Promise<boolean> {\n    const approved = await this.isTokenApprovedForMarketplace(\n      listing.assetContractAddress,\n      listing.tokenId,\n      listing.sellerAddress,\n    );\n\n    if (!approved) {\n      return false;\n    }\n\n    const erc165 = ERC165__factory.connect(\n      listing.assetContractAddress,\n      this.providerOrSigner,\n    );\n\n    // check for token approval\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    if (isERC721) {\n      const asset = ERC721__factory.connect(\n        listing.assetContractAddress,\n        this.providerOrSigner,\n      );\n      // burned token would fail on ownerOf cuz invalid token\n      const tokenOwnerAddress = await asset\n        .ownerOf(listing.tokenId)\n        .catch(() => AddressZero);\n      return (\n        tokenOwnerAddress.toLowerCase() === listing.sellerAddress.toLowerCase()\n      );\n    } else {\n      const asset = ERC1155__factory.connect(\n        listing.assetContractAddress,\n        this.providerOrSigner,\n      );\n      const balance = await asset.balanceOf(\n        listing.sellerAddress,\n        listing.tokenId,\n      );\n      return balance.gte(quantity || listing.quantity);\n    }\n  }\n\n  // TODO: Complete method implementation with subgraph\n  // /**\n  //  * @beta - This method is not yet complete.\n  //  *\n  //  * @param listingId\n  //  * @returns\n  //  */\n  // public async getActiveOffers(listingId: BigNumberish): Promise<Offer[]> {\n  //   const listing = await this.validateDirectListing(BigNumber.from(listingId));\n\n  //   const offers = await this.readOnlyContract.offers(listing.id, \"\");\n\n  //   return await Promise.all(\n  //     offers.map(async (offer: any) => {\n  //       return await this.mapOffer(BigNumber.from(listingId), offer);\n  //     }),\n  //   );\n  // }\n\n  /**\n   * Used to verify fields in new listing.\n   * @internal\n   */\n  private validateNewListingParam(param: NewDirectListing | NewAuctionListing) {\n    invariant(\n      param.assetContractAddress !== undefined &&\n        param.assetContractAddress !== null,\n      \"Asset contract address is required\",\n    );\n    invariant(\n      param.buyoutPricePerToken !== undefined &&\n        param.buyoutPricePerToken !== null,\n      \"Buyout price is required\",\n    );\n    invariant(\n      param.listingDurationInSeconds !== undefined &&\n        param.listingDurationInSeconds !== null,\n      \"Listing duration is required\",\n    );\n    invariant(\n      param.startTimeInSeconds !== undefined &&\n        param.startTimeInSeconds !== null,\n      \"Start time is required\",\n    );\n    invariant(\n      param.tokenId !== undefined && param.tokenId !== null,\n      \"Token ID is required\",\n    );\n    invariant(\n      param.quantity !== undefined && param.quantity !== null,\n      \"Quantity is required\",\n    );\n\n    switch (param.type) {\n      case \"NewAuctionListing\": {\n        invariant(\n          param.reservePricePerToken !== undefined &&\n            param.reservePricePerToken !== null,\n          \"Reserve price is required\",\n        );\n      }\n    }\n  }\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateDirectListing(\n    listingId: BigNumber,\n  ): Promise<DirectListing> {\n    try {\n      return await this.getDirectListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateAuctionListing(\n    listingId: BigNumber,\n  ): Promise<AuctionListing> {\n    try {\n      return await this.getAuctionListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Maps a contract offer to the strict interface\n   *\n   * @internal\n   * @param offer\n   * @returns - An `Offer` object\n   */\n  private async mapOffer(listingId: BigNumber, offer: any): Promise<Offer> {\n    return {\n      quantity: offer.quantityDesired,\n      pricePerToken: offer.pricePerToken,\n      currencyContractAddress: offer.currency,\n      buyerAddress: offer.offeror,\n      quantityDesired: offer.quantityWanted,\n      currencyValue: await getCurrencyValue(\n        this.providerOrSigner,\n        offer.currency,\n        (offer.quantityWanted as BigNumber).mul(\n          offer.pricePerToken as BigNumber,\n        ),\n      ),\n      listingId,\n    } as Offer;\n  }\n\n  public async getActiveOffer(\n    listingId: BigNumberish,\n    address: string,\n  ): Promise<Offer | undefined> {\n    this.validateDirectListing(BigNumber.from(listingId));\n    invariant(isAddress(address), \"Address must be a valid address\");\n    const offers = await this.readOnlyContract.offers(listingId, address);\n    if (offers.offeror === AddressZero) {\n      return undefined;\n    }\n    return await this.mapOffer(BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * module\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getWinningBid(\n    listingId: BigNumberish,\n  ): Promise<Offer | undefined> {\n    this.validateAuctionListing(BigNumber.from(listingId));\n    const offers = await this.readOnlyContract.winningBid(listingId);\n    if (offers.offeror === AddressZero) {\n      return undefined;\n    }\n    return await this.mapOffer(BigNumber.from(listingId), offers);\n  }\n\n  public async getBidBufferBps(): Promise<BigNumber> {\n    return this.readOnlyContract.bidBufferBps();\n  }\n\n  public async getTimeBufferInSeconds(): Promise<BigNumber> {\n    return await this.readOnlyContract.timeBuffer();\n  }\n\n  public async acceptDirectListingOffer(\n    listingId: BigNumberish,\n    addressOfOfferor: string,\n  ): Promise<void> {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too lower.\n     */\n\n    this.validateDirectListing(BigNumber.from(listingId));\n    await this.sendTransaction(\"acceptOffer\", [listingId, addressOfOfferor]);\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await module.buyoutAuctionListing(listingId);\n   * ```\n   */\n  public async buyoutAuctionListing(listingId: BigNumberish): Promise<void> {\n    const listing = await this.validateAuctionListing(\n      BigNumber.from(listingId),\n    );\n\n    await this.makeAuctionListingBid({\n      listingId,\n      pricePerToken: listing.buyoutPrice,\n    });\n  }\n\n  /**\n   * Buy Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await module.buyoutDirectListing({ listingId, quantityDesired });\n   * ```\n   */\n  public async buyoutDirectListing(_buyout: {\n    listingId: BigNumberish;\n    quantityDesired: BigNumberish;\n  }): Promise<void> {\n    const listing = await this.validateDirectListing(\n      BigNumber.from(_buyout.listingId),\n    );\n\n    const valid = await this.isStillValidDirectListing(\n      listing,\n      _buyout.quantityDesired,\n    );\n\n    if (!valid) {\n      throw new Error(\n        \"The asset on this listing has been moved from the listers wallet, this listing is now invalid\",\n      );\n    }\n\n    const quantity = BigNumber.from(_buyout.quantityDesired);\n    const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.getCallOverrides()) || {};\n    await this.setAllowance(value, listing.currencyContractAddress, overrides);\n\n    if (await this.isNewBuy()) {\n      await this.sendTransaction(\n        \"buy\",\n        [_buyout.listingId, quantity, listing.currencyContractAddress, value],\n        overrides,\n      );\n    } else {\n      // backward compatibility with old abi ftw\n      await this.sendContractTransaction(\n        new ethers.Contract(\n          this.address,\n          [\n            {\n              inputs: [\n                {\n                  internalType: \"uint256\",\n                  name: \"_listingId\",\n                  type: \"uint256\",\n                },\n                {\n                  internalType: \"uint256\",\n                  name: \"_quantityToBuy\",\n                  type: \"uint256\",\n                },\n              ],\n              name: \"buy\",\n              outputs: [],\n              stateMutability: \"payable\",\n              type: \"function\",\n            },\n          ],\n          this.providerOrSigner,\n        ),\n        \"buy\",\n        [_buyout.listingId, quantity],\n        overrides,\n      );\n    }\n  }\n\n  // TODO: Complete method implementation with subgraph\n  // /**\n  //  *\n  //  * @beta - This method is not yet ready for production use\n  //  *\n  //  * @param _listingId - The listing ID to get active bids for\n  //  */\n  // public async getActiveBids(_listingId: BigNumberish): Promise<Offer[]> {\n  //   throw new Error(\"Method not implemented.\");\n  // }\n\n  public async updateDirectListing(listing: DirectListing): Promise<void> {\n    await this.sendTransaction(\"updateListing\", [\n      listing.id,\n      listing.quantity,\n      // eslint-disable-next-line line-comment-position\n      listing.buyoutPrice, // reserve price, doesn't matter for direct listing\n      listing.buyoutPrice,\n      listing.currencyContractAddress,\n      listing.startTimeInSeconds,\n      listing.secondsUntilEnd,\n    ]);\n  }\n\n  public async updateAuctionListing(listing: AuctionListing): Promise<void> {\n    await this.sendTransaction(\"updateListing\", [\n      listing.id,\n      listing.quantity,\n      listing.reservePrice,\n      listing.buyoutPrice,\n      listing.currencyContractAddress,\n      listing.startTimeInEpochSeconds,\n      listing.endTimeInEpochSeconds,\n    ]);\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\"\n   *\n   * await module.cancelDirectListing(listingId);\n   * ```\n   */\n  public async cancelDirectListing(listingId: BigNumberish): Promise<void> {\n    const listing = await this.validateDirectListing(BigNumber.from(listingId));\n    listing.quantity = 0;\n    await this.updateDirectListing(listing);\n  }\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\"\n   *\n   * await module.cancelAuctionListing(listingId);\n   * ```\n   */\n  public async cancelAuctionListing(listingId: BigNumberish): Promise<void> {\n    const listing = await this.validateAuctionListing(\n      BigNumber.from(listingId),\n    );\n\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n\n    const offers = await this.readOnlyContract.winningBid(listingId);\n    if (now.gt(startTime) && offers.offeror !== AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n\n    await this.sendTransaction(\"closeAuction\", [\n      BigNumber.from(listingId),\n      await this.getSignerAddress(),\n    ]);\n  }\n\n  public async closeAuctionListing(\n    listingId: BigNumberish,\n    closeFor?: string,\n  ): Promise<void> {\n    if (!closeFor) {\n      closeFor = await this.getSignerAddress();\n    }\n\n    const listing = await this.validateAuctionListing(\n      BigNumber.from(listingId),\n    );\n\n    try {\n      await this.sendTransaction(\"closeAuction\", [\n        BigNumber.from(listingId),\n        closeFor,\n      ]);\n    } catch (err: any) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(\n          listingId.toString(),\n          listing.endTimeInEpochSeconds.toString(),\n        );\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  public async setBidBufferBps(buffer: BigNumberish): Promise<void> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n\n    const timeBuffer = await this.getTimeBufferInSeconds();\n    await this.sendTransaction(\"setAuctionBuffers\", [\n      timeBuffer,\n      BigNumber.from(buffer),\n    ]);\n  }\n\n  public async setTimeBufferInSeconds(buffer: BigNumberish): Promise<void> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n\n    const bidBuffer = await this.getBidBufferBps();\n    await this.sendTransaction(\"setAuctionBuffers\", [\n      BigNumber.from(buffer),\n      bidBuffer,\n    ]);\n  }\n\n  public async buyoutListing(\n    listingId: BigNumberish,\n    quantityDesired?: BigNumberish,\n  ): Promise<void> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.address, listingId.toString());\n    }\n\n    switch (listing.listingType) {\n      case ListingType.Direct: {\n        invariant(\n          quantityDesired !== undefined,\n          \"quantityDesired is required when buying out a direct listing\",\n        );\n        return await this.buyoutDirectListing({ listingId, quantityDesired });\n      }\n      case ListingType.Auction: {\n        return await this.buyoutAuctionListing(listingId);\n      }\n    }\n  }\n\n  public async getListing(\n    listingId: BigNumberish,\n  ): Promise<AuctionListing | DirectListing> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.address, listingId.toString());\n    }\n\n    switch (listing.listingType) {\n      case ListingType.Auction: {\n        return await this.mapAuctionListing(listing);\n      }\n      case ListingType.Direct: {\n        return await this.mapDirectListing(listing);\n      }\n      default: {\n        throw new Error(`Unknown listing type: ${listing.listingType}`);\n      }\n    }\n  }\n\n  public async getAllListings(\n    filter?: MarketplaceFilter,\n  ): Promise<(AuctionListing | DirectListing)[]> {\n    let rawListings = await this.getAllListingsNoFilter();\n\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(\n          (seller) =>\n            seller.sellerAddress.toString().toLowerCase() ===\n            filter?.seller?.toString().toLowerCase(),\n        );\n      }\n      if (filter.tokenContract) {\n        if (!filter.tokenId) {\n          rawListings = rawListings.filter(\n            (tokenContract) =>\n              tokenContract.assetContractAddress.toString().toLowerCase() ===\n              filter?.tokenContract?.toString().toLowerCase(),\n          );\n        } else {\n          rawListings = rawListings.filter(\n            (tokenContract) =>\n              tokenContract.assetContractAddress.toString().toLowerCase() ===\n                filter?.tokenContract?.toString().toLowerCase() &&\n              tokenContract.tokenId.toString() === filter?.tokenId?.toString(),\n          );\n        }\n      }\n      if (filter.start !== undefined) {\n        const start = filter.start;\n        rawListings = rawListings.filter((_, index) => index >= start);\n        if (filter.count !== undefined && rawListings.length > filter.count) {\n          rawListings = rawListings.slice(0, filter.count);\n        }\n      }\n    }\n    return rawListings.filter((l) => l !== undefined) as (\n      | AuctionListing\n      | DirectListing\n    )[];\n  }\n\n  private async getAllListingsNoFilter(): Promise<\n    (AuctionListing | DirectListing)[]\n  > {\n    const listings = await Promise.all(\n      Array.from(\n        Array((await this.readOnlyContract.totalListings()).toNumber()).keys(),\n      ).map(async (i) => {\n        let listing;\n\n        try {\n          listing = await this.getListing(i);\n        } catch (err) {\n          return undefined;\n        }\n\n        if (listing.type === ListingType.Auction) {\n          return listing;\n        }\n\n        const valid = await this.isStillValidDirectListing(listing);\n        if (!valid) {\n          return undefined;\n        }\n\n        return listing;\n      }),\n    );\n    return listings.filter((l) => l !== undefined) as (\n      | AuctionListing\n      | DirectListing\n    )[];\n  }\n\n  public async isRestrictedListerRoleOnly(): Promise<boolean> {\n    return this.readOnlyContract.restrictedListerRoleOnly();\n  }\n\n  public async setRestrictedListerRoleOnly(\n    isRestricted: boolean,\n  ): Promise<void> {\n    await this.sendTransaction(\"setRestrictedListerRoleOnly\", [isRestricted]);\n  }\n\n  public async allowListingFromSpecificAssetOnly(contractAddress: string) {\n    if (!(await this.isV2())) {\n      throw Error(\n        \"Not supported in this version of the contract, please upgrade\",\n      );\n    }\n    const encoded = [];\n    const members = await this.getRoleMembers(RolesMap.asset);\n    if (AddressZero in members) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"revokeRole\", [\n          getRoleHash(RolesMap.asset as Role),\n          AddressZero,\n        ]),\n      );\n    }\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"grantRole\", [\n        getRoleHash(RolesMap.asset as Role),\n        contractAddress,\n      ]),\n    );\n\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async allowListingFromAnyAsset() {\n    if (!(await this.isV2())) {\n      throw Error(\n        \"Not supported in this version of the contract, please upgrade\",\n      );\n    }\n    const encoded = [];\n    const members = await this.getRoleMembers(RolesMap.asset);\n    for (const addr in members) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"revokeRole\", [\n          getRoleHash(RolesMap.asset as Role),\n          addr,\n        ]),\n      );\n    }\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"grantRole\", [\n        getRoleHash(RolesMap.asset as Role),\n        AddressZero,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * @internal\n   */\n  private async isV2(): Promise<boolean> {\n    const version = await this.readOnlyContract.VERSION();\n    return version.toNumber() === 2;\n  }\n\n  /**\n   * @internal\n   */\n  private async isNewBuy(): Promise<boolean> {\n    await this.checkVersion();\n    return this._isNewBuy;\n  }\n\n  /**\n   * @internal\n   */\n  private async checkVersion() {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.VERSION();\n        this._isNewBuy = true;\n      } catch (e) {\n        this._isNewBuy = false;\n      }\n\n      this._shouldCheckVersion = false;\n    }\n  }\n}\n","import {\n  ERC20__factory,\n  NFT,\n  NFT__factory,\n  SignatureMint721,\n  SignatureMint721__factory,\n} from \"@3rdweb/contracts\";\nimport { MintedBatchEvent, MintedEvent } from \"@3rdweb/contracts/dist/NFT\";\nimport {\n  MintRequestStructOutput,\n  TokenMintedEvent,\n  MintWithSignatureEvent,\n} from \"@3rdweb/contracts/dist/SignatureMint721\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, Signer } from \"ethers\";\nimport { hexlify, toUtf8Bytes } from \"ethers/lib/utils\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  ModuleType,\n  NATIVE_TOKEN_ADDRESS,\n  RestrictedTransferError,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { invariant } from \"../common/invariant\";\nimport { NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport { ISignatureMinter } from \"../interfaces/modules/ISignatureMinter\";\nimport { NewSignaturePayload } from \"../types/signature-minting/NewSignaturePayload\";\nimport { SignaturePayload } from \"../types/signature-minting/SignaturePayload\";\n\nconst MintRequest = [\n  { name: \"to\", type: \"address\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"price\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getNFTModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class NFTModule\n  extends ModuleWithRoles<SignatureMint721>\n  implements ITransferable, ISignatureMinter\n{\n  public static moduleType: ModuleType = ModuleType.NFT;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  protected getModuleRoles(): readonly Role[] {\n    return NFTModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): SignatureMint721 {\n    return SignatureMint721__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return NFTModule.moduleType;\n  }\n\n  private _shouldCheckVersion = true;\n  private _isV1 = false;\n  private v1Contract?: NFT;\n\n  /**\n   * Check if contract is v1 or v2. If the contract doesn't have nextTokenIdToMint = v1 contract.\n   */\n  async isV1(): Promise<boolean> {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.nextTokenIdToMint();\n        this._isV1 = false;\n      } catch (e) {\n        this._isV1 = true;\n        this.v1Contract = NFT__factory.connect(\n          this.address,\n          this.providerOrSigner,\n        );\n      }\n      this._shouldCheckVersion = false;\n    }\n    return this._isV1;\n  }\n\n  /**\n   * Fetches an NFT from storage with the resolved metadata.\n   *\n   * @param tokenId - The id of the token to fetch.\n   * @returns - The NFT metadata.\n   */\n  public async get(tokenId: string): Promise<NFTMetadata> {\n    const storage = this.sdk.getStorage();\n    const uri = await this.readOnlyContract.tokenURI(tokenId);\n    const metadata = JSON.parse(await storage.get(uri));\n    return {\n      ...metadata,\n      id: tokenId,\n      uri,\n      image: storage.resolveFullUrl(metadata.image),\n    };\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this module.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(): Promise<NFTMetadata[]> {\n    let maxId: number;\n    if (await this.isV1()) {\n      maxId = (await this.v1Contract?.nextTokenId())?.toNumber() as number;\n    } else {\n      maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    }\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getWithOwner(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId),\n      this.get(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAllWithOwner(): Promise<NFTMetadataOwner[]> {\n    let maxId: number;\n    if (await this.isV1()) {\n      maxId = (await this.v1Contract?.nextTokenId())?.toNumber() as number;\n    } else {\n      maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    }\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.getWithOwner(i.toString()),\n      ),\n    );\n  }\n\n  /**\n   * Checks the owner of a particular NFT\n   *\n   * @param tokenId - ID of the NFT to get the owner of\n   * @returns the owner of the token, or a zero address if the\n   * token has been burned\n   */\n  public async ownerOf(tokenId: string): Promise<string> {\n    try {\n      return await this.readOnlyContract.ownerOf(tokenId);\n    } catch (e) {\n      return AddressZero;\n    }\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await module.getOwned(address);\n   * console.log(nfts);\n   * ```\n   */\n  public async getOwned(_address?: string): Promise<NFTMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await module.balanceOf(address);\n   * console.log(balance);\n   * ```\n   *\n   * @returns The balance of the NFTs in the wallet\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * await module.transfer(toAddress, tokenId);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    if (await this.isTransferRestricted()) {\n      throw new RestrictedTransferError(this.address);\n    }\n\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  // owner functions\n  public async mint(metadata: MetadataURIOrObject): Promise<NFTMetadata> {\n    return await this.mintTo(await this.getSignerAddress(), metadata);\n  }\n\n  private async _v1MintTo(\n    to: string,\n    metadata: MetadataURIOrObject,\n  ): Promise<NFTMetadata> {\n    invariant(this.v1Contract !== undefined, \"v1 contract is undefined\");\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    const receipt = await this.sendContractTransaction(\n      this.v1Contract,\n      \"mintNFT\",\n      [to, uri],\n    );\n    const events = this.parseLogs<MintedEvent>(\n      \"Minted\",\n      receipt?.logs,\n      this.v1Contract,\n    );\n    if (events.length === 0) {\n      throw new Error(\"No Minted event found, failed to mint\");\n    }\n    return await this.get(events[0].args.tokenId.toString());\n  }\n\n  /**\n   * Mint NFT\n   *\n   * @remarks Mint an NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * await module.mintTo(toAddress, metadata);\n   * ```\n   */\n  public async mintTo(\n    to: string,\n    metadata: MetadataURIOrObject,\n  ): Promise<NFTMetadata> {\n    if (await this.isV1()) {\n      return await this._v1MintTo(to, metadata);\n    }\n\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    const receipt = await this.sendTransaction(\"mintTo\", [to, uri]);\n    const event = this.parseLogs<TokenMintedEvent>(\n      \"TokenMinted\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TokenMinted event not found\");\n    }\n\n    const tokenId = event[0].args.tokenIdMinted;\n    return await this.get(tokenId.toString());\n  }\n\n  public async mintBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    return await this.mintBatchTo(await this.getSignerAddress(), metadatas);\n  }\n\n  private async _v1MintBatchTo(\n    to: string,\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    invariant(this.v1Contract !== undefined, \"v1 contract is undefined\");\n\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const receipt = await this.sendContractTransaction(\n      this.v1Contract,\n      \"mintNFTBatch\",\n      [to, uris],\n    );\n    const events = this.parseLogs<MintedBatchEvent>(\n      \"MintedBatch\",\n      receipt?.logs,\n      this.v1Contract,\n    );\n    if (events.length === 0) {\n      throw new Error(\"No MintedBatch event found, failed to mint\");\n    }\n\n    const tokenIds = events[0].args.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * Mint Many NFTs\n   *\n   * @remarks Mint many NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * await module.mintBatchTo(toAddress, metadatas);\n   * ```\n   */\n  public async mintBatchTo(\n    to: string,\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    if (await this.isV1()) {\n      return await this._v1MintBatchTo(to, metadatas);\n    }\n\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const multicall = uris.map((uri) =>\n      this.contract.interface.encodeFunctionData(\"mintTo\", [to, uri]),\n    );\n\n    const receipt = await this.sendTransaction(\"multicall\", [multicall]);\n    const events = this.parseLogs<TokenMintedEvent>(\n      \"TokenMinted\",\n      receipt.logs,\n    );\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n\n    const tokenIds = events.map((e) => e.args.tokenIdMinted);\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * Burn NFT\n   *\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   *\n   * await module.burn(tokenId);\n   * ```\n   */\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  public async mintWithSignature(\n    req: SignaturePayload,\n    signature: string,\n  ): Promise<BigNumber> {\n    const message = { ...this.mapPayload(req), uri: req.uri };\n    const overrides = await this.getCallOverrides();\n    await this.setAllowance(\n      BigNumber.from(message.price),\n      req.currencyAddress,\n      overrides,\n    );\n\n    const receipt = await this.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n\n    const t = await this.parseLogs<MintWithSignatureEvent>(\n      \"MintWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n\n    return t[0].args.tokenIdMinted;\n  }\n\n  public async verify(\n    mintRequest: SignaturePayload,\n    signature: string,\n  ): Promise<boolean> {\n    const message = this.mapPayload(mintRequest);\n    const v = await this.readOnlyContract.verify(\n      { ...message, uri: mintRequest.uri },\n      signature,\n    );\n    return v[0];\n  }\n\n  public async generateSignatureBatch(\n    payloads: NewSignaturePayload[],\n  ): Promise<{ payload: SignaturePayload; signature: string }[]> {\n    const resolveId = (mintRequest: NewSignaturePayload): string => {\n      if (mintRequest.id === undefined) {\n        const buffer = Buffer.alloc(16);\n        uuidv4({}, buffer);\n        return hexlify(toUtf8Bytes(buffer.toString(\"hex\")));\n      } else {\n        return hexlify(mintRequest.id as string);\n      }\n    };\n\n    await this.onlyRoles([\"minter\"], await this.getSignerAddress());\n\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(payloads.map((r) => r.metadata));\n\n    const chainId = await this.getChainID();\n    const signer = this.getSigner() as Signer;\n\n    return await Promise.all(\n      payloads.map(async (m, i) => {\n        const id = resolveId(m);\n        const uri = uris[i];\n        return {\n          payload: {\n            ...m,\n            id,\n            uri,\n          },\n          signature: (\n            await this.signTypedDataEmitEvent(\n              signer,\n              {\n                name: \"SignatureMint721\",\n                version: \"1\",\n                chainId,\n                verifyingContract: this.address,\n              },\n              { MintRequest },\n              {\n                uri,\n                ...(this.mapPayload(m) as any),\n                uid: id,\n              },\n            )\n          ).toString(),\n        };\n      }),\n    );\n  }\n\n  public async generateSignature(\n    mintRequest: NewSignaturePayload,\n  ): Promise<{ payload: SignaturePayload; signature: string }> {\n    return (await this.generateSignatureBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private mapPayload(\n    mintRequest: SignaturePayload | NewSignaturePayload,\n  ): MintRequestStructOutput {\n    return {\n      to: mintRequest.to,\n      price: mintRequest.price,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTimeEpochSeconds,\n      validityStartTimestamp: mintRequest.mintStartTimeEpochSeconds,\n      uid: mintRequest.id,\n    } as MintRequestStructOutput;\n  }\n\n  // TODO: write in common place and stop duping\n  private async setAllowance(\n    value: BigNumber,\n    currencyAddress: string,\n    overrides: any,\n  ): Promise<any> {\n    if (\n      currencyAddress === NATIVE_TOKEN_ADDRESS ||\n      currencyAddress === AddressZero\n    ) {\n      overrides[\"value\"] = value;\n    } else {\n      const erc20 = ERC20__factory.connect(\n        currencyAddress,\n        this.providerOrSigner,\n      );\n      const owner = await this.getSignerAddress();\n      const spender = this.address;\n      const allowance = await erc20.allowance(owner, spender);\n\n      if (allowance.lt(value)) {\n        await this.sendContractTransaction(erc20, \"increaseAllowance\", [\n          spender,\n          value.sub(allowance),\n        ]);\n      }\n      return overrides;\n    }\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC20__factory,\n  Pack as PackContract,\n  Pack__factory,\n} from \"@3rdweb/contracts\";\n\nimport {\n  PackCreatedEvent,\n  PackOpenRequestEvent,\n} from \"@3rdweb/contracts/dist/Pack\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike, Contract, ethers } from \"ethers\";\nimport {\n  CurrencyValue,\n  getCurrencyValue,\n  ModuleType,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { ChainlinkVrf } from \"../common/chainlink\";\nimport { NotFoundError } from \"../common/error\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\n\n/**\n * @beta\n */\nexport interface PackMetadata {\n  id: string;\n  creator: string;\n  currentSupply: BigNumber;\n  openStart: Date | null;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackNFTMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackMetadataWithBalance extends PackMetadata {\n  ownedByAddress: BigNumber;\n}\n\nexport enum UnderlyingType {\n  None = 0,\n  ERC20 = 1,\n  ERC721 = 2,\n}\n/**\n * @beta\n */\nexport interface IPackCreateArgs {\n  assetContract: string;\n  metadata: MetadataURIOrObject;\n  assets: {\n    tokenId: BigNumberish;\n    amount: BigNumberish;\n  }[];\n  secondsUntilOpenStart?: BigNumberish;\n  rewardsPerOpen?: BigNumberish;\n}\n\n/**\n * @beta\n */\nexport interface IPackBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getPackModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class PackModule\n  extends ModuleWithRoles<PackContract>\n  implements ITransferable\n{\n  public static moduleType: ModuleType = ModuleType.PACK;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return PackModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): PackContract {\n    return Pack__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return PackModule.moduleType;\n  }\n\n  /**\n   * Open Pack\n   *\n   * @remarks Open a pack to burn it and obtain the reward asset inside.\n   *\n   * @example\n   * ```javascript\n   * // The pack ID of the asset you want to buy\n   * const packId = \"0\";\n   * const rewards = await module.open(packId);\n   * console.log(rewards);\n   * ```\n   */\n  public async open(packId: string): Promise<NFTMetadata[]> {\n    const receipt = await this.sendTransaction(\"openPack\", [packId]);\n    const logs = this.parseLogs<PackOpenRequestEvent>(\n      \"PackOpenRequest\",\n      receipt?.logs,\n    );\n    if (logs.length === 0) {\n      throw new Error(\"Failed to open pack\");\n    }\n    const event = logs[0];\n\n    const requestId = event.args.requestId;\n    const opener = event.args.opener;\n\n    const fulfillEvent: any = await new Promise((resolve) => {\n      this.readOnlyContract.once(\n        // eslint-disable-next-line new-cap\n        this.readOnlyContract.filters.PackOpenFulfilled(null, opener),\n        (_packId, _opener, _requestId, rewardContract, rewardIds) => {\n          if (requestId === _requestId) {\n            resolve({\n              packId: _packId,\n              opener: _opener,\n              requestId,\n              rewardContract,\n              rewardIds,\n            });\n          }\n        },\n      );\n    });\n\n    const { rewardIds, rewardContract } = fulfillEvent;\n    return await Promise.all(\n      rewardIds.map((rewardId: BigNumber) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          rewardContract,\n          rewardId.toString(),\n          this.sdk.getStorage(),\n        ),\n      ),\n    );\n  }\n\n  public async get(packId: string): Promise<PackMetadata> {\n    const [meta, state, supply] = await Promise.all([\n      getMetadataWithoutContract(\n        this.providerOrSigner,\n        this.address,\n        packId,\n        this.sdk.getStorage(),\n      ),\n      this.readOnlyContract.getPack(packId),\n      this.readOnlyContract\n        .totalSupply(packId)\n        .catch(() => BigNumber.from(\"0\")),\n    ]);\n    const entity: PackMetadata = {\n      id: packId,\n      metadata: meta,\n      creator: state.creator,\n      currentSupply: supply,\n      openStart: state.openStart.gt(0)\n        ? new Date(state.openStart.toNumber() * 1000)\n        : null,\n    };\n    return entity;\n  }\n\n  /**\n   * Get Pack Data\n   *\n   * @remarks Get data associated with every pack in this module.\n   *\n   * @example\n   * ```javascript\n   * const packs = await module.getAll();\n   * console.log(packs);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(): Promise<PackMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * Get Pack Reward Data\n   *\n   * @remarks Get data associated with the rewards inside a specified pack\n   *\n   * @example\n   * ```javascript\n   * // The pack ID of the pack whos rewards you want to get\n   * const packId = 0;\n   *\n   * const nfts = await module.getNFTs(packId);\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getNFTs(packId: string): Promise<PackNFTMetadata[]> {\n    const packReward = await this.readOnlyContract.getPackWithRewards(packId);\n    if (!packReward.source) {\n      throw new NotFoundError();\n    }\n    const rewards = await Promise.all(\n      packReward.tokenIds.map((tokenId) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          packReward.source,\n          tokenId.toString(),\n          this.sdk.getStorage(),\n        ),\n      ),\n    );\n    return rewards.map((reward, i) => ({\n      supply: packReward.amountsPacked[i],\n      metadata: reward,\n    }));\n  }\n\n  /**\n   * Get Pack Balance\n   *\n   * @remarks Get a wallets pack balance (number of a specific packs in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check pack balance\n   * const address = \"{{wallet_address}}\"\";\n   * // The token ID of the pack you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await module.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress(), tokenId);\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  public async setApproval(operator: string, approved = true) {\n    await this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n  }\n\n  /**\n   * Transfer Pack\n   *\n   * @remarks Transfer a pack from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the pack to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the pack you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of packs you want to send\n   * const amount = 1;\n   *\n   * await module.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(to: string, tokenId: string, amount: BigNumber) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      await this.getSignerAddress(),\n      to,\n      tokenId,\n      amount,\n      [0],\n    ]);\n  }\n\n  // owner functions\n  /**\n   * Create Pack\n   *\n   * @remarks Create a new pack with its own rewards.\n   *\n   * @example\n   * ```javascript\n   * // Data to create the pack\n   * const pack = {\n   *   // The address of the contract that holds the rewards you want to include\n   *   assetContract: \"0x...\",\n   *   // The metadata of the pack\n   *   metadata: {\n   *     name: \"Cool Pack\",\n   *     description: \"This is a cool pack\",\n   *     // This can be an image url or image file\n   *     image: readFileSync(\"path/to/image.png\"),\n   *   },\n   *   // The NFTs you want to include in the pack\n   *   assets: [\n   *     {\n   *       tokenId: 0, // The token ID of the asset you want to add\n   *       amount: 1, // The amount of the asset you want to add\n   *     }, {\n   *       tokenId: 1,\n   *       amount: 1,\n   *     }\n   *   ],\n   * };\n   *\n   * await module.create(pack);\n   * ```\n   *\n   * @param args - Args for the pack creation\n   * @returns - The newly created pack metadata\n   */\n  public async create(args: IPackCreateArgs): Promise<PackMetadata> {\n    const asset = ERC1155__factory.connect(\n      args.assetContract,\n      this.providerOrSigner,\n    );\n\n    const from = await this.getSignerAddress();\n    const ids = args.assets.map((a) => a.tokenId);\n    const amounts = args.assets.map((a) => a.amount);\n    const uri = await this.sdk.getStorage().uploadMetadata(args.metadata);\n\n    const packParams = ethers.utils.defaultAbiCoder.encode(\n      [\"string\", \"uint256\", \"uint256\"],\n      [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1],\n    );\n\n    // TODO: make it gasless\n    const tx = await asset.safeBatchTransferFrom(\n      from,\n      this.address,\n      ids,\n      amounts,\n      packParams,\n      await this.getCallOverrides(),\n    );\n\n    const receipt = await tx.wait();\n    const log = this.parseLogs<PackCreatedEvent>(\"PackCreated\", receipt.logs);\n    if (log.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = log[0].args.packId;\n    return await this.get(packId.toString());\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  public async getLinkBalance(): Promise<CurrencyValue> {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      chainlink.linkTokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n\n  public async depositLink(amount: BigNumberish) {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    // TODO: make it gasless\n    const tx = await erc20.transfer(\n      this.address,\n      amount,\n      await this.getCallOverrides(),\n    );\n    await tx.wait();\n  }\n\n  public async withdrawLink(to: string, amount: BigNumberish) {\n    try {\n      // old version of the contract\n      const _contract = new Contract(\n        this.address,\n        [\n          {\n            inputs: [\n              {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n              },\n            ],\n            name: \"transferLink\",\n            outputs: [],\n            stateMutability: \"nonpayable\",\n            type: \"function\",\n          },\n        ],\n        this.providerOrSigner,\n      );\n      await this.sendContractTransaction(_contract, \"transferLink\", [\n        to,\n        amount,\n      ]);\n    } catch (e) {\n      // new version of the contract\n      const chainId = await this.getChainID();\n      const chainlink = ChainlinkVrf[chainId];\n      await this.sendTransaction(\"transferERC20\", [\n        chainlink.linkTokenAddress,\n        to,\n        amount,\n      ]);\n    }\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(metadata: MetadataURIOrObject) {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of PackMetadataWithBalance objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<PackMetadataWithBalance[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async ({ tokenId, balance }) => {\n        const token = await this.get(tokenId.toString());\n        return { ...token, ownedByAddress: balance };\n      }),\n    );\n  }\n}\n","import { ERC20__factory, Royalty, Royalty__factory } from \"@3rdweb/contracts\";\nimport { BigNumber } from \"ethers\";\nimport { ModuleType } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { Module } from \"../core/module\";\nimport { SplitRecipient } from \"../types/SplitRecipient\";\n\nexport interface ISplitsModule {\n  /**\n   * Returns a list of all recipients with their\n   * respective split percentages.\n   *\n   */\n  getAllRecipients(): Promise<SplitRecipient[]>;\n\n  /**\n   * Get the split percentage of a recipient.\n   *\n   * @param address - The address of the recipient.\n   */\n  getRecipientSplitPercentage(address: string): Promise<SplitRecipient>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency.\n   *\n   * @param address - The address of the recipient to check the balance of.\n   */\n  balanceOf(address: string): Promise<BigNumber>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency in a specific currency.\n   *\n   * @param walletAddress - The address of the recipient to check the balance of.\n   * @param tokenAddress - The address of the currency to check the balance in.\n   */\n  balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet.\n   *\n   * @param address - The address to withdraw royalties for.\n   */\n  withdraw(address: string): Promise<void>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet, in the\n   * currency specified by `tokenAddress`.\n   *\n   * For example: If the native currency of a chain is ETH but the user\n   * wants to withdraw their split in $MATIC, they should pass\n   * the address of the $MATIC token as the `tokenAddress` parameter.\n   *\n   * @param walletAddress - The address to withdraw royalties for.\n   */\n  withdrawToken(walletAddress: string, tokenAddress: string): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients.\n   */\n  distribute(): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients in the specified currency.\n   *\n   * @param tokenAddress - The address of the currency to distribute the funds in.\n   */\n  distributeToken(tokenAddress: string): Promise<void>;\n}\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getSplitsModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class SplitsModule extends Module<Royalty> implements ISplitsModule {\n  public static moduleType: ModuleType = ModuleType.SPLITS as const;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Royalty {\n    return Royalty__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return SplitsModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  /**\n   * Get Recipients\n   *\n   * @remarks Get the data about the shares of every split recipient on the module\n   *\n   * @example\n   * ```javascript\n   * const recipients = await module.getAllRecepients();\n   * console.log(recipients);\n   * ```\n   */\n  public async getAllRecipients(): Promise<SplitRecipient[]> {\n    const recipients: SplitRecipient[] = [];\n\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.readOnlyContract.payeeCount();\n    // eslint-disable-next-line no-constant-condition\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.readOnlyContract.payee(index);\n        recipients.push(\n          await this.getRecipientSplitPercentage(recipientAddress),\n        );\n        index = index.add(1);\n      } catch (err: any) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\n          \"method\" in err &&\n          (err[\"method\"] as string).toLowerCase().includes(\"payee(uint256)\")\n        ) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return recipients;\n  }\n  /**\n   *\n   * Returns all the recipients and their balances in the native currency.\n   * @returns A map of recipient addresses to their balances in the native currency.\n   *\n   */\n  public async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: BigNumber } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n  /**\n   *\n   * Returns all the recipients and their balances in a non-native currency.\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   *\n   */\n  public async balanceOfTokenAllRecipients(tokenAddress: string) {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: CurrencyValue } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(\n        recipient.address,\n        tokenAddress,\n      );\n    }\n    return balances;\n  }\n  public async getRecipientSplitPercentage(\n    address: string,\n  ): Promise<SplitRecipient> {\n    const [totalShares, walletsShares] = await Promise.all([\n      this.readOnlyContract.totalShares(),\n      this.readOnlyContract.shares(address),\n    ]);\n\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage:\n        walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() /\n        1e5,\n    };\n  }\n\n  /**\n   * Get Funds\n   *\n   * @remarks Get the amount of funds in the native currency held by the module thats owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await module.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    const walletBalance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    const totalReleased = await this.readOnlyContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n\n    return this._pendingPayment(\n      address,\n      totalReceived,\n      await this.readOnlyContract[\"released(address)\"](address),\n    );\n  }\n\n  /**\n   * Get Token Funds\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the module thats owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await module.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);\n    const walletBalance = await erc20.balanceOf(this.address);\n    const totalReleased = await this.readOnlyContract[\"totalReleased(address)\"](\n      tokenAddress,\n    );\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(\n      walletAddress,\n      totalReceived,\n      await this.readOnlyContract[\"released(address,address)\"](\n        tokenAddress,\n        walletAddress,\n      ),\n    );\n    return await getCurrencyValue(this.providerOrSigner, tokenAddress, value);\n  }\n\n  public async withdraw(address: string): Promise<void> {\n    await this.sendTransaction(\"release(address)\", [address]);\n  }\n\n  private async _pendingPayment(\n    address: string,\n    totalReceived: BigNumber,\n    alreadyReleased: BigNumber,\n  ): Promise<BigNumber> {\n    const addressReceived = totalReceived.mul(\n      await this.readOnlyContract.shares(address),\n    );\n    const totalRoyaltyAvailable = addressReceived.div(\n      await this.readOnlyContract.totalShares(),\n    );\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  public async withdrawToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<void> {\n    await this.sendTransaction(\"release(address,address)\", [\n      tokenAddress,\n      walletAddress,\n    ]);\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await module.distribute();\n   * ```\n   */\n  public async distribute(): Promise<void> {\n    await this.sendTransaction(\"distribute()\", []);\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await module.distributeToken(tokenAddress);\n   * ```\n   */\n  public async distributeToken(tokenAddress: string): Promise<void> {\n    await this.sendTransaction(\"distribute(address)\", [tokenAddress]);\n  }\n}\n","import {\n  ERC20__factory,\n  VotingGovernor,\n  VotingGovernor__factory,\n} from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n  ModuleType,\n} from \"../common\";\nimport { Module } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { VoteType } from \"../enums\";\nimport { Proposal, ProposalExecutable } from \"../types/vote\";\n\nexport interface VoteSettings {\n  votingDelay: string;\n  votingPeriod: string;\n  votingTokenAddress: string;\n  votingTokenMetadata: Currency;\n  votingQuorumFraction: string;\n  proposalTokenThreshold: string;\n}\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getVoteModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class VoteModule extends Module<VotingGovernor> {\n  public static moduleType: ModuleType = ModuleType.VOTE as const;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): VotingGovernor {\n    return VotingGovernor__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return VoteModule.moduleType;\n  }\n\n  public async settings(): Promise<VoteSettings> {\n    const [\n      votingDelay,\n      votingPeriod,\n      votingTokenAddress,\n      votingQuorumFraction,\n      proposalTokenThreshold,\n    ] = await Promise.all([\n      this.readOnlyContract.votingDelay(),\n      this.readOnlyContract.votingPeriod(),\n      this.readOnlyContract.token(),\n      this.readOnlyContract.quorumNumerator(),\n      this.readOnlyContract.proposalThreshold(),\n    ]);\n    const votingTokenMetadata = await getCurrencyMetadata(\n      this.providerOrSigner,\n      votingTokenAddress,\n    );\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString(),\n    };\n  }\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  public async get(proposalId: string): Promise<Proposal> {\n    await this.ensureExists(proposalId);\n\n    const all = await this.getAll();\n    const proposals = all.filter(\n      (p) => p.proposalId.toLowerCase() === proposalId.toLowerCase(),\n    );\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this module.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await module.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  public async getAll(): Promise<Proposal[]> {\n    const proposals = await this.readOnlyContract.queryFilter(\n      this.contract.filters.ProposalCreated(),\n    );\n\n    const results: Proposal[] = [];\n    const states = await Promise.all(\n      proposals.map((p) => this.readOnlyContract.state(p.args.proposalId)),\n    );\n    const votes = await Promise.all(\n      proposals.map((p) =>\n        this.readOnlyContract.proposalVotes(p.args.proposalId),\n      ),\n    );\n\n    for (let i = 0; i < proposals.length; i++) {\n      const p = proposals[i].args;\n      const s = states[i];\n      const v = [\n        {\n          type: VoteType.Against,\n          label: \"Against\",\n          count: votes[i].againstVotes,\n        },\n        {\n          type: VoteType.For,\n          label: \"For\",\n          count: votes[i].forVotes,\n        },\n        {\n          type: VoteType.Abstain,\n          label: \"Abstain\",\n          count: votes[i].abstainVotes,\n        },\n      ];\n      const e = [];\n      for (let j = 0; j < p.targets.length; j++) {\n        e.push({\n          to: p.targets[j],\n          value: p[3][j] || 0,\n          data: p.calldatas[j],\n        });\n      }\n      results.push({\n        proposalId: p.proposalId.toString(),\n        proposer: p.proposer,\n        description: p.description,\n        startBlock: p.startBlock,\n        endBlock: p.endBlock,\n        state: s,\n        votes: v,\n        executions: e.map((exec) => ({\n          toAddress: exec.to,\n          nativeTokenValue: exec.value,\n          transactionData: exec.data,\n        })),\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token module (which you would need to setup in code)\n   *     transactionData: tokenModule.contract.interface.encodeFunctionData(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await module.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal.\n   */\n  public async propose(\n    description: string,\n    executions?: ProposalExecutable[],\n  ): Promise<BigNumber> {\n    if (!executions) {\n      executions = [\n        { toAddress: this.address, nativeTokenValue: 0, transactionData: \"0x\" },\n      ];\n    }\n    const tos = executions.map((p) => p.toAddress);\n    const values = executions.map((p) => p.nativeTokenValue);\n    const datas = executions.map((p) => p.transactionData);\n    const receipt = await this.sendTransaction(\"propose\", [\n      tos,\n      values,\n      datas,\n      description,\n    ]);\n\n    const event = this.parseEventLogs(\"ProposalCreated\", receipt?.logs);\n    return event.proposalId;\n  }\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await module.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  public async vote(proposalId: string, voteType: VoteType, reason = \"\") {\n    await this.ensureExists(proposalId);\n\n    await this.sendTransaction(\"castVoteWithReason\", [\n      proposalId,\n      voteType,\n      reason,\n    ]);\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await module.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  public async hasVoted(\n    proposalId: string,\n    account?: string,\n  ): Promise<boolean> {\n    if (!account) {\n      account = await this.getSignerAddress();\n    }\n    return this.readOnlyContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID ofthe proposal you want to execute\n   * const proposalId = \"0\"\n   * await module.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  public async execute(proposalId: string) {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    await this.sendTransaction(\"execute\", [\n      tos,\n      values,\n      datas,\n      descriptionHash,\n    ]);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await module.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  public async canExecute(proposalId: string): Promise<boolean> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.contract.callStatic.execute(\n        tos,\n        values,\n        datas,\n        descriptionHash,\n      );\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<CurrencyValue> {\n    const balance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance.toString(),\n      displayValue: ethers.utils.formatUnits(balance, 18),\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(\n      tokenAddress,\n      this.readOnlyContract.provider,\n    );\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      tokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  private async ensureExists(proposalId: string): Promise<void> {\n    await this.readOnlyContract.state(proposalId);\n  }\n}\n","import {\n  DuplicateFileNameError,\n  FetchError,\n  UploadError,\n} from \"../common/error\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { IStorage, UploadMetadataBatchResult } from \"../interfaces/IStorage\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport { BufferOrStringWithName } from \"../types/BufferOrStringWithName\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\nconst thirdwebIpfsServerUrl = \"https://upload.nftlabs.co\";\nconst pinataIpfsUrl = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n// const thirdwebIpfsServerUrl = \"http://localhost:3002\";\n\n/**\n * @internal\n */\ninterface CidWithFileName {\n  // base cid of the directory\n  cid: string;\n\n  // file name of the file without cid\n  fileNames: string[];\n}\n\nexport class IpfsStorage implements IStorage {\n  private gatewayUrl: string;\n\n  constructor(gatewayUrl: string) {\n    this.gatewayUrl = `${gatewayUrl.replace(/\\/$/, \"\")}/`;\n  }\n\n  public async upload(\n    data: string | FileOrBuffer,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    if (typeof data === \"string\") {\n      // always 0 indexed because there's only 1 file\n      const cid = await this.uploadBatch([data], contractAddress, 0);\n      return `${cid}0`;\n    } else if (data instanceof Buffer) {\n      // always 0 indexed because there's only 1 file\n      const cid = await this.uploadBatch([data], contractAddress, 0);\n      return `${cid}0`;\n    }\n\n    // if it's file type, we're doing legacy upload\n\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n      \"X-Public-Address\": signerAddress || \"\",\n    };\n    const formData = new FormData();\n    formData.append(\"file\", data as any);\n    try {\n      const res = await fetch(`${thirdwebIpfsServerUrl}/upload`, {\n        method: \"POST\",\n        body: formData as any,\n        headers,\n      });\n      if (res.status !== 200) {\n        throw new Error(\n          `Failed to upload to IPFS [status code = ${res.status}]`,\n        );\n      }\n\n      const body = await res.json();\n      return body.IpfsUri;\n    } catch (e) {\n      throw new UploadError(`Failed to upload to IPFS: ${e}`);\n    }\n  }\n\n  public async uploadBatch(\n    files:\n      | Buffer[]\n      | string[]\n      | FileOrBuffer[]\n      | File[]\n      | BufferOrStringWithName[],\n    contractAddress?: string,\n    fileStartNumber = 0,\n  ): Promise<string> {\n    const { cid } = await this.uploadBatchWithCid(\n      files,\n      contractAddress,\n      fileStartNumber,\n    );\n\n    return `ipfs://${cid}/`;\n  }\n\n  private async uploadBatchWithCid(\n    files:\n      | Buffer[]\n      | string[]\n      | FileOrBuffer[]\n      | File[]\n      | BufferOrStringWithName[],\n    contractAddress?: string,\n    fileStartNumber = 0,\n  ): Promise<CidWithFileName> {\n    const token = await this.getUploadToken(contractAddress || \"\");\n    const metadata = {\n      name: `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const data = new FormData();\n    const fileNames: string[] = [];\n    files.forEach((file, i) => {\n      let fileName = \"\";\n      let fileData = file;\n      // if it is a file, we passthrough the file extensions,\n      // if it is a buffer or string, the filename would be fileStartNumber + index\n      // if it is a buffer or string with names, the filename would be the name\n      if (file instanceof File) {\n        let extensions = \"\";\n        if (file.name) {\n          const extensionStartIndex = file.name.lastIndexOf(\".\");\n          if (extensionStartIndex > -1) {\n            extensions = file.name.substring(extensionStartIndex);\n          }\n        }\n        fileName = `${i + fileStartNumber}${extensions}`;\n      } else if (file instanceof Buffer || typeof file === \"string\") {\n        fileName = `${i + fileStartNumber}`;\n      } else if (file && file.name && file?.data) {\n        fileData = file?.data;\n        fileName = `${file.name}`;\n      } else {\n        // default behavior\n        fileName = `${i + fileStartNumber}`;\n      }\n\n      const filepath = `files/${fileName}`;\n      if (fileNames.indexOf(fileName) > -1) {\n        throw new DuplicateFileNameError(fileName);\n      }\n      fileNames.push(fileName);\n      if (typeof window === \"undefined\") {\n        data.append(\"file\", fileData as any, { filepath } as any);\n      } else {\n        // browser does blob things, filepath is parsed differently on browser vs node.\n        // pls pinata?\n        data.append(\"file\", new Blob([fileData as any]), filepath);\n      }\n    });\n\n    data.append(\"pinataMetadata\", JSON.stringify(metadata));\n    const res = await fetch(pinataIpfsUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      body: data as any,\n    });\n    const body = await res.json();\n    if (!res.ok) {\n      console.log(body);\n      throw new UploadError(\"Failed to upload files to IPFS\");\n    }\n    return {\n      cid: body.IpfsHash,\n      fileNames,\n    };\n  }\n\n  public async getUploadToken(contractAddress: string): Promise<string> {\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const res = await fetch(`${thirdwebIpfsServerUrl}/grant`, {\n      method: \"GET\",\n      headers,\n    });\n    if (!res.ok) {\n      throw new FetchError(`Failed to get upload token`);\n    }\n    const body = await res.text();\n    return body;\n  }\n\n  public async get(hash: string): Promise<string> {\n    let uri = hash;\n    if (hash) {\n      uri = this.resolveFullUrl(hash);\n    }\n    const result = await fetch(uri);\n    if (!result.ok) {\n      throw new Error(`Status code (!= 200) =${result.status}`);\n    }\n\n    return await result.text();\n  }\n\n  /**\n   * This function recurisely traverses an object and hashes any\n   * `Buffer` or `File` objects into the returned map.\n   *\n   * @param object - The object to recurse over\n   * @param files - The running array of files or buffer to upload\n   * @returns - The final map of all hashes to files\n   */\n  public buildFilePropertiesMap(\n    object: Record<string, any>,\n    files: (File | Buffer)[],\n  ): (File | Buffer)[] {\n    const keys = Object.keys(object).sort();\n    for (const key in keys) {\n      const val = object[keys[key]];\n      const shouldUpload = val instanceof File || val instanceof Buffer;\n      if (shouldUpload) {\n        files.push(val);\n      }\n\n      if (typeof val === \"object\") {\n        this.buildFilePropertiesMap(val, files);\n      }\n    }\n    return files;\n  }\n\n  /**\n   * Pre-processes metadata and uploads all file properties\n   * to storage in *bulk*, then performs a string replacement of\n   * all file properties -> the resulting ipfs uri. This is\n   * called internally by `uploadMetadataBatch`.\n   *\n   * @internal\n   *\n   * @param metadata - The metadata to recursively process\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n   */\n  public async batchUploadProperties(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<any> {\n    if (typeof metadatas === \"string\") {\n      return metadatas;\n    }\n    const filesToUpload = this.buildFilePropertiesMap(metadatas, []);\n    if (filesToUpload.length === 0) {\n      return metadatas;\n    }\n    const { cid, fileNames } = await this.uploadBatchWithCid(\n      filesToUpload,\n      \"\",\n      0,\n    );\n\n    const cids = [];\n    // recurse ordered array\n    for (const filename of fileNames) {\n      cids.push(`${cid}/${filename}`);\n    }\n\n    const finalMetadata = await this.replaceFilePropertiesWithHashes(\n      metadatas,\n      cids,\n    );\n    return finalMetadata;\n  }\n\n  /**\n   * Given a map of file hashes to ipfs uris, this function will hash\n   * all properties recursively and replace them with the ipfs uris\n   * from the map passed in. If a hash is missing from the map, the function\n   * will throw an error.\n   *\n   * @internal\n   *\n   * @param object - The object to recursively process\n   * @param cids - The array of file hashes to ipfs uris in the recurse order\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n   */\n  private async replaceFilePropertiesWithHashes(\n    object: Record<string, any>,\n    cids: string[],\n  ) {\n    const keys = Object.keys(object).sort();\n    for (const key in keys) {\n      const val = object[keys[key]];\n      const isFile = val instanceof File || val instanceof Buffer;\n      if (typeof val === \"object\" && !isFile) {\n        await this.replaceFilePropertiesWithHashes(val, cids);\n        continue;\n      }\n\n      if (!isFile) {\n        continue;\n      }\n\n      object[keys[key]] = `ipfs://${cids.splice(0, 1)[0]}`;\n    }\n    return object;\n  }\n\n  public async uploadMetadata(\n    metadata: MetadataURIOrObject,\n    contractAddress?: string,\n    _signerAddress?: string,\n  ): Promise<string> {\n    if (typeof metadata === \"string\") {\n      return metadata;\n    }\n\n    // since there's only single object, always use the first index\n    const { metadataUris } = await this.uploadMetadataBatch(\n      [metadata],\n      contractAddress,\n      0,\n    );\n    return metadataUris[0];\n  }\n\n  /**\n   * @internal\n   */\n  public async uploadMetadataBatch(\n    metadatas: MetadataURIOrObject[],\n    contractAddress?: string,\n    startFileNumber?: number,\n  ): Promise<UploadMetadataBatchResult> {\n    // we only want to upload if the metadata object is not a string\n    const metadataObjects = metadatas.filter((m) => typeof m !== \"string\");\n    const metadataToUpload: string[] = (\n      await this.batchUploadProperties(metadataObjects)\n    ).map((m: any) => JSON.stringify(m));\n\n    // batch upload non-string metadata object\n    if (metadataToUpload.length === 0) {\n      return {\n        baseUri: \"\",\n        metadataUris: metadatas.filter(\n          (m) => typeof m === \"string\",\n        ) as string[],\n      };\n    }\n\n    const { cid, fileNames } = await this.uploadBatchWithCid(\n      metadataToUpload,\n      contractAddress,\n      startFileNumber,\n    );\n\n    const baseUri = `ipfs://${cid}/`;\n    const uris = [];\n    for (const metadata of metadatas) {\n      if (typeof metadata === \"string\") {\n        uris.push(metadata);\n      } else {\n        uris.push(`${baseUri}${fileNames.splice(0, 1)[0]}`);\n      }\n    }\n\n    return {\n      baseUri,\n      metadataUris: uris,\n    };\n  }\n\n  /**\n   * Resolves the full url for a file using the configured gateway\n   *\n   * @param ipfsHash - the ipfs:// uri\n   * @returns - The fully formed IPFS url with the gateway url\n   * @internal\n   */\n  resolveFullUrl(ipfsHash: string): string {\n    if (typeof ipfsHash !== \"string\") {\n      return \"\";\n    }\n    return ipfsHash && ipfsHash.toLowerCase().includes(\"ipfs://\")\n      ? ipfsHash.replace(\"ipfs://\", this.gatewayUrl)\n      : ipfsHash;\n  }\n\n  public canResolve(uri: string): boolean {\n    const resolved = this.resolveFullUrl(uri);\n    return resolved.toLowerCase() !== uri.toLowerCase();\n  }\n}\n","import { Registry, Registry__factory } from \"@3rdweb/contracts\";\nimport { ContractMetadata, getContractMetadata } from \"../common/contract\";\nimport { Module } from \"./module\";\n\n/**\n * @public\n */\nexport interface IAppModule {\n  address: string;\n  version: number;\n  metadata?: ContractMetadata;\n}\n\n/**\n * The RegistryModule. This should always be created via `getRegistryModule()` on the main SDK.\n * @internal\n */\nexport class RegistryModule extends Module<Registry> {\n  /**\n   * @internal\n   */\n  protected connectContract(): Registry {\n    return Registry__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  public async getProtocolContracts(address?: string): Promise<IAppModule[]> {\n    const deployer = address || (await this.getSignerAddress());\n    const maxVersion = await this.readOnlyContract.getProtocolControlCount(\n      deployer,\n    );\n    const versions = Array.from(Array(maxVersion.toNumber()).keys()).reverse();\n    const addresses = await Promise.all(\n      versions.map((v) =>\n        this.readOnlyContract.getProtocolControl(deployer, (v + 1).toString()),\n      ),\n    );\n    const metadatas = await Promise.all(\n      addresses.map((addr) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          addr,\n          this.sdk.getStorage(),\n        ).catch(() => undefined),\n      ),\n    );\n    return versions.map((v, i) => {\n      return {\n        address: addresses[i],\n        version: v,\n        metadata: metadatas[i],\n      };\n    });\n  }\n}\n","import { SignatureMint1155Module } from \"../modules/signature-mint-1155\";\nimport { Forwarder__factory } from \"@3rdweb/contracts\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  ContractReceipt,\n  ethers,\n  Signer,\n} from \"ethers\";\nimport { EventEmitter2 } from \"eventemitter2\";\nimport { JsonConvert } from \"json2typescript\";\nimport MerkleTree from \"merkletreejs\";\nimport type { C } from \"ts-toolbelt\";\nimport {\n  DuplicateLeafsError,\n  getContractMetadata,\n  uploadMetadata,\n} from \"../common\";\nimport {\n  FORWARDER_ADDRESS,\n  getContractAddressByChainId,\n} from \"../common/address\";\nimport { SUPPORTED_CHAIN_ID } from \"../common/chain\";\nimport {\n  BiconomyForwarderAbi,\n  ForwardRequest,\n  getAndIncrementNonce,\n} from \"../common/forwarder\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { signEIP2612Permit } from \"../common/permit\";\nimport { signTypedData } from \"../common/sign\";\nimport { ISDKOptions, IThirdwebSdk } from \"../interfaces\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { AppModule } from \"../modules/app\";\nimport { BundleModule } from \"../modules/bundle\";\nimport { BundleDropModule } from \"../modules/bundleDrop\";\nimport { CollectionModule } from \"../modules/collection\";\nimport { DatastoreModule } from \"../modules/datastore\";\nimport { DropModule } from \"../modules/drop\";\nimport { MarketModule } from \"../modules/market\";\nimport { MarketplaceModule } from \"../modules/marketplace\";\nimport { NFTModule } from \"../modules/nft\";\nimport { PackModule } from \"../modules/pack\";\nimport { SplitsModule } from \"../modules/royalty\";\nimport { CurrencyModule, TokenModule } from \"../modules/token\";\nimport { VoteModule } from \"../modules/vote\";\nimport { IpfsStorage } from \"../storage/IpfsStorage\";\nimport { ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { ClaimProof, Snapshot, SnapshotInfo } from \"../types/snapshots\";\nimport { EventType } from \"./events\";\nimport { IAppModule, RegistryModule } from \"./registry\";\nimport {\n  ForwardRequestMessage,\n  GaslessTransaction,\n  MetadataURIOrObject,\n  PermitRequestMessage,\n  ProviderOrSigner,\n  ValidProviderInput,\n} from \"./types\";\n\n/**\n * @internal\n */\nexport type AnyContract =\n  | typeof AppModule\n  | typeof BundleModule\n  | typeof NFTModule\n  | typeof CurrencyModule\n  | typeof MarketModule\n  | typeof PackModule\n  | typeof RegistryModule\n  | typeof DropModule\n  | typeof DatastoreModule\n  | typeof SplitsModule\n  | typeof BundleDropModule\n  | typeof MarketplaceModule\n  | typeof VoteModule\n  | typeof SignatureMint1155Module;\n\n/**\n * The entrypoint to the SDK.\n * @public\n */\nexport class ThirdwebSDK implements IThirdwebSdk {\n  // default options\n  private options: ISDKOptions;\n  private defaultOptions: ISDKOptions = {\n    ipfsGatewayUrl: \"https://cloudflare-ipfs.com/ipfs/\",\n    registryContractAddress: \"\",\n    maxGasPriceInGwei: 300,\n    gasSpeed: \"fastest\",\n    transactionRelayerUrl: \"\",\n    transactionRelayerSendFunction: this.defaultRelayerSendFunction.bind(this),\n    transactionRelayerForwarderAddress: FORWARDER_ADDRESS,\n    readOnlyRpcUrl: \"\",\n    gasless: {\n      biconomy: {\n        apiId: \"\",\n        apiKey: \"\",\n        deadlineSeconds: 3600,\n        gasTier: \"RAPID\",\n      },\n    },\n    gaslessSendFunction: this.defaultGaslessSendFunction.bind(this),\n  };\n\n  private modules = new Map<string, C.Instance<AnyContract>>();\n  private providerOrSigner: ProviderOrSigner;\n\n  private _signer: Signer | null = null;\n\n  private _jsonConvert = new JsonConvert();\n  private storage: IStorage;\n\n  public event = new EventEmitter2();\n\n  /**\n   * The active Signer, you should not need to access this unless you are deploying new modules.\n   * @internal\n   */\n  public get signer(): Signer | null {\n    return this._signer;\n  }\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  private _registry: RegistryModule | null = null;\n  private get registry(): RegistryModule | null {\n    return this._registry;\n  }\n  private set registry(value: RegistryModule | null) {\n    this._registry = value;\n  }\n\n  constructor(\n    providerOrNetwork: ValidProviderInput,\n    opts?: Partial<ISDKOptions>,\n  ) {\n    this.providerOrSigner = this.setProviderOrSigner(providerOrNetwork);\n    this.options = {\n      ...this.defaultOptions,\n      ...opts,\n    };\n    this.storage = new IpfsStorage(this.options.ipfsGatewayUrl);\n  }\n\n  private updateModuleSigners() {\n    for (const [, _module] of this.modules) {\n      if (this.isReadOnly()) {\n        _module.clearSigner();\n      }\n      _module.setProviderOrSigner(this.providerOrSigner);\n    }\n  }\n\n  private getProvider(): Provider | undefined {\n    const provider = Provider.isProvider(this.providerOrSigner)\n      ? this.providerOrSigner\n      : this.providerOrSigner.provider;\n    return provider;\n  }\n\n  private getSigner(): Signer | undefined {\n    if (Signer.isSigner(this.providerOrSigner)) {\n      return this.providerOrSigner;\n    }\n    return undefined;\n  }\n\n  private async getChainID(): Promise<number> {\n    const provider = this.getProvider();\n    invariant(provider, \"getRegistryAddress() -- No Provider\");\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  private async getRegistryAddress(): Promise<string | undefined> {\n    if (this.options.registryContractAddress) {\n      return this.options.registryContractAddress;\n    }\n    return getContractAddressByChainId(\n      (await this.getChainID()) as SUPPORTED_CHAIN_ID,\n    );\n  }\n  /**\n   *\n   * @param address - The contract address of the given Registry module.\n   * @returns The Registry Module.\n   * @internal\n   */\n  private async getRegistryModule(): Promise<RegistryModule> {\n    const address = await this.getRegistryAddress();\n    invariant(address, \"getRegistryModule() -- No Address\");\n    return (this.registry = this.getOrCreateModule(address, RegistryModule));\n  }\n\n  private getOrCreateModule<T extends AnyContract>(\n    address: string,\n    _Module: T,\n  ): C.Instance<T> {\n    if (this.modules.has(address)) {\n      return this.modules.get(address) as C.Instance<T>;\n    }\n    const _newModule = new _Module(\n      this.providerOrSigner,\n      address,\n      this.options,\n      this,\n    );\n    this.modules.set(address, _newModule);\n    return _newModule as C.Instance<T>;\n  }\n\n  /**\n   * you should not need this unless you are creating new modules\n   * @returns the active registry module forwarder address\n   * @internal\n   */\n  public async getForwarderAddress(): Promise<string> {\n    return await (\n      this.registry || (await this.getRegistryModule())\n    ).readOnlyContract.forwarder();\n  }\n\n  /**\n   * Call this to get the current apps.\n   * @returns All currently registered apps for the connected wallet\n   */\n  public async getApps(address?: string): Promise<IAppModule[]> {\n    return (\n      this.registry || (await this.getRegistryModule())\n    ).getProtocolContracts(address);\n  }\n\n  /**\n   * Call this to create a new app\n   * @param metadata - metadata URI or a JSON object\n   * @returns The transaction receipt\n   */\n  public async createApp(\n    metadata: MetadataURIOrObject,\n  ): Promise<ContractReceipt> {\n    const registryContract = (this.registry || (await this.getRegistryModule()))\n      .contract;\n    const gasPrice = await this.getGasPrice();\n    const txOpts: Record<string, any> = {};\n    // could technically be `0` so simple falsy check does not suffice\n    if (typeof gasPrice === \"number\") {\n      txOpts.gasPrice = parseUnits(gasPrice.toString(), \"gwei\");\n    }\n\n    const uri = await uploadMetadata(\n      metadata,\n      registryContract.address,\n      (await this.signer?.getAddress()) || undefined,\n    );\n\n    const txn = await registryContract.deployProtocol(uri, txOpts);\n    return await txn.wait();\n  }\n\n  /**\n   *\n   * @param speed - what speed to prefer, default: \"fastest\"\n   * @param maxGas - how much gas to use at most, default: 300\n   * @returns the optiomal gas price\n   */\n  public async getGasPrice(\n    speed?: string,\n    maxGasGwei?: number,\n  ): Promise<number | null> {\n    const _speed = speed ? speed : this.options.gasSpeed;\n    const _maxGas = maxGasGwei ? maxGasGwei : this.options.maxGasPriceInGwei;\n    return await getGasPriceForChain(await this.getChainID(), _speed, _maxGas);\n  }\n\n  /**\n   *\n   * @param providerOrSignerOrNetwork - A valid \"ethers\" Provider, Signer or a Network address to create a Provider with.\n   * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.\n   */\n  public setProviderOrSigner(providerOrSignerOrNetwork: ValidProviderInput) {\n    if (\n      Provider.isProvider(providerOrSignerOrNetwork) ||\n      Signer.isSigner(providerOrSignerOrNetwork)\n    ) {\n      // sdk instantiated with a provider / signer\n      this.providerOrSigner = providerOrSignerOrNetwork;\n    } else {\n      // sdk instantiated with a network name / network url\n      this.providerOrSigner = ethers.getDefaultProvider(\n        providerOrSignerOrNetwork,\n      );\n    }\n    // if we're setting a signer then also update that\n    if (Signer.isSigner(providerOrSignerOrNetwork)) {\n      this.signer = providerOrSignerOrNetwork;\n    } else {\n      this.signer = null;\n    }\n    this.updateModuleSigners();\n    return this.providerOrSigner;\n  }\n\n  /**\n   *\n   * @public\n   * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid \"Signer.\")\n   */\n  public isReadOnly(): boolean {\n    return !Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @public\n   * @returns The contract metadata for the given contract address.\n   */\n  public async getContractMetadata(\n    address: string,\n  ): Promise<ModuleMetadataNoType> {\n    return {\n      ...(await getContractMetadata(\n        this.providerOrSigner,\n        address,\n        this.getStorage(),\n        true,\n      )),\n      address,\n    };\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given App module.\n   * @returns The App Module.\n   */\n  public getAppModule(address: string): AppModule {\n    return this.getOrCreateModule(address, AppModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given NFT module.\n   * @returns The NFT Module.\n   */\n  public getNFTModule(address: string): NFTModule {\n    return this.getOrCreateModule(address, NFTModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Collection module.\n   * @returns The Bundle Module.\n   * @deprecated Use the new {@link ThirdwebSDK.getBundleModule} function instead.\n   */\n  public getCollectionModule(address: string): CollectionModule {\n    return this.getBundleModule(address);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Bundle module.\n   * @returns The Bundle Module.\n   */\n  public getBundleModule(address: string): BundleModule {\n    return this.getOrCreateModule(address, BundleModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Pack module.\n   * @returns The Pack Module.\n   */\n  public getPackModule(address: string): PackModule {\n    return this.getOrCreateModule(address, PackModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Currency module.\n   * @returns The Currency Module.\n   *\n   * @deprecated - see {@link TokenModule}\n   */\n  public getCurrencyModule(address: string): CurrencyModule {\n    return this.getOrCreateModule(address, CurrencyModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Token module.\n   * @returns The Token Module.\n   */\n  public getTokenModule(address: string): TokenModule {\n    return this.getOrCreateModule(address, TokenModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Datastore module.\n   * @returns The Datastore Module.\n   */\n  public getDatastoreModule(address: string): DatastoreModule {\n    return this.getOrCreateModule(address, DatastoreModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Market module.\n   * @returns The Market Module.\n   */\n  public getMarketModule(address: string): MarketModule {\n    return this.getOrCreateModule(address, MarketModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Drop module.\n   * @returns The Drop Module.\n   */\n  public getDropModule(address: string): DropModule {\n    return this.getOrCreateModule(address, DropModule);\n  }\n\n  /**\n   * @beta\n   *\n   * @param address - The contract address of the given BundleDrop module.\n   * @returns The Drop Module.\n   */\n  public getBundleDropModule(address: string): BundleDropModule {\n    return this.getOrCreateModule(address, BundleDropModule);\n  }\n\n  /**\n   * @beta\n   *\n   * @param address - The contract address of the given Marketplace module.\n   * @returns The Marketplace Module.\n   */\n  public getMarketplaceModule(address: string): MarketplaceModule {\n    return this.getOrCreateModule(address, MarketplaceModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Royalty module.\n   * @returns The Splits Module.\n   */\n  public getSplitsModule(address: string): SplitsModule {\n    return this.getOrCreateModule(address, SplitsModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Vote module.\n   * @returns The Vote Module.\n   */\n  public getVoteModule(address: string): VoteModule {\n    return this.getOrCreateModule(address, VoteModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given BundleSignature module.\n   * @returns The BundleSignature Module.\n   */\n  public getBundleSignatureModule(address: string): SignatureMint1155Module {\n    return this.getOrCreateModule(address, SignatureMint1155Module);\n  }\n\n  /**\n   * Used for SDK that requires js bridging like Unity SDK.\n   * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.\n   *\n   * @internal\n   * @param route - sdk execution route\n   * @param payload - request arguments for the function\n   * @returns\n   */\n  public invokeRoute(route: string, payload: Record<string, any>) {\n    const parts = route.split(\".\");\n\n    if (parts.length > 0 && parts[0] === \"thirdweb\") {\n      if (parts.length === 4) {\n        // thirdweb.module_name.address.function_name\n        const moduleName = parts[1];\n        const moduleAddress = parts[2];\n        const funcName = parts[3];\n        return (this.getModuleByName(moduleName, moduleAddress) as any)[\n          funcName\n        ](...(payload.arguments || []));\n      } else if (parts.length === 3) {\n        // reserved for: thirdweb.bridge.function_name\n        throw new Error(\"reserved for thirdweb.bridge.function_name\");\n      } else if (parts.length === 2) {\n        // main sdk functions: thirdweb.function_name\n        const funcName = parts[1];\n        return (this as any)[funcName](...(payload.arguments || []));\n      }\n    }\n\n    throw new Error(\"uknown route\");\n  }\n\n  // used for invoke route for unity sdk.\n  private getModuleByName(name: string, address: string) {\n    if (name === \"currency\") {\n      return this.getCurrencyModule(address);\n    } else if (name === \"nft\") {\n      return this.getNFTModule(address);\n    } else if (name === \"market\") {\n      return this.getMarketModule(address);\n    } else if (name === \"bundle\" || name === \"collection\") {\n      return this.getCollectionModule(address);\n    } else if (name === \"drop\") {\n      return this.getDropModule(address);\n    } else if (name === \"splits\") {\n      return this.getSplitsModule(address);\n    } else if (name === \"pack\") {\n      return this.getPackModule(address);\n    } else if (name === \"datastore\") {\n      return this.getDatastoreModule(address);\n    } else if (name === \"app\" || name === \"project\") {\n      return this.getAppModule(address);\n    }\n    throw new Error(\"unsupported module\");\n  }\n\n  private async defaultGaslessSendFunction(\n    contract: BaseContract,\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    if (\n      this.options.gasless.biconomy.apiId &&\n      this.options.gasless.biconomy.apiKey\n    ) {\n      return this.biconomySendFunction(contract, transaction);\n    }\n    return this.defenderSendFunction(contract, transaction);\n  }\n\n  private async biconomySendFunction(\n    _contract: BaseContract,\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer && provider, \"signer and provider must be set\");\n\n    const forwarder = new ethers.Contract(\n      getContractAddressByChainId(\n        transaction.chainId,\n        \"biconomyForwarder\",\n      ) as string,\n      BiconomyForwarderAbi,\n      provider,\n    );\n    const batchId = 0;\n    const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n      batchId,\n    ]);\n\n    const request = {\n      from: transaction.from,\n      to: transaction.to,\n      token: ethers.constants.AddressZero,\n      txGas: transaction.gasLimit.toNumber(),\n      tokenGasPrice: \"0\",\n      batchId,\n      batchNonce: batchNonce.toNumber(),\n      deadline: Math.floor(\n        Date.now() / 1000 +\n          (this.options.gasless.biconomy.deadlineSeconds ?? 3600),\n      ),\n      data: transaction.data,\n    };\n\n    const hashToSign = ethers.utils.arrayify(\n      ethers.utils.solidityKeccak256(\n        [\n          \"address\",\n          \"address\",\n          \"address\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"bytes32\",\n        ],\n        [\n          request.from,\n          request.to,\n          request.token,\n          request.txGas,\n          request.tokenGasPrice,\n          request.batchId,\n          request.batchNonce,\n          request.deadline,\n          ethers.utils.keccak256(request.data),\n        ],\n      ),\n    );\n\n    this.event.emit(EventType.Signature, {\n      status: \"submitted\",\n      message: hashToSign,\n      signature: \"\",\n    });\n    const signature = await signer.signMessage(hashToSign);\n    this.event.emit(EventType.Signature, {\n      status: \"completed\",\n      message: hashToSign,\n      signature,\n    });\n    const response = await fetch(\n      this.options.transactionRelayerUrl ||\n        \"https://api.biconomy.io/api/v2/meta-tx/native\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          from: transaction.from,\n          apiId: this.options.gasless.biconomy.apiId,\n          params: [request, signature],\n          to: transaction.to,\n          gasLimit: transaction.gasLimit.toHexString(),\n          gasType: this.options.gasless.biconomy.gasTier,\n        }),\n        headers: {\n          \"x-api-key\": this.options.gasless.biconomy.apiKey,\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n      },\n    );\n\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.txHash) {\n        throw new Error(\n          `relay transaction failed: ${resp.log || resp.message}`,\n        );\n      }\n      return resp.txHash;\n    }\n    throw new Error(\"relay transaction failed\");\n  }\n\n  private async defenderSendFunction(\n    contract: BaseContract,\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer, \"provider is not set\");\n    invariant(provider, \"provider is not set\");\n    const forwarderAddress = this.options.transactionRelayerForwarderAddress;\n    const forwarder = Forwarder__factory.connect(forwarderAddress, provider);\n    const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n    ]);\n    const domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      chainId: transaction.chainId,\n      verifyingContract: forwarderAddress,\n    };\n\n    const types = {\n      ForwardRequest,\n    };\n\n    let message: ForwardRequestMessage | PermitRequestMessage = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data,\n    };\n\n    let signature: BytesLike;\n\n    this.event.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\",\n    });\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (\n      transaction.functionName === \"approve\" &&\n      transaction.functionArgs.length === 2\n    ) {\n      const spender = transaction.functionArgs[0];\n      const amount = transaction.functionArgs[1];\n\n      // TODO: support DAI permit by signDAIPermit\n      const { message: permit, signature: sig } = await signEIP2612Permit(\n        signer,\n        contract.address,\n        transaction.from,\n        spender,\n        amount,\n      );\n\n      const { r, s, v } = ethers.utils.splitSignature(sig);\n      message = {\n        to: contract.address,\n        owner: permit.owner,\n        spender: permit.spender,\n        value: BigNumber.from(permit.value).toString(),\n        nonce: BigNumber.from(permit.nonce).toString(),\n        deadline: BigNumber.from(permit.deadline).toString(),\n        r,\n        s,\n        v,\n      };\n\n      signature = sig;\n    } else {\n      const { signature: sig } = await signTypedData(\n        signer,\n        domain,\n        types,\n        message,\n      );\n      signature = sig;\n    }\n\n    this.event.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature,\n    });\n\n    // TODO: isolate http request logic in here. `transactionRelayerSendFunction` is deprecated using it for backward compatibility reasons.\n    const txHash = await this.options.transactionRelayerSendFunction(\n      message,\n      signature,\n    );\n\n    return txHash;\n  }\n\n  private async defaultRelayerSendFunction(\n    message: ForwardRequestMessage | PermitRequestMessage,\n    signature: BytesLike,\n  ): Promise<string> {\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if ((message as PermitRequestMessage)?.owner) {\n      messageType = \"permit\";\n    }\n\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      type: messageType,\n    });\n\n    const response = await fetch(this.options.transactionRelayerUrl, {\n      method: \"POST\",\n      body,\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\"relay transaction failed\");\n  }\n\n  public async createSnapshot(leafs: string[]): Promise<SnapshotInfo> {\n    const hasDuplicates = new Set(leafs).size < leafs.length;\n    if (hasDuplicates) {\n      throw new DuplicateLeafsError();\n    }\n\n    const { default: keccak256 } = await import(\"keccak256\");\n\n    const hashedLeafs = leafs.map((l) => keccak256(l));\n    const tree = new MerkleTree(hashedLeafs, keccak256, {\n      sort: true,\n    });\n\n    const snapshot: Snapshot = {\n      merkleRoot: tree.getHexRoot(),\n      claims: leafs.map((l): ClaimProof => {\n        const proof = tree.getHexProof(keccak256(l));\n        return {\n          address: l,\n          proof,\n        };\n      }),\n    };\n\n    const serializedSnapshot = JSON.stringify(\n      this._jsonConvert.serializeObject(snapshot, Snapshot),\n    );\n    const uri = await this.storage.upload(serializedSnapshot);\n\n    return {\n      merkleRoot: tree.getHexRoot(),\n      snapshotUri: uri,\n      snapshot,\n    };\n  }\n\n  /**\n   * Accessor for the storage instance used by the SDK\n   *\n   * @returns - The Storage instance.\n   */\n  public getStorage(): IStorage {\n    return this.storage;\n  }\n\n  /**\n   * Allows you to override the storage used across the SDK.\n   *\n   * @param storage - The Storage instance to use.\n   */\n  public overrideStorage(storage: IStorage): void {\n    this.storage = storage;\n  }\n}\n\n/**\n * Deprecated, please use ThirdwebSDK instead.\n * @public\n * @deprecated use ThirdwebSDK instead\n */\nexport const NFTLabsSDK = ThirdwebSDK;\n","import { MerkleTree } from \"merkletreejs\";\nimport { SHA256 } from \"crypto-js\";\n\n/**\n * Convenience function to generate a merkle root from a list of strings.\n *\n * @param items - Any list of strings that will be hashed and added to the tree.\n * @returns - A merkle root (in hexadecimal).\n */\nexport function generateRoot(items: string[]): string {\n  const tree = new MerkleTree(items, SHA256, {\n    hashLeaves: true,\n    sortLeaves: true,\n  });\n  return tree.getRoot().toString(\"hex\");\n}\n","/**\n * The {@link https://thirdweb.com | thirdweb} typescript sdk.\n *\n * @remarks\n * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.\n *\n * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )\n *\n *\n * @example\n * To get you started here's how you would instantiate the SDK and fetch some NFTs\n *\n * 1. Install the sdk\n * ```shell\n * npm install @3rdweb/sdk\n * ```\n *\n * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.\n *\n * 3. Write the tiniest amount of code!\n * ```typescript\n *  1 | import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *  2 | import type { NFTModule, NFTMetadataOwner } from \"@3rdweb/sdk\";\n *  3 |\n *  5 | const contractAddress = \"0x...\"; // your contract address from step 2\n *  6 |\n *  7 | const sdk = new ThirdwebSDK();\n *  8 |\n *  9 | const nftModule: NFTModule = sdk.getNFTModule(contractAddress);\n * 10 |\n * 11 | const nftListWithOwnerAddress: NFTMetadataOwner[] = await nftModule.getAllWithOwner();\n * 12 |\n * 13 | console.log(nftListWithOwnerAddress);\n * ```\n * ```\n * Output\n * => [\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       ...\n *    ]\n * ```\n *\n * @packageDocumentation\n */\n\nimport fetch from \"node-fetch\";\n\nexport * from \"./common\";\nexport type { InvariantError } from \"./common/invariant\";\nexport * from \"./core\";\nexport type { Module, ModuleWithRoles } from \"./core/module\";\nexport type { IAppModule } from \"./core/registry\";\nexport * from \"./core/types\";\nexport * from \"./enums\";\nexport * from \"./factories\";\nexport * from \"./interfaces\";\nexport * from \"./modules\";\nexport * from \"./storage\";\nexport * from \"./types\";\nexport * from \"./utils\";\n\nif (!globalThis.fetch) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  globalThis.fetch = fetch;\n}\n"]},"metadata":{},"sourceType":"module"}