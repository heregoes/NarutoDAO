{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnyante/Desktop/Buildspace-DAO-Starter/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\"; // import thirdweb\n\nimport { useWeb3 } from \"@3rdweb/hooks\"; // We instantiate the sdk on Rinkeby.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDropModule = sdk.getBundleDropModule(\"0x9D02F9AFee94d5CE7d6eF3922fAd2d35482C986B\");\nconst tokenModule = sdk.getTokenModule(\"0xEbf650c7108D77A79c498E21D524427B982Db502\"); // Our voting contract.\n\nconst voteModule = sdk.getVoteModule(\"0x8862eaa4a643c2AbfF0F2690B4658d2733585E9E\");\n\nconst App = () => {\n  _s();\n\n  // Use the connectWallet hook thirdweb gives us.\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋 Address:\", address); // State variable for us to know if user has our NFT.\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting.\n\n  const [isClaiming, setIsClaiming] = useState(false); // Holds the amount of token each member has in state.\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({}); // The array holding all of our members addresses.\n\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false); // Retrieve all our existing proposals from the contract.\n\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    } // A simple call to voteModule.getAll() to grab the proposals.\n\n\n    try {\n      const proposals = await voteModule.getAll();\n      setProposals(proposals);\n      console.log(\"🌈 Proposals:\", proposals);\n    } catch (error) {\n      console.log(\"failed to get proposals\", error);\n    }\n  }, [hasClaimedNFT]); // We also need to check if the user already voted.\n\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    } // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n\n\n    if (!proposals.length) {\n      return;\n    } // Check if the user has already voted on the first proposal.\n\n\n    try {\n      const hasVoted = await voteModule.hasVoted(proposals[0].proposalId, address);\n      setHasVoted(hasVoted);\n\n      if (hasVoted) {\n        console.log(\"🥵 User has already voted\");\n      } else {\n        console.log(\"🙂 User has not voted yet\");\n      }\n    } catch (error) {\n      console.error(\"Failed to check if wallet has voted\", error);\n    }\n  }, [hasClaimedNFT, proposals, address]); // A fancy function to shorten someones wallet address, no need to show the whole thing. \n\n  const shortenAddress = str => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  }; // This useEffect grabs all the addresses of our members holding our NFT.\n\n\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n\n\n    try {\n      const memberAddresses = await bundleDropModule.getAllClaimerAddresses(\"0\");\n      setMemberAddresses(memberAddresses);\n      console.log(\"🚀 Members addresses\", memberAddresses);\n    } catch (error) {\n      console.error(\"failed to get member list\", error);\n    }\n  }, [hasClaimedNFT]); // This useEffect grabs the # of token each member holds.\n\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Grab all the balances.\n\n\n    try {\n      const amounts = await tokenModule.getAllHolderBalances();\n      setMemberTokenAmounts(amounts);\n      console.log(\"👜 Amounts\", amounts);\n    } catch (error) {\n      console.error(\"failed to get token amounts\", error);\n    }\n  }, [hasClaimedNFT]); // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map(address => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits( // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0, 18)\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]); // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n\n  const signer = provider ? provider.getSigner() : undefined; // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n  useEffect(async () => {\n    // If they don't have an connected wallet, exit!\n    if (!address) {\n      return;\n    } // Check if the user has the NFT by using bundleDropModule.balanceOf\n\n\n    const balance = await bundleDropModule.balanceOf(address, \"0\");\n\n    try {\n      // If balance is greater than 0, they have our NFT!\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    } catch (error) {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    }\n  }, [address]);\n\n  const mintNft = async () => {\n    setIsClaiming(true);\n\n    try {\n      // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n      const result = await bundleDropModule.claim(\"0\", 1);\n      console.log('result', result); // Set claim state.\n\n      setHasClaimedNFT(true); // Show user their fancy new NFT!\n\n      console.log(`🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`);\n    } catch (error) {\n      console.error(\"failed to claim\", error);\n    } finally {\n      // Stop loading state.\n      setIsClaiming(false);\n    }\n  };\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to NarutoDAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }, this);\n  } // This is the case where we have the user's address\n  // which means they've connected their wallet to our site!\n  //   return (\n  //     <div className=\"landing\">\n  //       <h1>👀 wallet connected, now what!</h1>\n  //     </div>);\n\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to NarutoDAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this);\n  } // Add this little piece!\n  // If the user has already claimed their NFT we want to display the interal DAO page to them\n  // only DAO members will see this. Render all the members + token amounts.\n\n\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF6ADAO Member Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Congratulations on being a member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Member List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Token Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: memberList.map(member => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: shortenAddress(member.address)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: member.tokenAmount\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 25\n                  }, this)]\n                }, member.address, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }, this);\n  }\n\n  ; // Render mint nft screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6ADAO Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => mintNft(),\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"zSngI9kpmfjcRvQvRKnagr/O7EQ=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gabrielnyante/Desktop/Buildspace-DAO-Starter/src/App.jsx"],"names":["useEffect","useMemo","useState","ThirdwebSDK","ethers","useWeb3","sdk","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","connectWallet","address","error","provider","console","log","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","getAll","length","proposalId","shortenAddress","str","substring","getAllClaimerAddresses","amounts","getAllHolderBalances","memberList","map","tokenAmount","utils","formatUnits","signer","getSigner","undefined","setProviderOrSigner","balance","balanceOf","gt","mintNft","result","claim","member"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,eAAxB,C,CAEA;;;AACA,MAAMC,GAAG,GAAG,IAAIH,WAAJ,CAAgB,SAAhB,CAAZ;AAEA,MAAMI,gBAAgB,GAAGD,GAAG,CAACE,mBAAJ,CACrB,4CADqB,CAAzB;AAIA,MAAMC,WAAW,GAAGH,GAAG,CAACI,cAAJ,CAChB,4CADgB,CAApB,C,CAIA;;AACA,MAAMC,UAAU,GAAGL,GAAG,CAACM,aAAJ,CACf,4CADe,CAAnB;;AAKA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAA8CZ,OAAO,EAA3D;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,OAA3B,EAHgB,CAKd;;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC,KAAD,CAAlD,CANc,CAQd;;AACF,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,KAAD,CAA5C,CATgB,CAWd;;AACA,QAAM,CAACsB,kBAAD,EAAqBC,qBAArB,IAA8CvB,QAAQ,CAAC,EAAD,CAA5D,CAZc,CAad;;AACA,QAAM,CAACwB,eAAD,EAAkBC,kBAAlB,IAAwCzB,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC4B,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAAC8B,QAAD,EAAWC,WAAX,IAA0B/B,QAAQ,CAAC,KAAD,CAAxC,CAlBc,CAoBd;;AACAF,EAAAA,SAAS,CAAC,YAAY;AACtB,QAAI,CAACoB,aAAL,EAAoB;AAChB;AACH,KAHqB,CAItB;;;AACA,QAAI;AACA,YAAMQ,SAAS,GAAG,MAAMjB,UAAU,CAACuB,MAAX,EAAxB;AACAL,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BS,SAA7B;AACH,KAJD,CAIE,OAAOZ,KAAP,EAAc;AACZE,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCH,KAAvC;AACH;AACA,GAZQ,EAYN,CAACI,aAAD,CAZM,CAAT,CArBc,CAmCd;;AACApB,EAAAA,SAAS,CAAC,YAAY;AACtB,QAAI,CAACoB,aAAL,EAAoB;AAChB;AACH,KAHqB,CAKtB;AACA;;;AACA,QAAI,CAACQ,SAAS,CAACO,MAAf,EAAuB;AACnB;AACH,KATqB,CAWtB;;;AACA,QAAI;AACA,YAAMH,QAAQ,GAAG,MAAMrB,UAAU,CAACqB,QAAX,CAAoBJ,SAAS,CAAC,CAAD,CAAT,CAAaQ,UAAjC,EAA6CrB,OAA7C,CAAvB;AACAkB,MAAAA,WAAW,CAACD,QAAD,CAAX;;AACA,UAAGA,QAAH,EAAa;AACbd,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACC,OAFD,MAEO;AACPD,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACC;AACJ,KARD,CAQE,OAAOH,KAAP,EAAc;AACZE,MAAAA,OAAO,CAACF,KAAR,CAAc,qCAAd,EAAqDA,KAArD;AACH;AACA,GAvBQ,EAuBN,CAACI,aAAD,EAAgBQ,SAAhB,EAA2Bb,OAA3B,CAvBM,CAAT,CApCc,CA6Dd;;AACA,QAAMsB,cAAc,GAAIC,GAAD,IAAS;AAChC,WAAOA,GAAG,CAACC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,IAAsB,KAAtB,GAA8BD,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACH,MAAJ,GAAa,CAA3B,CAArC;AACC,GAFD,CA9Dc,CAkEd;;;AACAnC,EAAAA,SAAS,CAAC,YAAY;AACtB,QAAI,CAACoB,aAAL,EAAoB;AAChB;AACH,KAHqB,CAKtB;AACA;;;AACA,QAAI;AACA,YAAMM,eAAe,GAAG,MAAMnB,gBAAgB,CAACiC,sBAAjB,CAAwC,GAAxC,CAA9B;AACAb,MAAAA,kBAAkB,CAACD,eAAD,CAAlB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCO,eAApC;AACH,KAJD,CAIE,OAAOV,KAAP,EAAc;AACZE,MAAAA,OAAO,CAACF,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACH;AACA,GAdQ,EAcN,CAACI,aAAD,CAdM,CAAT,CAnEc,CAmFd;;AACApB,EAAAA,SAAS,CAAC,YAAY;AACtB,QAAI,CAACoB,aAAL,EAAoB;AAChB;AACH,KAHqB,CAKtB;;;AACA,QAAI;AACA,YAAMqB,OAAO,GAAG,MAAMhC,WAAW,CAACiC,oBAAZ,EAAtB;AACAjB,MAAAA,qBAAqB,CAACgB,OAAD,CAArB;AACAvB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BsB,OAA1B;AACH,KAJD,CAIE,OAAOzB,KAAP,EAAc;AACZE,MAAAA,OAAO,CAACF,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACH;AACA,GAbQ,EAaN,CAACI,aAAD,CAbM,CAAT,CApFc,CAmGd;;AACA,QAAMuB,UAAU,GAAG1C,OAAO,CAAC,MAAM;AACjC,WAAOyB,eAAe,CAACkB,GAAhB,CAAqB7B,OAAD,IAAa;AACpC,aAAO;AACPA,QAAAA,OADO;AAEP8B,QAAAA,WAAW,EAAEzC,MAAM,CAAC0C,KAAP,CAAaC,WAAb,EACT;AACA;AACAvB,QAAAA,kBAAkB,CAACT,OAAD,CAAlB,IAA+B,CAHtB,EAIT,EAJS;AAFN,OAAP;AASH,KAVM,CAAP;AAWC,GAZyB,EAYvB,CAACW,eAAD,EAAkBF,kBAAlB,CAZuB,CAA1B,CApGc,CAkHd;AACF;;AACA,QAAMwB,MAAM,GAAG/B,QAAQ,GAAGA,QAAQ,CAACgC,SAAT,EAAH,GAA0BC,SAAjD,CApHgB,CAsHd;;AACAlD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACAM,IAAAA,GAAG,CAAC6C,mBAAJ,CAAwBH,MAAxB;AACD,GAJM,EAIJ,CAACA,MAAD,CAJI,CAAT;AAOAhD,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA,QAAI,CAACe,OAAL,EAAc;AACZ;AACD,KAJmB,CAMpB;;;AACA,UAAMqC,OAAO,GAAG,MAAM7C,gBAAgB,CAAC8C,SAAjB,CAA2BtC,OAA3B,EAAoC,GAApC,CAAtB;;AAEA,QAAI;AACF;AACA,UAAGqC,OAAO,CAACE,EAAR,CAAW,CAAX,CAAH,EAAkB;AACdjC,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACH,OAHD,MAGO;AACHE,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACH;AACF,KATD,CASE,OAAOH,KAAP,EAAc;AACZK,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAH,MAAAA,OAAO,CAACF,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACH;AACF,GAtBQ,EAsBN,CAACD,OAAD,CAtBM,CAAT;;AAwBA,QAAMwC,OAAO,GAAG,YAAY;AACxBhC,IAAAA,aAAa,CAAC,IAAD,CAAb;;AACA,QAAI;AACF;AACA,YAAMiC,MAAM,GAAG,MAAMjD,gBAAgB,CAACkD,KAAjB,CAAuB,GAAvB,EAA2B,CAA3B,CAArB;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBqC,MAAtB,EAHE,CAIF;;AACAnC,MAAAA,gBAAgB,CAAC,IAAD,CAAhB,CALE,CAMF;;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAa,uFAAsFZ,gBAAgB,CAACQ,OAAQ,IAA5H;AACD,KARD,CAQE,OAAOC,KAAP,EAAc;AACdE,MAAAA,OAAO,CAACF,KAAR,CAAc,iBAAd,EAAiCA,KAAjC;AACD,KAVD,SAUU;AACR;AACAO,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAhBH;;AAkBA,MAAI,CAACR,OAAL,EAAc;AACV,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,UAAD,CAApC;AAAkD,QAAA,SAAS,EAAC,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GAjLW,CAqLhB;AACA;AACF;AACA;AACA;AACA;;;AAEI,MAAI,CAACC,OAAL,EAAc;AACV,wBACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,UAAD,CAApC;AAAkD,QAAA,SAAS,EAAC,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAQH,GArMa,CAuMd;AACA;AACA;;;AACA,MAAIM,aAAJ,EAAmB;AACf,wBACA;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,+BACA;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,SAAS,EAAC,MAAjB;AAAA,oCACA;AAAA,qCACI;AAAA,wCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADA,eAOA;AAAA,wBACKuB,UAAU,CAACC,GAAX,CAAgBc,MAAD,IAAY;AAC5B,oCACI;AAAA,0CACA;AAAA,8BAAKrB,cAAc,CAACqB,MAAM,CAAC3C,OAAR;AAAnB;AAAA;AAAA;AAAA;AAAA,0BADA,eAEA;AAAA,8BAAK2C,MAAM,CAACb;AAAZ;AAAA;AAAA;AAAA;AAAA,0BAFA;AAAA,mBAASa,MAAM,CAAC3C,OAAhB;AAAA;AAAA;AAAA;AAAA,wBADJ;AAMC,eAPA;AADL;AAAA;AAAA;AAAA;AAAA,oBAPA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AA6BH;;AAAA,GAxOa,CA0OhB;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,QAAQ,EAAEO,UADZ;AAEE,MAAA,OAAO,EAAE,MAAMiC,OAAO,EAFxB;AAAA,gBAIGjC,UAAU,GAAG,YAAH,GAAkB;AAJ/B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAtPD;;GAAMT,G;UAEgDR,O;;;KAFhDQ,G;AAwPN,eAAeA,GAAf","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\";\n\n// import thirdweb\nimport { useWeb3 } from \"@3rdweb/hooks\";\n\n// We instantiate the sdk on Rinkeby.\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n    \"0x9D02F9AFee94d5CE7d6eF3922fAd2d35482C986B\",\n);\n\nconst tokenModule = sdk.getTokenModule(\n    \"0xEbf650c7108D77A79c498E21D524427B982Db502\",\n);\n\n// Our voting contract.\nconst voteModule = sdk.getVoteModule(\n    \"0x8862eaa4a643c2AbfF0F2690B4658d2733585E9E\",\n  );\n\n\nconst App = () => {\n  // Use the connectWallet hook thirdweb gives us.\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋 Address:\", address)\n\n    // State variable for us to know if user has our NFT.\n    const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\n    // isClaiming lets us easily keep a loading state while the NFT is minting.\n  const [isClaiming, setIsClaiming] = useState(false);\n\n    // Holds the amount of token each member has in state.\n    const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n    // The array holding all of our members addresses.\n    const [memberAddresses, setMemberAddresses] = useState([]);\n\n    const [proposals, setProposals] = useState([]);\n    const [isVoting, setIsVoting] = useState(false);\n    const [hasVoted, setHasVoted] = useState(false);\n\n    // Retrieve all our existing proposals from the contract.\n    useEffect(async () => {\n    if (!hasClaimedNFT) {\n        return;\n    }\n    // A simple call to voteModule.getAll() to grab the proposals.\n    try {\n        const proposals = await voteModule.getAll();\n        setProposals(proposals);\n        console.log(\"🌈 Proposals:\", proposals);\n    } catch (error) {\n        console.log(\"failed to get proposals\", error);\n    }\n    }, [hasClaimedNFT]);\n\n    // We also need to check if the user already voted.\n    useEffect(async () => {\n    if (!hasClaimedNFT) {\n        return;\n    }\n\n    // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n    if (!proposals.length) {\n        return;\n    }\n\n    // Check if the user has already voted on the first proposal.\n    try {\n        const hasVoted = await voteModule.hasVoted(proposals[0].proposalId, address);\n        setHasVoted(hasVoted);\n        if(hasVoted) {\n        console.log(\"🥵 User has already voted\");\n        } else {\n        console.log(\"🙂 User has not voted yet\");\n        }\n    } catch (error) {\n        console.error(\"Failed to check if wallet has voted\", error);\n    }\n    }, [hasClaimedNFT, proposals, address]);\n\n    // A fancy function to shorten someones wallet address, no need to show the whole thing. \n    const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n    };\n\n    // This useEffect grabs all the addresses of our members holding our NFT.\n    useEffect(async () => {\n    if (!hasClaimedNFT) {\n        return;\n    }\n    \n    // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n    try {\n        const memberAddresses = await bundleDropModule.getAllClaimerAddresses(\"0\");\n        setMemberAddresses(memberAddresses);\n        console.log(\"🚀 Members addresses\", memberAddresses);\n    } catch (error) {\n        console.error(\"failed to get member list\", error);\n    }\n    }, [hasClaimedNFT]);\n\n    // This useEffect grabs the # of token each member holds.\n    useEffect(async () => {\n    if (!hasClaimedNFT) {\n        return;\n    }\n\n    // Grab all the balances.\n    try {\n        const amounts = await tokenModule.getAllHolderBalances();\n        setMemberTokenAmounts(amounts);\n        console.log(\"👜 Amounts\", amounts);\n    } catch (error) {\n        console.error(\"failed to get token amounts\", error);\n    }\n    }, [hasClaimedNFT]);\n\n    // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n    const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n        return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n            // If the address isn't in memberTokenAmounts, it means they don't\n            // hold any of our token.\n            memberTokenAmounts[address] || 0,\n            18,\n        ),\n        };\n    });\n    }, [memberAddresses, memberTokenAmounts]);\n\n    // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n    // Another useEffect!\n    useEffect(() => {\n        // We pass the signer to the sdk, which enables us to interact with\n        // our deployed contract!\n        sdk.setProviderOrSigner(signer);\n      }, [signer]);\n    \n\n    useEffect(async () => {\n      // If they don't have an connected wallet, exit!\n      if (!address) {\n        return;\n      }\n  \n      // Check if the user has the NFT by using bundleDropModule.balanceOf\n      const balance = await bundleDropModule.balanceOf(address, \"0\");\n     \n      try {\n        // If balance is greater than 0, they have our NFT!\n        if(balance.gt(0)) {\n            setHasClaimedNFT(true);\n            console.log(\"🌟 this user has a membership NFT!\");\n        } else {\n            setHasClaimedNFT(false);\n            console.log(\"😭 this user doesn't have a membership NFT.\")\n        }\n      } catch (error) {\n          setHasClaimedNFT(false);\n          console.error(\"failed to nft balance\", error);\n      }\n    }, [address]);\n\n    const mintNft = async () => {\n        setIsClaiming(true);\n        try {\n          // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n          const result = await bundleDropModule.claim(\"0\",1);\n          console.log('result', result);\n          // Set claim state.\n          setHasClaimedNFT(true);\n          // Show user their fancy new NFT!\n          console.log(`🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`);\n        } catch (error) {\n          console.error(\"failed to claim\", error);\n        } finally {\n          // Stop loading state.\n          setIsClaiming(false);\n        }\n      }\n\n    if (!address) {\n        return (\n          <div className=\"landing\">\n            <h1>Welcome to NarutoDAO</h1>\n            <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n              Connect your wallet\n            </button>\n          </div>\n        );\n      }\n\n\n  \n  // This is the case where we have the user's address\n  // which means they've connected their wallet to our site!\n//   return (\n//     <div className=\"landing\">\n//       <h1>👀 wallet connected, now what!</h1>\n//     </div>);\n\n    if (!address) {\n        return (\n        <div className=\"landing\">\n            <h1>Welcome to NarutoDAO</h1>\n            <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n            Connect your wallet\n            </button>\n        </div>\n        );\n    }\n    \n    // Add this little piece!\n    // If the user has already claimed their NFT we want to display the interal DAO page to them\n    // only DAO members will see this. Render all the members + token amounts.\n    if (hasClaimedNFT) {\n        return (\n        <div className=\"member-page\">\n            <h1>🍪DAO Member Page</h1>\n            <p>Congratulations on being a member</p>\n            <div>\n            <div>\n                <h2>Member List</h2>\n                <table className=\"card\">\n                <thead>\n                    <tr>\n                    <th>Address</th>\n                    <th>Token Amount</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {memberList.map((member) => {\n                    return (\n                        <tr key={member.address}>\n                        <td>{shortenAddress(member.address)}</td>\n                        <td>{member.tokenAmount}</td>\n                        </tr>\n                    );\n                    })}\n                </tbody>\n                </table>\n            </div>\n            </div>\n        </div>\n        );\n    };\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}