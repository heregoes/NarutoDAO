{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnyante/Desktop/Buildspace-DAO-Starter/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\"; // import thirdweb\n\nimport { useWeb3 } from \"@3rdweb/hooks\"; // We instantiate the sdk on Rinkeby.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDropModule = sdk.getBundleDropModule(\"0x9D02F9AFee94d5CE7d6eF3922fAd2d35482C986B\");\n\nconst App = () => {\n  _s();\n\n  // Use the connectWallet hook thirdweb gives us.\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"ðŸ‘‹ Address:\", address); // State variable for us to know if user has our NFT.\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  useEffect(async () => {\n    // If they don't have an connected wallet, exit!\n    if (!address) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"landing\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome to NarutoDAO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => connectWallet(\"injected\"),\n          className: \"btn-hero\",\n          children: \"Connect your wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this);\n    } // Check if the user has the NFT by using bundleDropModule.balanceOf\n\n\n    const balance = await bundleDropModule.balanceOf(address, \"0\");\n\n    try {\n      // If balance is greater than 0, they have our NFT!\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"ðŸŒŸ this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\");\n      }\n    } catch (error) {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    }\n  }, [address]); // This is the case where we have the user's address\n  // which means they've connected their wallet to our site!\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC40 wallet connected, now what!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"hD1U+Ir37Qwd90vA80Pp0/qkVrw=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gabrielnyante/Desktop/Buildspace-DAO-Starter/src/App.jsx"],"names":["useEffect","useMemo","useState","ThirdwebSDK","useWeb3","sdk","bundleDropModule","getBundleDropModule","App","connectWallet","address","error","provider","console","log","hasClaimedNFT","setHasClaimedNFT","balance","balanceOf","gt"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CAEA;;AACA,SAASC,OAAT,QAAwB,eAAxB,C,CAEA;;;AACA,MAAMC,GAAG,GAAG,IAAIF,WAAJ,CAAgB,SAAhB,CAAZ;AAEA,MAAMG,gBAAgB,GAAGD,GAAG,CAACE,mBAAJ,CACrB,4CADqB,CAAzB;;AAIA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAA8CR,OAAO,EAA3D;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,OAA3B,EAHgB,CAKd;;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,KAAD,CAAlD;AAEAF,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA,QAAI,CAACU,OAAL,EAAc;AACZ,0BACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,UAAD,CAApC;AAAkD,UAAA,SAAS,EAAC,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAQD,KAXmB,CAapB;;;AACA,UAAMQ,OAAO,GAAG,MAAMX,gBAAgB,CAACY,SAAjB,CAA2BR,OAA3B,EAAoC,GAApC,CAAtB;;AAEA,QAAI;AACF;AACA,UAAGO,OAAO,CAACE,EAAR,CAAW,CAAX,CAAH,EAAkB;AACdH,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACH,OAHD,MAGO;AACHE,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACH;AACF,KATD,CASE,OAAOH,KAAP,EAAc;AACZK,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAH,MAAAA,OAAO,CAACF,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACH;AACF,GA7BQ,EA6BN,CAACD,OAAD,CA7BM,CAAT,CARc,CAyChB;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAID,CA/CD;;GAAMF,G;UAEgDJ,O;;;KAFhDI,G;AAiDN,eAAeA,GAAf","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// import thirdweb\nimport { useWeb3 } from \"@3rdweb/hooks\";\n\n// We instantiate the sdk on Rinkeby.\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n    \"0x9D02F9AFee94d5CE7d6eF3922fAd2d35482C986B\",\n  );\n\nconst App = () => {\n  // Use the connectWallet hook thirdweb gives us.\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"ðŸ‘‹ Address:\", address)\n\n    // State variable for us to know if user has our NFT.\n    const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\n    useEffect(async () => {\n      // If they don't have an connected wallet, exit!\n      if (!address) {\n        return (\n            <div className=\"landing\">\n              <h1>Welcome to NarutoDAO</h1>\n              <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n                Connect your wallet\n              </button>\n            </div>\n          );\n      }\n  \n      // Check if the user has the NFT by using bundleDropModule.balanceOf\n      const balance = await bundleDropModule.balanceOf(address, \"0\");\n     \n      try {\n        // If balance is greater than 0, they have our NFT!\n        if(balance.gt(0)) {\n            setHasClaimedNFT(true);\n            console.log(\"ðŸŒŸ this user has a membership NFT!\");\n        } else {\n            setHasClaimedNFT(false);\n            console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\")\n        }\n      } catch (error) {\n          setHasClaimedNFT(false);\n          console.error(\"failed to nft balance\", error);\n      }\n    }, [address]);\n\n\n  \n  // This is the case where we have the user's address\n  // which means they've connected their wallet to our site!\n  return (\n    <div className=\"landing\">\n      <h1>ðŸ‘€ wallet connected, now what!</h1>\n    </div>);\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}